
Modbus_Rtu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005270  08005270  00006270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a0  080052a0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080052a0  080052a0  000062a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a8  080052a8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a8  080052a8  000062a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052ac  080052ac  000062ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080052b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  2000005c  0800530c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  0800530c  00007794  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c25c  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261e  00000000  00000000  000132e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00015908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e4  00000000  00000000  00016380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016596  00000000  00000000  00016b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df06  00000000  00000000  0002d0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d85  00000000  00000000  0003b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1d85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c54  00000000  00000000  000c1dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c4a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005258 	.word	0x08005258

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08005258 	.word	0x08005258

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <UART1_RxEventCallback>:
UART_HandleTypeDef *uart;

HoldingRegs_t *Hregs;
InputRegs_t *Iregs;

void UART1_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
	MB.RX_LEN = Size;
 80004d4:	4a04      	ldr	r2, [pc, #16]	@ (80004e8 <UART1_RxEventCallback+0x20>)
 80004d6:	887b      	ldrh	r3, [r7, #2]
 80004d8:	8653      	strh	r3, [r2, #50]	@ 0x32
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000078 	.word	0x20000078

080004ec <UART1_TxCpltCallback>:

void UART1_TxCpltCallback(UART_HandleTypeDef *huart) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	MB_Slave_TX_Complete(&MB);
 80004f4:	4803      	ldr	r0, [pc, #12]	@ (8000504 <UART1_TxCpltCallback+0x18>)
 80004f6:	f001 fac1 	bl	8001a7c <MB_Slave_TX_Complete>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000078 	.word	0x20000078

08000508 <UART1_ErrorCallback>:

void UART1_ErrorCallback(UART_HandleTypeDef *huart) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	MB.hw_interface.MB_StartListening();
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <UART1_ErrorCallback+0x18>)
 8000512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000514:	4798      	blx	r3
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000078 	.word	0x20000078

08000524 <MB_Transmit_Data>:

// Wrapper function to transmit data over UART1
MB_Status_t MB_Transmit_Data(uint8_t *data, uint16_t Len) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Transmit_DMA(uart, data, Len) == HAL_OK ?
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <MB_Transmit_Data+0x30>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	887a      	ldrh	r2, [r7, #2]
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fc6b 	bl	8003e14 <HAL_UART_Transmit_DMA>
 800053e:	4603      	mov	r3, r0
			MB_STAT_OK : MB_TX_ERR_HW;
 8000540:	2b00      	cmp	r3, #0
 8000542:	d101      	bne.n	8000548 <MB_Transmit_Data+0x24>
 8000544:	2300      	movs	r3, #0
 8000546:	e000      	b.n	800054a <MB_Transmit_Data+0x26>
 8000548:	2307      	movs	r3, #7
}
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200000e0 	.word	0x200000e0

08000558 <MB_Activate_TX>:

// Wrapper function to switch the system to transmit mode (necessary for RS485 2-wire mode)
MB_Status_t MB_Activate_TX(uint8_t TXON) {
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	// Control the RS485 TX enable pin (if applicable)
	// Not used because we use RS232
	// HAL_GPIO_WritePin(MODBUS_TXEN_GPIO_Port, MODBUS_TXEN_Pin, TXON ? GPIO_PIN_SET : GPIO_PIN_RESET);
	return MB_STAT_OK;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <MB_StartListening>:

// Wrapper function used to start listening to the UART1 bus
MB_Status_t MB_StartListening() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	// Start receiving data either until the buffer is filled or the data stream is finished (data line returns to idle)
	HAL_UARTEx_ReceiveToIdle_IT(uart, MB.RxBuffer, MB.TX_RX_Buffer_Size);
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <MB_StartListening+0x1c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <MB_StartListening+0x20>)
 800057a:	6891      	ldr	r1, [r2, #8]
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <MB_StartListening+0x20>)
 800057e:	8992      	ldrh	r2, [r2, #12]
 8000580:	4618      	mov	r0, r3
 8000582:	f003 fcb7 	bl	8003ef4 <HAL_UARTEx_ReceiveToIdle_IT>
	return MB_STAT_OK;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200000e0 	.word	0x200000e0
 8000590:	20000078 	.word	0x20000078

08000594 <MB_Request_Recieved>:

// Callback function when a master sends a request (to read or write data)
// The user can implement custom logic here. After the function exits, the Modbus reply will be automatically issued.
// Callback function when a master sends a request (to read or write data)
MB_Status_t MB_Request_Recieved(void *ptr) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	MB_Slave_t *mb = (MB_Slave_t*) ptr;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60fb      	str	r3, [r7, #12]



	return MB_STAT_OK;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <MB_Init_UART1>:

// Initialize Modbus for UART1

MB_Status_t MB_Init_UART1(UART_HandleTypeDef *huart, uint8_t SLA) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	70fb      	strb	r3, [r7, #3]
	uart = huart;
 80005bc:	4a28      	ldr	r2, [pc, #160]	@ (8000660 <MB_Init_UART1+0xb0>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]

	// Register the UART1 callbacks
	HAL_UART_RegisterRxEventCallback(huart, UART1_RxEventCallback);
 80005c2:	4928      	ldr	r1, [pc, #160]	@ (8000664 <MB_Init_UART1+0xb4>)
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f003 fbeb 	bl	8003da0 <HAL_UART_RegisterRxEventCallback>
	HAL_UART_RegisterCallback(huart, HAL_UART_TX_COMPLETE_CB_ID,
 80005ca:	4a27      	ldr	r2, [pc, #156]	@ (8000668 <MB_Init_UART1+0xb8>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f003 fb4e 	bl	8003c70 <HAL_UART_RegisterCallback>
			UART1_TxCpltCallback);
	HAL_UART_RegisterCallback(huart, HAL_UART_ERROR_CB_ID, UART1_ErrorCallback);
 80005d4:	4a25      	ldr	r2, [pc, #148]	@ (800066c <MB_Init_UART1+0xbc>)
 80005d6:	2104      	movs	r1, #4
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f003 fb49 	bl	8003c70 <HAL_UART_RegisterCallback>

	// Set buffer size
	MB.TX_RX_Buffer_Size = 256; // Set the buffer size to 256 bytes
 80005de:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <MB_Init_UART1+0xc0>)
 80005e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e4:	819a      	strh	r2, [r3, #12]

	// Set the size of holding and input registers
	MB.HoldingRegSize = HoldingRegsSize;  // size from Modbuse reg map
 80005e6:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <MB_Init_UART1+0xc0>)
 80005e8:	2282      	movs	r2, #130	@ 0x82
 80005ea:	821a      	strh	r2, [r3, #16]
	MB.InputRegSize = InputRegsSize;    // size from Modbuse reg map
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <MB_Init_UART1+0xc0>)
 80005ee:	2224      	movs	r2, #36	@ 0x24
 80005f0:	835a      	strh	r2, [r3, #26]


	// Set the size of input bits and coil bits
	MB.InputBitsSize = 2;    // 2 bytes for input bits (16 bits)
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MB_Init_UART1+0xc0>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	845a      	strh	r2, [r3, #34]	@ 0x22
	MB.CoilBitsSize = 2;     // 2 bytes for coil bits (16 bits)
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <MB_Init_UART1+0xc0>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

	// Assign the function pointers
	MB.hw_interface.MB_Activate_TX = &MB_Activate_TX;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <MB_Init_UART1+0xc0>)
 8000600:	4a1c      	ldr	r2, [pc, #112]	@ (8000674 <MB_Init_UART1+0xc4>)
 8000602:	641a      	str	r2, [r3, #64]	@ 0x40
	MB.hw_interface.MB_Transmit = &MB_Transmit_Data;
 8000604:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <MB_Init_UART1+0xc0>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <MB_Init_UART1+0xc8>)
 8000608:	639a      	str	r2, [r3, #56]	@ 0x38
	MB.hw_interface.MB_StartListening = &MB_StartListening;
 800060a:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MB_Init_UART1+0xc0>)
 800060c:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <MB_Init_UART1+0xcc>)
 800060e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MB.hw_interface.MB_Request_Recieved = &MB_Request_Recieved; // Corrected to use MB_Request_Recieved
 8000610:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <MB_Init_UART1+0xc0>)
 8000612:	4a1b      	ldr	r2, [pc, #108]	@ (8000680 <MB_Init_UART1+0xd0>)
 8000614:	645a      	str	r2, [r3, #68]	@ 0x44

	// Set the slave address
	MB.SLA = SLA;
 8000616:	4a16      	ldr	r2, [pc, #88]	@ (8000670 <MB_Init_UART1+0xc0>)
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	7013      	strb	r3, [r2, #0]

	// Configure transmission and reception settings
	MB.TX_Automplete = 1; // Disable auto-complete for TX (manual control)
 800061c:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <MB_Init_UART1+0xc0>)
 800061e:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
	MB.RX_Silent_Interval_MS = 2; // Silent interval between messages (2 ms)
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MB_Init_UART1+0xc0>)
 800062c:	2202      	movs	r2, #2
 800062e:	869a      	strh	r2, [r3, #52]	@ 0x34
	MB.RX_Timeout = 100; // Timeout for receiving messages (100 ms)
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MB_Init_UART1+0xc0>)
 8000632:	2264      	movs	r2, #100	@ 0x64
 8000634:	86da      	strh	r2, [r3, #54]	@ 0x36



	// Switch to listen mode
	MB.hw_interface.MB_Activate_TX(0);
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MB_Init_UART1+0xc0>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063a:	2000      	movs	r0, #0
 800063c:	4798      	blx	r3

	// Initialize the Modbus slave
	MB_Slave_Init(&MB);
 800063e:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MB_Init_UART1+0xc0>)
 8000640:	f000 fe41 	bl	80012c6 <MB_Slave_Init>


	Hregs=(HoldingRegs_t*)MB.HoldingRegs;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MB_Init_UART1+0xc0>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <MB_Init_UART1+0xd4>)
 800064a:	6013      	str	r3, [r2, #0]
	Iregs=(InputRegs_t*)MB.InputRegs;
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MB_Init_UART1+0xc0>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <MB_Init_UART1+0xd8>)
 8000652:	6013      	str	r3, [r2, #0]

	return MB_STAT_OK;
 8000654:	2300      	movs	r3, #0

}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000e0 	.word	0x200000e0
 8000664:	080004c9 	.word	0x080004c9
 8000668:	080004ed 	.word	0x080004ed
 800066c:	08000509 	.word	0x08000509
 8000670:	20000078 	.word	0x20000078
 8000674:	08000559 	.word	0x08000559
 8000678:	08000525 	.word	0x08000525
 800067c:	08000571 	.word	0x08000571
 8000680:	08000595 	.word	0x08000595
 8000684:	200000e4 	.word	0x200000e4
 8000688:	200000e8 	.word	0x200000e8

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f001 fc2b 	bl	8001eec <HAL_Init>
  float test5;
  uint8_t test6;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f87d 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f935 	bl	8000908 <MX_GPIO_Init>
  MX_DMA_Init();
 800069e:	f000 f90b 	bl	80008b8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006a2:	f000 f8df 	bl	8000864 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MB_Init_UART1(&huart1, 0x1);
 80006a6:	2101      	movs	r1, #1
 80006a8:	4836      	ldr	r0, [pc, #216]	@ (8000784 <main+0xf8>)
 80006aa:	f7ff ff81 	bl	80005b0 <MB_Init_UART1>

  EEPROM_Process_Area(0, ((uint8_t*)Hregs), sizeof(MB.HoldingRegs), Write);
 80006ae:	4b36      	ldr	r3, [pc, #216]	@ (8000788 <main+0xfc>)
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2204      	movs	r2, #4
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 fb1b 	bl	8000cf2 <EEPROM_Process_Area>
  EEPROM_Process_Area(0, ((uint8_t*)Iregs), sizeof(MB.InputRegs), Write);
 80006bc:	4b33      	ldr	r3, [pc, #204]	@ (800078c <main+0x100>)
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2204      	movs	r2, #4
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fb14 	bl	8000cf2 <EEPROM_Process_Area>
  EEPROM_Process_Area(0, ((uint8_t*)MB.CoilBits), sizeof(MB.CoilBits), Write);
 80006ca:	4b31      	ldr	r3, [pc, #196]	@ (8000790 <main+0x104>)
 80006cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80006ce:	2300      	movs	r3, #0
 80006d0:	2204      	movs	r2, #4
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 fb0d 	bl	8000cf2 <EEPROM_Process_Area>
  EEPROM_Process_Area(0, ((uint8_t*)MB.InputBits), sizeof(MB.InputBits), Write);
 80006d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <main+0x104>)
 80006da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80006dc:	2300      	movs	r3, #0
 80006de:	2204      	movs	r2, #4
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 fb06 	bl	8000cf2 <EEPROM_Process_Area>

  EEPROM_Process_Area(0, ((uint8_t*)Hregs), sizeof(MB.HoldingRegs), Read);
 80006e6:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <main+0xfc>)
 80006e8:	6819      	ldr	r1, [r3, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	2204      	movs	r2, #4
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 faff 	bl	8000cf2 <EEPROM_Process_Area>
  EEPROM_Process_Area(0, ((uint8_t*)Iregs), sizeof(MB.InputRegs), Read);
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <main+0x100>)
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	2301      	movs	r3, #1
 80006fa:	2204      	movs	r2, #4
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 faf8 	bl	8000cf2 <EEPROM_Process_Area>
  EEPROM_Process_Area(0, ((uint8_t*)MB.CoilBits), sizeof(MB.CoilBits), Read);
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <main+0x104>)
 8000704:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000706:	2301      	movs	r3, #1
 8000708:	2204      	movs	r2, #4
 800070a:	2000      	movs	r0, #0
 800070c:	f000 faf1 	bl	8000cf2 <EEPROM_Process_Area>
  EEPROM_Process_Area(0, ((uint8_t*)MB.InputBits), sizeof(MB.InputBits), Read);
 8000710:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <main+0x104>)
 8000712:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000714:	2301      	movs	r3, #1
 8000716:	2204      	movs	r2, #4
 8000718:	2000      	movs	r0, #0
 800071a:	f000 faea 	bl	8000cf2 <EEPROM_Process_Area>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MB_Slave_Routine(&MB, HAL_GetTick());
 800071e:	f001 fc4b 	bl	8001fb8 <HAL_GetTick>
 8000722:	4603      	mov	r3, r0
 8000724:	4619      	mov	r1, r3
 8000726:	481a      	ldr	r0, [pc, #104]	@ (8000790 <main+0x104>)
 8000728:	f000 fe76 	bl	8001418 <MB_Slave_Routine>
//testing for holding reg to see if the addresse are aligend
		test1=Hregs->sParams.Iq_Kp;//add start 0 which means qmod_add 1
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <main+0xfc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	617b      	str	r3, [r7, #20]
		test2=Hregs->sParams.Idq_Filter_Const;//add start 10 qmod_add 11
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <main+0xfc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	613b      	str	r3, [r7, #16]
		test3=Hregs->sParams.Checksum;//add start 38  qmod_add 39
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <main+0xfc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800074c:	edc7 7a03 	vstr	s15, [r7, #12]
		test4=Hregs->System_State;//add start 128 at qmod_add 129
 8000750:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <main+0xfc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8000758:	ee07 3a90 	vmov	s15, r3
 800075c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000760:	edc7 7a02 	vstr	s15, [r7, #8]
		test5=Hregs->FOC_State_Machine;//add start 130 at qmod_add 131
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <main+0xfc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800076c:	ee07 3a90 	vmov	s15, r3
 8000770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000774:	edc7 7a01 	vstr	s15, [r7, #4]
		test6=MB.CoilBits;
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <main+0x104>)
 800077a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077c:	70fb      	strb	r3, [r7, #3]
		MB_Slave_Routine(&MB, HAL_GetTick());
 800077e:	bf00      	nop
 8000780:	e7cd      	b.n	800071e <main+0x92>
 8000782:	bf00      	nop
 8000784:	200000ec 	.word	0x200000ec
 8000788:	200000e4 	.word	0x200000e4
 800078c:	200000e8 	.word	0x200000e8
 8000790:	20000078 	.word	0x20000078

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	@ 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	@ 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fd06 	bl	80051b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b27      	ldr	r3, [pc, #156]	@ (800085c <SystemClock_Config+0xc8>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a26      	ldr	r2, [pc, #152]	@ (800085c <SystemClock_Config+0xc8>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b24      	ldr	r3, [pc, #144]	@ (800085c <SystemClock_Config+0xc8>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <SystemClock_Config+0xcc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a20      	ldr	r2, [pc, #128]	@ (8000860 <SystemClock_Config+0xcc>)
 80007de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000860 <SystemClock_Config+0xcc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	2310      	movs	r3, #16
 80007fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000804:	2308      	movs	r3, #8
 8000806:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000808:	2354      	movs	r3, #84	@ 0x54
 800080a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fd73 	bl	8003304 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000824:	f000 f8c2 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2102      	movs	r1, #2
 8000844:	4618      	mov	r0, r3
 8000846:	f002 ffd5 	bl	80037f4 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000850:	f000 f8ac 	bl	80009ac <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3750      	adds	r7, #80	@ 0x50
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USART1_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <MX_USART1_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USART1_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USART1_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USART1_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USART1_UART_Init+0x4c>)
 800089c:	f003 f98a 	bl	8003bb4 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f881 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000ec 	.word	0x200000ec
 80008b4:	40011000 	.word	0x40011000

080008b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <MX_DMA_Init+0x4c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <MX_DMA_Init+0x4c>)
 80008c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <MX_DMA_Init+0x4c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	203a      	movs	r0, #58	@ 0x3a
 80008e0:	f001 fc51 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008e4:	203a      	movs	r0, #58	@ 0x3a
 80008e6:	f001 fc6a 	bl	80021be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2046      	movs	r0, #70	@ 0x46
 80008f0:	f001 fc49 	bl	8002186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008f4:	2046      	movs	r0, #70	@ 0x46
 80008f6:	f001 fc62 	bl	80021be <HAL_NVIC_EnableIRQ>

}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <MX_GPIO_Init+0x9c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a1f      	ldr	r2, [pc, #124]	@ (80009a4 <MX_GPIO_Init+0x9c>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <MX_GPIO_Init+0x9c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_GPIO_Init+0x9c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a18      	ldr	r2, [pc, #96]	@ (80009a4 <MX_GPIO_Init+0x9c>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_GPIO_Init+0x9c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_GPIO_Init+0x9c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a11      	ldr	r2, [pc, #68]	@ (80009a4 <MX_GPIO_Init+0x9c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_GPIO_Init+0x9c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000978:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <MX_GPIO_Init+0xa0>)
 800097a:	f002 fca9 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800097e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_GPIO_Init+0xa0>)
 8000998:	f002 fb16 	bl	8002fc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020800 	.word	0x40020800

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a4c      	ldr	r2, [pc, #304]	@ (8000b58 <HAL_UART_MspInit+0x150>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	f040 8091 	bne.w	8000b4e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	4b4a      	ldr	r3, [pc, #296]	@ (8000b5c <HAL_UART_MspInit+0x154>)
 8000a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a34:	4a49      	ldr	r2, [pc, #292]	@ (8000b5c <HAL_UART_MspInit+0x154>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3c:	4b47      	ldr	r3, [pc, #284]	@ (8000b5c <HAL_UART_MspInit+0x154>)
 8000a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b43      	ldr	r3, [pc, #268]	@ (8000b5c <HAL_UART_MspInit+0x154>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	4a42      	ldr	r2, [pc, #264]	@ (8000b5c <HAL_UART_MspInit+0x154>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a58:	4b40      	ldr	r3, [pc, #256]	@ (8000b5c <HAL_UART_MspInit+0x154>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a64:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4837      	ldr	r0, [pc, #220]	@ (8000b60 <HAL_UART_MspInit+0x158>)
 8000a82:	f002 faa1 	bl	8002fc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a86:	4b37      	ldr	r3, [pc, #220]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000a88:	4a37      	ldr	r2, [pc, #220]	@ (8000b68 <HAL_UART_MspInit+0x160>)
 8000a8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a8c:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000a8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a92:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a94:	4b33      	ldr	r3, [pc, #204]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9a:	4b32      	ldr	r3, [pc, #200]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa0:	4b30      	ldr	r3, [pc, #192]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000aa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aa6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aae:	4b2d      	ldr	r3, [pc, #180]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aba:	4b2a      	ldr	r3, [pc, #168]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac0:	4b28      	ldr	r3, [pc, #160]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ac6:	4827      	ldr	r0, [pc, #156]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000ac8:	f001 fb94 	bl	80021f4 <HAL_DMA_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000ad2:	f7ff ff6b 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a22      	ldr	r2, [pc, #136]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000ada:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000adc:	4a21      	ldr	r2, [pc, #132]	@ (8000b64 <HAL_UART_MspInit+0x15c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000ae2:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000ae4:	4a22      	ldr	r2, [pc, #136]	@ (8000b70 <HAL_UART_MspInit+0x168>)
 8000ae6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000ae8:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000aea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000aee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000af2:	2240      	movs	r2, #64	@ 0x40
 8000af4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000afe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b10:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b22:	4812      	ldr	r0, [pc, #72]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000b24:	f001 fb66 	bl	80021f4 <HAL_DMA_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000b2e:	f7ff ff3d 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000b36:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b38:	4a0c      	ldr	r2, [pc, #48]	@ (8000b6c <HAL_UART_MspInit+0x164>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2025      	movs	r0, #37	@ 0x25
 8000b44:	f001 fb1f 	bl	8002186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b48:	2025      	movs	r0, #37	@ 0x25
 8000b4a:	f001 fb38 	bl	80021be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	20000164 	.word	0x20000164
 8000b68:	40026440 	.word	0x40026440
 8000b6c:	200001c4 	.word	0x200001c4
 8000b70:	400264b8 	.word	0x400264b8

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f001 f9e1 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <USART1_IRQHandler+0x10>)
 8000bda:	f003 f9e9 	bl	8003fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000ec 	.word	0x200000ec

08000be8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <DMA2_Stream2_IRQHandler+0x10>)
 8000bee:	f001 fc99 	bl	8002524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000164 	.word	0x20000164

08000bfc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <DMA2_Stream7_IRQHandler+0x10>)
 8000c02:	f001 fc8f 	bl	8002524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200001c4 	.word	0x200001c4

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f004 fad0 	bl	80051e4 <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20020000 	.word	0x20020000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	20000224 	.word	0x20000224
 8000c78:	20000798 	.word	0x20000798

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca4:	f7ff ffea 	bl	8000c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f004 fa8f 	bl	80051f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fcdb 	bl	800068c <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ce4:	080052b0 	.word	0x080052b0
  ldr r2, =_sbss
 8000ce8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cec:	20000794 	.word	0x20000794

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>

08000cf2 <EEPROM_Process_Area>:
		*Value = EE_Buffer[0] | (EE_Buffer[1] << 8) | (EE_Buffer[2] << 16)
				| (EE_Buffer[3] << 24);
	}
}

void EEPROM_Process_Area(uint16_t Add, uint8_t *Val, uint16_t Len, bool R_W) {
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	460b      	mov	r3, r1
 8000d04:	81bb      	strh	r3, [r7, #12]
 8000d06:	4613      	mov	r3, r2
 8000d08:	71fb      	strb	r3, [r7, #7]
	if (!R_W) {
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f083 0301 	eor.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d008      	beq.n	8000d28 <EEPROM_Process_Area+0x36>
		//ee_write(Add, Len, Val);
		ee_writeToRam(Add, Len, Val);
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	89b9      	ldrh	r1, [r7, #12]
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 f94b 	bl	8000fb8 <ee_writeToRam>
		ee_commit();
 8000d22:	f000 f96b 	bl	8000ffc <ee_commit>

	} else {
		ee_read(Add, Len, Val);
	}
}
 8000d26:	e005      	b.n	8000d34 <EEPROM_Process_Area+0x42>
		ee_read(Add, Len, Val);
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	89b9      	ldrh	r1, [r7, #12]
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f840 	bl	8000db4 <ee_read>
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <ee_format>:
  return true;
#endif
}
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 8000d46:	f001 feab 	bl	8002aa0 <HAL_FLASH_Unlock>
#if _EE_PAGE_OR_SECTOR == PAGE
	flashErase.NbPages = 1;
  flashErase.PageAddress = _EE_ADDR_INUSE;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#elif _EE_PAGE_OR_SECTOR == SECTOR
  flashErase.NbSectors = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  flashErase.Sector =  _EE_USE_FLASH_PAGE_OR_SECTOR;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	613b      	str	r3, [r7, #16]
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  flashErase.NbPages = 1;
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 8000d56:	2301      	movs	r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8000d5e:	f107 021c 	add.w	r2, r7, #28
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 f80b 	bl	8002d84 <HAL_FLASHEx_Erase>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d115      	bne.n	8000da0 <ee_format+0x64>
  {
    HAL_FLASH_Lock();
 8000d74:	f001 feb6 	bl	8002ae4 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7e:	d001      	beq.n	8000d84 <ee_format+0x48>
    {
#if _EE_ICACHE_CTRL == 1
    HAL_ICACHE_Enable();
#endif
    	return false;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e010      	b.n	8000da6 <ee_format+0x6a>
    }
    else
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <ee_format+0x60>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8000d90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d94:	21ff      	movs	r1, #255	@ 0xff
 8000d96:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <ee_format+0x74>)
 8000d98:	f004 fa0c 	bl	80051b4 <memset>
#endif
#if _EE_ICACHE_CTRL == 1
      HAL_ICACHE_Enable();
#endif
      return true;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e002      	b.n	8000da6 <ee_format+0x6a>
    }
  }
  HAL_FLASH_Lock();
 8000da0:	f001 fea0 	bl	8002ae4 <HAL_FLASH_Lock>
#if _EE_ICACHE_CTRL == 1
  HAL_ICACHE_Enable();
#endif
  return false;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000228 	.word	0x20000228

08000db4 <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000dca:	d901      	bls.n	8000dd0 <ee_read+0x1c>
    return false;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e02b      	b.n	8000e28 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e021      	b.n	8000e1a <ee_read+0x66>
  {
    if (data != NULL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00b      	beq.n	8000df4 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000de2:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	701a      	strb	r2, [r3, #0]
      data++;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3301      	adds	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dfa:	d20b      	bcs.n	8000e14 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000e02:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2d9      	uxtb	r1, r3
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <ee_read+0x80>)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	4413      	add	r3, r2
 8000e10:	460a      	mov	r2, r1
 8000e12:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d3d7      	bcc.n	8000dd6 <ee_read+0x22>
#endif
  }
  return true;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20000228 	.word	0x20000228

08000e38 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8000e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e3c:	b08a      	sub	sp, #40	@ 0x28
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000e50:	d901      	bls.n	8000e56 <ee_write+0x1e>
    return false;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e0ab      	b.n	8000fae <ee_write+0x176>
  if (data == NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <ee_write+0x28>
    return false;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e0a6      	b.n	8000fae <ee_write+0x176>
  HAL_FLASH_Unlock();
 8000e60:	f001 fe1e 	bl	8002aa0 <HAL_FLASH_Unlock>
#if _EE_ICACHE_CTRL == 1
  HAL_ICACHE_Disable();
#endif
#ifdef FLASH_TYPEPROGRAM_BYTE
  for (uint32_t i = 0; i < len ; i++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e68:	e01d      	b.n	8000ea6 <ee_write+0x6e>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 8000e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000e74:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2200      	movs	r2, #0
 8000e84:	469a      	mov	sl, r3
 8000e86:	4693      	mov	fp, r2
 8000e88:	4652      	mov	r2, sl
 8000e8a:	465b      	mov	r3, fp
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f001 fdb3 	bl	80029f8 <HAL_FLASH_Program>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <ee_write+0x68>
    {
      HAL_FLASH_Lock();
 8000e98:	f001 fe24 	bl	8002ae4 <HAL_FLASH_Lock>
#if _EE_ICACHE_CTRL == 1
      HAL_ICACHE_Enable();
#endif
      return false;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	e086      	b.n	8000fae <ee_write+0x176>
  for (uint32_t i = 0; i < len ; i++)
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3dd      	bcc.n	8000e6a <ee_write+0x32>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_HALFWORD
  for (uint32_t i = 0; i < len ; i+=2)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
 8000eb2:	e024      	b.n	8000efe <ee_write+0xc6>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 8000eb4:	6a3a      	ldr	r2, [r7, #32]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000ebe:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	4303      	orrs	r3, r0
 8000eda:	17da      	asrs	r2, r3, #31
 8000edc:	4698      	mov	r8, r3
 8000ede:	4691      	mov	r9, r2
 8000ee0:	4642      	mov	r2, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f001 fd87 	bl	80029f8 <HAL_FLASH_Program>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <ee_write+0xc0>
    {
      HAL_FLASH_Lock();
 8000ef0:	f001 fdf8 	bl	8002ae4 <HAL_FLASH_Lock>
#if _EE_ICACHE_CTRL == 1
      HAL_ICACHE_Enable();
#endif
      return false;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e05a      	b.n	8000fae <ee_write+0x176>
  for (uint32_t i = 0; i < len ; i+=2)
 8000ef8:	6a3b      	ldr	r3, [r7, #32]
 8000efa:	3302      	adds	r3, #2
 8000efc:	623b      	str	r3, [r7, #32]
 8000efe:	6a3a      	ldr	r2, [r7, #32]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3d6      	bcc.n	8000eb4 <ee_write+0x7c>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e049      	b.n	8000fa0 <ee_write+0x168>
  {
  	uint8_t DoubleWord[8] =
		{
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],\
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000f14:	753b      	strb	r3, [r7, #20]
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],\
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000f20:	757b      	strb	r3, [r7, #21]
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],\
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3302      	adds	r3, #2
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000f2c:	75bb      	strb	r3, [r7, #22]
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],\
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3303      	adds	r3, #3
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000f38:	75fb      	strb	r3, [r7, #23]
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],\
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000f44:	763b      	strb	r3, [r7, #24]
			data[i + 5], data[i + 6], data[i + 7]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3305      	adds	r3, #5
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000f50:	767b      	strb	r3, [r7, #25]
			data[i + 5], data[i + 6], data[i + 7]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3306      	adds	r3, #6
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000f5c:	76bb      	strb	r3, [r7, #26]
			data[i + 5], data[i + 6], data[i + 7]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3307      	adds	r3, #7
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000f68:	76fb      	strb	r3, [r7, #27]
		};
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint32_t)DoubleWord) != HAL_OK)
 8000f6a:	69fa      	ldr	r2, [r7, #28]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000f74:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	461c      	mov	r4, r3
 8000f80:	4615      	mov	r5, r2
 8000f82:	4622      	mov	r2, r4
 8000f84:	462b      	mov	r3, r5
 8000f86:	2003      	movs	r0, #3
 8000f88:	f001 fd36 	bl	80029f8 <HAL_FLASH_Program>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <ee_write+0x162>
    {
      HAL_FLASH_Lock();
 8000f92:	f001 fda7 	bl	8002ae4 <HAL_FLASH_Lock>
#if _EE_ICACHE_CTRL == 1
      HAL_ICACHE_Enable();
#endif
      return false;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e009      	b.n	8000fae <ee_write+0x176>
  for (uint32_t i = 0; i < len; i += 8)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3308      	adds	r3, #8
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3b1      	bcc.n	8000f0c <ee_write+0xd4>
#endif
      return false;
    }
  }
#endif
  HAL_FLASH_Lock();
 8000fa8:	f001 fd9c 	bl	8002ae4 <HAL_FLASH_Lock>
#if _EE_ICACHE_CTRL == 1
  HAL_ICACHE_Enable();
#endif
  return true;
 8000fac:	2301      	movs	r3, #1
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3728      	adds	r7, #40	@ 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000fb8 <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	4413      	add	r3, r2
 8000fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fce:	d901      	bls.n	8000fd4 <ee_writeToRam+0x1c>
    return false;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e00d      	b.n	8000ff0 <ee_writeToRam+0x38>
  if (data == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <ee_writeToRam+0x26>
    return false;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e008      	b.n	8000ff0 <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <ee_writeToRam+0x40>)
 8000fe2:	4413      	add	r3, r2
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 f927 	bl	800523c <memcpy>
  return true;
 8000fee:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000228 	.word	0x20000228

08000ffc <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff fe9b 	bl	8000d3c <ee_format>
 8001006:	4603      	mov	r3, r0
 8001008:	f083 0301 	eor.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <ee_commit+0x1a>
    return false;
 8001012:	2300      	movs	r3, #0
 8001014:	e006      	b.n	8001024 <ee_commit+0x28>
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 8001016:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <ee_commit+0x2c>)
 8001018:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff ff0b 	bl	8000e38 <ee_write>
 8001022:	4603      	mov	r3, r0
#else
  return false;
#endif
}
 8001024:	4618      	mov	r0, r3
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000228 	.word	0x20000228

0800102c <crc16>:
	return (crc_hi | crc_lo << 8);
}

#else
uint16_t crc16(uint8_t *data, uint16_t length)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8001038:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800103c:	81fb      	strh	r3, [r7, #14]

	for (uint16_t i = 0; i < length; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	81bb      	strh	r3, [r7, #12]
 8001042:	e026      	b.n	8001092 <crc16+0x66>
	{
		crc ^= data[i];
 8001044:	89bb      	ldrh	r3, [r7, #12]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	4053      	eors	r3, r2
 8001052:	81fb      	strh	r3, [r7, #14]

		for (uint8_t j = 0; j < 8; j++)
 8001054:	2300      	movs	r3, #0
 8001056:	72fb      	strb	r3, [r7, #11]
 8001058:	e015      	b.n	8001086 <crc16+0x5a>
		{
			if (crc & 0x0001)
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <crc16+0x4e>
			{
				crc >>= 1;
 8001064:	89fb      	ldrh	r3, [r7, #14]
 8001066:	085b      	lsrs	r3, r3, #1
 8001068:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8001070:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001074:	43db      	mvns	r3, r3
 8001076:	81fb      	strh	r3, [r7, #14]
 8001078:	e002      	b.n	8001080 <crc16+0x54>
			}
			else
			{
				crc >>= 1;
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	085b      	lsrs	r3, r3, #1
 800107e:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++)
 8001080:	7afb      	ldrb	r3, [r7, #11]
 8001082:	3301      	adds	r3, #1
 8001084:	72fb      	strb	r3, [r7, #11]
 8001086:	7afb      	ldrb	r3, [r7, #11]
 8001088:	2b07      	cmp	r3, #7
 800108a:	d9e6      	bls.n	800105a <crc16+0x2e>
	for (uint16_t i = 0; i < length; i++)
 800108c:	89bb      	ldrh	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	81bb      	strh	r3, [r7, #12]
 8001092:	89ba      	ldrh	r2, [r7, #12]
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	429a      	cmp	r2, r3
 8001098:	d3d4      	bcc.n	8001044 <crc16+0x18>
			}
		}
	}
	return (crc >> 8) | (crc << 8);
 800109a:	89fb      	ldrh	r3, [r7, #14]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	b29b      	uxth	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <MB_Parse_Coils>:
bool MB_Parse_Bit(uint8_t *data, uint16_t Address)
{
	return (data[Address / 8] & BitMasks[Address % 8]) ? 1 : 0;
}
void MB_Parse_Coils(uint8_t *data, uint16_t Offset, uint8_t *Output, uint16_t Length)
{
 80010bc:	b490      	push	{r4, r7}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	461a      	mov	r2, r3
 80010c8:	460b      	mov	r3, r1
 80010ca:	817b      	strh	r3, [r7, #10]
 80010cc:	4613      	mov	r3, r2
 80010ce:	813b      	strh	r3, [r7, #8]
	for (uint8_t x = 0; x < Length; x++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	75fb      	strb	r3, [r7, #23]
 80010d4:	e03f      	b.n	8001156 <MB_Parse_Coils+0x9a>
	{
		uint16_t idx = Offset + x;
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	897b      	ldrh	r3, [r7, #10]
 80010dc:	4413      	add	r3, r2
 80010de:	82bb      	strh	r3, [r7, #20]
		//erase the designated area
		Output[idx / 8] &= NbitMasks[idx % 8];
 80010e0:	8abb      	ldrh	r3, [r7, #20]
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	b298      	uxth	r0, r3
 80010e6:	4602      	mov	r2, r0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	7819      	ldrb	r1, [r3, #0]
 80010ee:	8abb      	ldrh	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	4a1d      	ldr	r2, [pc, #116]	@ (800116c <MB_Parse_Coils+0xb0>)
 80010f6:	5cd2      	ldrb	r2, [r2, r3]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4403      	add	r3, r0
 80010fc:	400a      	ands	r2, r1
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]
		//write the designated area
		Output[idx / 8] |= (data[x / 8] & BitMasks[x % 8]) ? BitMasks[idx % 8] : 0;
 8001102:	8abb      	ldrh	r3, [r7, #20]
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	b29c      	uxth	r4, r3
 8001108:	4622      	mov	r2, r4
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25a      	sxtb	r2, r3
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	440b      	add	r3, r1
 800111e:	7819      	ldrb	r1, [r3, #0]
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	4812      	ldr	r0, [pc, #72]	@ (8001170 <MB_Parse_Coils+0xb4>)
 8001128:	5cc3      	ldrb	r3, [r0, r3]
 800112a:	400b      	ands	r3, r1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <MB_Parse_Coils+0x84>
 8001132:	8abb      	ldrh	r3, [r7, #20]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	490d      	ldr	r1, [pc, #52]	@ (8001170 <MB_Parse_Coils+0xb4>)
 800113a:	5ccb      	ldrb	r3, [r1, r3]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	e000      	b.n	8001142 <MB_Parse_Coils+0x86>
 8001140:	2300      	movs	r3, #0
 8001142:	4313      	orrs	r3, r2
 8001144:	b25a      	sxtb	r2, r3
 8001146:	4621      	mov	r1, r4
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	440b      	add	r3, r1
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
	for (uint8_t x = 0; x < Length; x++)
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	3301      	adds	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	b29b      	uxth	r3, r3
 800115a:	893a      	ldrh	r2, [r7, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8ba      	bhi.n	80010d6 <MB_Parse_Coils+0x1a>
	}
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc90      	pop	{r4, r7}
 800116a:	4770      	bx	lr
 800116c:	08005290 	.word	0x08005290
 8001170:	08005288 	.word	0x08005288

08001174 <MB_Parse_UInt16>:
{
	*Output = data[(*offset)];
	*offset += 1;
}
void MB_Parse_UInt16(uint8_t *data, uint16_t *offset, uint16_t *Output)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
	*Output = data[(*offset)] << 8 | (uint16_t) data[(*offset) + 1];
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	68f9      	ldr	r1, [r7, #12]
 8001198:	440b      	add	r3, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	801a      	strh	r2, [r3, #0]
	*offset += 2;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	3302      	adds	r3, #2
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	801a      	strh	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <MB_Encode_Coils>:
	{
		data[Address / 8] &= NbitMasks[Address % 8];
	}
}
void MB_Encode_Coils(uint8_t *data, uint16_t Offset, uint8_t *Output, uint16_t Length)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	817b      	strh	r3, [r7, #10]
 80011d0:	4613      	mov	r3, r2
 80011d2:	813b      	strh	r3, [r7, #8]

	//erase the buffer area
	memset(Output, 0, (Length / 8) + ((Length % 8) ? 1 : 0));
 80011d4:	893b      	ldrh	r3, [r7, #8]
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	b29b      	uxth	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	893b      	ldrh	r3, [r7, #8]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f003 ffdd 	bl	80051b4 <memset>

	for (uint8_t x = 0; x < Length; x++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	75fb      	strb	r3, [r7, #23]
 80011fe:	e02e      	b.n	800125e <MB_Encode_Coils+0x9e>
	{
		uint16_t idx = Offset + x;
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	b29a      	uxth	r2, r3
 8001204:	897b      	ldrh	r3, [r7, #10]
 8001206:	4413      	add	r3, r2
 8001208:	82bb      	strh	r3, [r7, #20]
		//write the designated area
		Output[x / 8] |= (data[idx / 8] & BitMasks[idx % 8]) ? BitMasks[x % 8] : 0;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	b2dc      	uxtb	r4, r3
 8001210:	4622      	mov	r2, r4
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b25a      	sxtb	r2, r3
 800121a:	8abb      	ldrh	r3, [r7, #20]
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	b29b      	uxth	r3, r3
 8001220:	4619      	mov	r1, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	440b      	add	r3, r1
 8001226:	7819      	ldrb	r1, [r3, #0]
 8001228:	8abb      	ldrh	r3, [r7, #20]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	4811      	ldr	r0, [pc, #68]	@ (8001274 <MB_Encode_Coils+0xb4>)
 8001230:	5cc3      	ldrb	r3, [r0, r3]
 8001232:	400b      	ands	r3, r1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <MB_Encode_Coils+0x88>
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	490c      	ldr	r1, [pc, #48]	@ (8001274 <MB_Encode_Coils+0xb4>)
 8001242:	5ccb      	ldrb	r3, [r1, r3]
 8001244:	b25b      	sxtb	r3, r3
 8001246:	e000      	b.n	800124a <MB_Encode_Coils+0x8a>
 8001248:	2300      	movs	r3, #0
 800124a:	4313      	orrs	r3, r2
 800124c:	b25a      	sxtb	r2, r3
 800124e:	4621      	mov	r1, r4
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	440b      	add	r3, r1
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]
	for (uint8_t x = 0; x < Length; x++)
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	3301      	adds	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	b29b      	uxth	r3, r3
 8001262:	893a      	ldrh	r2, [r7, #8]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8cb      	bhi.n	8001200 <MB_Encode_Coils+0x40>
	}
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	bf00      	nop
 8001274:	08005288 	.word	0x08005288

08001278 <MB_Encode_UInt16>:
void MB_Encode_Int8(uint8_t *data, int8_t Input, uint16_t *Offset)
{
	data[(*Offset)++] = (uint8_t) (Input);
}
void MB_Encode_UInt16(uint8_t *data, uint16_t Input, uint16_t *Offset)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	460b      	mov	r3, r1
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	817b      	strh	r3, [r7, #10]
	data[(*Offset)++] = (uint8_t) (Input >> 8);
 8001286:	897b      	ldrh	r3, [r7, #10]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	b299      	uxth	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	b290      	uxth	r0, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	8010      	strh	r0, [r2, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
	data[(*Offset)++] = (uint8_t) (Input);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	b291      	uxth	r1, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	8011      	strh	r1, [r2, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	897a      	ldrh	r2, [r7, #10]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <MB_Slave_Init>:
void MB_Slave_ProcessMessage(MB_Slave_t *MB);

// Initialize the modbus
// IPs: Modbus instance with all parameters
MB_Status_t MB_Slave_Init(MB_Slave_t *MB)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	MB->IsInitialized = 0;
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 80012d4:	f36f 0341 	bfc	r3, #1, #1
 80012d8:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48

	// allocate the TX and RX Buffers
	MB->TxBuffer = malloc(MB->TX_RX_Buffer_Size);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	899b      	ldrh	r3, [r3, #12]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 feb1 	bl	8005048 <malloc>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	605a      	str	r2, [r3, #4]
	MB->RxBuffer = malloc(MB->TX_RX_Buffer_Size);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	899b      	ldrh	r3, [r3, #12]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fea8 	bl	8005048 <malloc>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	609a      	str	r2, [r3, #8]

	// allocate the MODBUS memory area to be accessed by the master
	MB->HoldingRegs = malloc(MB->HoldingRegSize * sizeof(uint16_t));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	8a1b      	ldrh	r3, [r3, #16]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f003 fe9e 	bl	8005048 <malloc>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	615a      	str	r2, [r3, #20]
	MB->InputRegs = malloc(MB->InputRegSize * sizeof(uint16_t));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	8b5b      	ldrh	r3, [r3, #26]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4618      	mov	r0, r3
 800131c:	f003 fe94 	bl	8005048 <malloc>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	61da      	str	r2, [r3, #28]

	memset(MB->HoldingRegs, 0, MB->HoldingRegSize * sizeof(uint16_t));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6958      	ldr	r0, [r3, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	8a1b      	ldrh	r3, [r3, #16]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	461a      	mov	r2, r3
 8001334:	2100      	movs	r1, #0
 8001336:	f003 ff3d 	bl	80051b4 <memset>
	memset(MB->InputRegs, 0, MB->InputRegSize * sizeof(uint16_t));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69d8      	ldr	r0, [r3, #28]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	8b5b      	ldrh	r3, [r3, #26]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	461a      	mov	r2, r3
 8001346:	2100      	movs	r1, #0
 8001348:	f003 ff34 	bl	80051b4 <memset>

	MB->InputBits = malloc(sizeof(MB->InputBitsSize));
 800134c:	2002      	movs	r0, #2
 800134e:	f003 fe7b 	bl	8005048 <malloc>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
	MB->CoilBits = malloc(sizeof(MB->CoilBitsSize));
 800135a:	2002      	movs	r0, #2
 800135c:	f003 fe74 	bl	8005048 <malloc>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c

	memset(MB->CoilBits, 0, MB->CoilBitsSize * sizeof(uint8_t));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001370:	461a      	mov	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	f003 ff1e 	bl	80051b4 <memset>
	memset(MB->InputBits, 0, MB->InputBitsSize * sizeof(uint8_t));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001380:	461a      	mov	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	f003 ff16 	bl	80051b4 <memset>

	if (MB->SLA == 0)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <MB_Slave_Init+0xce>
	{
		return MB_INIT_ERR_INVALID_SLA;
 8001390:	2303      	movs	r3, #3
 8001392:	e03d      	b.n	8001410 <MB_Slave_Init+0x14a>
	}

	// check the buffers
	if (!MB->TxBuffer || !MB->RxBuffer || !MB->HoldingRegs || !MB->InputRegs || !MB->CoilBits || !MB->InputBits)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <MB_Slave_Init+0xfe>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00f      	beq.n	80013c4 <MB_Slave_Init+0xfe>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <MB_Slave_Init+0xfe>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <MB_Slave_Init+0xfe>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <MB_Slave_Init+0xfe>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <MB_Slave_Init+0x102>
	{
		return MB_INIT_ERR_MEM_ALLOC;
 80013c4:	2304      	movs	r3, #4
 80013c6:	e023      	b.n	8001410 <MB_Slave_Init+0x14a>
	}

	// check the function pointers to be called by the MB library
	else if (!MB->hw_interface.MB_Activate_TX || !MB->hw_interface.MB_StartListening || !MB->hw_interface.MB_Transmit || !MB->hw_interface.MB_Request_Recieved)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <MB_Slave_Init+0x122>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <MB_Slave_Init+0x122>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <MB_Slave_Init+0x122>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <MB_Slave_Init+0x126>
	{
		return MB_INIT_ERR_FN_PTR;
 80013e8:	2305      	movs	r3, #5
 80013ea:	e011      	b.n	8001410 <MB_Slave_Init+0x14a>
	}

	MB->IsInitialized = 1;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
	MB->Seq = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	MB->MB_Stat = MB_INIT_OK;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	return MB->MB_Stat;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <MB_Slave_Routine>:

// to be called periodicaly to check for incoming messages
void MB_Slave_Routine(MB_Slave_t *MB, uint32_t Ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	if (!MB->IsInitialized)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8316 	beq.w	8001a60 <MB_Slave_Routine+0x648>
	{
		return;
	}
	switch (MB->Seq)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800143a:	2b28      	cmp	r3, #40	@ 0x28
 800143c:	f200 830b 	bhi.w	8001a56 <MB_Slave_Routine+0x63e>
 8001440:	a201      	add	r2, pc, #4	@ (adr r2, 8001448 <MB_Slave_Routine+0x30>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	080014ed 	.word	0x080014ed
 800144c:	08001a57 	.word	0x08001a57
 8001450:	08001a57 	.word	0x08001a57
 8001454:	08001a57 	.word	0x08001a57
 8001458:	08001a57 	.word	0x08001a57
 800145c:	08001513 	.word	0x08001513
 8001460:	08001a57 	.word	0x08001a57
 8001464:	08001a57 	.word	0x08001a57
 8001468:	08001a57 	.word	0x08001a57
 800146c:	08001a57 	.word	0x08001a57
 8001470:	08001535 	.word	0x08001535
 8001474:	08001a57 	.word	0x08001a57
 8001478:	08001a57 	.word	0x08001a57
 800147c:	08001a57 	.word	0x08001a57
 8001480:	08001a57 	.word	0x08001a57
 8001484:	08001a57 	.word	0x08001a57
 8001488:	08001a57 	.word	0x08001a57
 800148c:	08001a57 	.word	0x08001a57
 8001490:	08001a57 	.word	0x08001a57
 8001494:	08001a57 	.word	0x08001a57
 8001498:	0800192f 	.word	0x0800192f
 800149c:	08001a57 	.word	0x08001a57
 80014a0:	08001a57 	.word	0x08001a57
 80014a4:	08001a57 	.word	0x08001a57
 80014a8:	08001a57 	.word	0x08001a57
 80014ac:	08001a57 	.word	0x08001a57
 80014b0:	08001a57 	.word	0x08001a57
 80014b4:	08001a57 	.word	0x08001a57
 80014b8:	08001a57 	.word	0x08001a57
 80014bc:	08001a57 	.word	0x08001a57
 80014c0:	080019cb 	.word	0x080019cb
 80014c4:	08001a57 	.word	0x08001a57
 80014c8:	08001a57 	.word	0x08001a57
 80014cc:	08001a57 	.word	0x08001a57
 80014d0:	08001a57 	.word	0x08001a57
 80014d4:	08001a57 	.word	0x08001a57
 80014d8:	08001a57 	.word	0x08001a57
 80014dc:	08001a57 	.word	0x08001a57
 80014e0:	08001a57 	.word	0x08001a57
 80014e4:	08001a57 	.word	0x08001a57
 80014e8:	08001a25 	.word	0x08001a25
	{
		// start the receiving sequence
		case 0:
			MB->TX_MSG_LEN = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			MB->RX_LEN = 0;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	865a      	strh	r2, [r3, #50]	@ 0x32
			MB->hw_interface.MB_Activate_TX(0);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	2000      	movs	r0, #0
 8001500:	4798      	blx	r3
			MB->hw_interface.MB_StartListening();
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001506:	4798      	blx	r3
			MB->Seq = 5;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2205      	movs	r2, #5
 800150c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 8001510:	e2b1      	b.n	8001a76 <MB_Slave_Routine+0x65e>

			// start of the potential frame
		case 5:
			if (MB->RX_LEN > 0)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 82a4 	beq.w	8001a64 <MB_Slave_Routine+0x64c>
			{
				MB->Ticks = Ticks + MB->RX_Timeout;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001520:	461a      	mov	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	441a      	add	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	64da      	str	r2, [r3, #76]	@ 0x4c
				MB->Seq = 10;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	220a      	movs	r2, #10
 800152e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			break;
 8001532:	e297      	b.n	8001a64 <MB_Slave_Routine+0x64c>
			// waiting for the first 6 bytes in the message
			// SLA, FCN, reg address, and num of registers
		case 10:
			// check for timeout
			if (Ticks > MB->Ticks)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d907      	bls.n	800154e <MB_Slave_Routine+0x136>
			{
				MB->RX_LEN = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	865a      	strh	r2, [r3, #50]	@ 0x32
				MB->Seq = 5;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2205      	movs	r2, #5
 8001548:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
				{
					// jump to the next step
					MB->Seq = 20;
				}
			}
			break;
 800154c:	e28c      	b.n	8001a68 <MB_Slave_Routine+0x650>
			else if ((MB->RX_LEN > 6 && (MB->RxBuffer[1] != MB_PRST_READ_MUL_REGS)) || (MB->RX_LEN > 10 && (MB->RxBuffer[1] == MB_PRST_READ_MUL_REGS)))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001552:	2b06      	cmp	r3, #6
 8001554:	d905      	bls.n	8001562 <MB_Slave_Routine+0x14a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	3301      	adds	r3, #1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b17      	cmp	r3, #23
 8001560:	d10b      	bne.n	800157a <MB_Slave_Routine+0x162>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001566:	2b0a      	cmp	r3, #10
 8001568:	f240 827e 	bls.w	8001a68 <MB_Slave_Routine+0x650>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	3301      	adds	r3, #1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b17      	cmp	r3, #23
 8001576:	f040 8277 	bne.w	8001a68 <MB_Slave_Routine+0x650>
				MB->RX_SLA = MB->RxBuffer[0];
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
				MB->Fcn = MB->RxBuffer[1];
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	3301      	adds	r3, #1
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
				MB->Reg_Address = (MB->RxBuffer[2] << 8) | MB->RxBuffer[3];
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	3302      	adds	r3, #2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b21a      	sxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	3303      	adds	r3, #3
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
				MB->NumOfRegisters = (MB->RxBuffer[4] << 8) | MB->RxBuffer[5];
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	3304      	adds	r3, #4
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	3305      	adds	r3, #5
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
				switch (MB->Fcn)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80015de:	3b01      	subs	r3, #1
 80015e0:	2b16      	cmp	r3, #22
 80015e2:	f200 8163 	bhi.w	80018ac <MB_Slave_Routine+0x494>
 80015e6:	a201      	add	r2, pc, #4	@ (adr r2, 80015ec <MB_Slave_Routine+0x1d4>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	08001649 	.word	0x08001649
 80015f0:	08001649 	.word	0x08001649
 80015f4:	080016c7 	.word	0x080016c7
 80015f8:	080016c7 	.word	0x080016c7
 80015fc:	08001723 	.word	0x08001723
 8001600:	08001723 	.word	0x08001723
 8001604:	080018ad 	.word	0x080018ad
 8001608:	080018ad 	.word	0x080018ad
 800160c:	080018ad 	.word	0x080018ad
 8001610:	080018ad 	.word	0x080018ad
 8001614:	080018ad 	.word	0x080018ad
 8001618:	080018ad 	.word	0x080018ad
 800161c:	080018ad 	.word	0x080018ad
 8001620:	080018ad 	.word	0x080018ad
 8001624:	0800177f 	.word	0x0800177f
 8001628:	080017d9 	.word	0x080017d9
 800162c:	080018ad 	.word	0x080018ad
 8001630:	080018ad 	.word	0x080018ad
 8001634:	080018ad 	.word	0x080018ad
 8001638:	080018ad 	.word	0x080018ad
 800163c:	080018ad 	.word	0x080018ad
 8001640:	080018ad 	.word	0x080018ad
 8001644:	08001815 	.word	0x08001815
						MB->RX_MSG_LEN = 8;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2208      	movs	r2, #8
 800164c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 5 + (MB->NumOfRegisters / 8) + (MB->NumOfRegisters % 8 ? 1 : 0);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	b29b      	uxth	r3, r3
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	f8b2 205a 	ldrh.w	r2, [r2, #90]	@ 0x5a
 8001660:	f002 0207 	and.w	r2, r2, #7
 8001664:	b292      	uxth	r2, r2
 8001666:	2a00      	cmp	r2, #0
 8001668:	bf14      	ite	ne
 800166a:	2201      	movne	r2, #1
 800166c:	2200      	moveq	r2, #0
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	4413      	add	r3, r2
 8001672:	b29b      	uxth	r3, r3
 8001674:	3305      	adds	r3, #5
 8001676:	b29a      	uxth	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->Fcn == MB_READ_COIL ? MB->CoilBitsStart : MB->InputBitsStart;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001684:	2b01      	cmp	r3, #1
 8001686:	d102      	bne.n	800168e <MB_Slave_Routine+0x276>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168c:	e001      	b.n	8001692 <MB_Slave_Routine+0x27a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	8c1b      	ldrh	r3, [r3, #32]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	f8a2 3062 	strh.w	r3, [r2, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->Fcn == MB_READ_COIL ? MB->CoilBitsSize * 8 : MB->InputBitsSize * 8);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d104      	bne.n	80016b2 <MB_Slave_Routine+0x29a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	e003      	b.n	80016ba <MB_Slave_Routine+0x2a2>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	b29a      	uxth	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 80016c4:	e0f2      	b.n	80018ac <MB_Slave_Routine+0x494>
						MB->RX_MSG_LEN = 8;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2208      	movs	r2, #8
 80016ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 5 + (MB->NumOfRegisters * 2);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3305      	adds	r3, #5
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->Fcn == MB_READ_MUL_HLD_REG ? MB->HoldingRegStart : MB->InputRegsStart;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d102      	bne.n	80016f2 <MB_Slave_Routine+0x2da>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	89db      	ldrh	r3, [r3, #14]
 80016f0:	e001      	b.n	80016f6 <MB_Slave_Routine+0x2de>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	8b1b      	ldrh	r3, [r3, #24]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	f8a2 3062 	strh.w	r3, [r2, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->Fcn == MB_READ_MUL_HLD_REG ? MB->HoldingRegSize : MB->InputRegSize);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001708:	2b03      	cmp	r3, #3
 800170a:	d102      	bne.n	8001712 <MB_Slave_Routine+0x2fa>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8a1b      	ldrh	r3, [r3, #16]
 8001710:	e001      	b.n	8001716 <MB_Slave_Routine+0x2fe>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	8b5b      	ldrh	r3, [r3, #26]
 8001716:	4413      	add	r3, r2
 8001718:	b29a      	uxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 8001720:	e0c4      	b.n	80018ac <MB_Slave_Routine+0x494>
						MB->NumOfRegisters = 1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
						MB->RX_MSG_LEN = 8;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2208      	movs	r2, #8
 800172e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 8;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2208      	movs	r2, #8
 8001736:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->Fcn == MB_FRC_SNG_COIL ? MB->CoilBitsStart : MB->HoldingRegStart;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001740:	2b05      	cmp	r3, #5
 8001742:	d102      	bne.n	800174a <MB_Slave_Routine+0x332>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001748:	e001      	b.n	800174e <MB_Slave_Routine+0x336>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	89db      	ldrh	r3, [r3, #14]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	f8a2 3062 	strh.w	r3, [r2, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->Fcn == MB_FRC_SNG_COIL ? MB->CoilBitsSize * 8 : MB->HoldingRegSize);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001760:	2b05      	cmp	r3, #5
 8001762:	d104      	bne.n	800176e <MB_Slave_Routine+0x356>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	b29b      	uxth	r3, r3
 800176c:	e001      	b.n	8001772 <MB_Slave_Routine+0x35a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	8a1b      	ldrh	r3, [r3, #16]
 8001772:	4413      	add	r3, r2
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 800177c:	e096      	b.n	80018ac <MB_Slave_Routine+0x494>
						MB->RX_MSG_LEN = 9 + (MB->NumOfRegisters / 8) + (MB->NumOfRegisters % 8 ? 1 : 0);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	b29b      	uxth	r3, r3
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	f8b2 205a 	ldrh.w	r2, [r2, #90]	@ 0x5a
 800178e:	f002 0207 	and.w	r2, r2, #7
 8001792:	b292      	uxth	r2, r2
 8001794:	2a00      	cmp	r2, #0
 8001796:	bf14      	ite	ne
 8001798:	2201      	movne	r2, #1
 800179a:	2200      	moveq	r2, #0
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	4413      	add	r3, r2
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3309      	adds	r3, #9
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 8;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2208      	movs	r2, #8
 80017b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->CoilBitsStart;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->CoilBitsSize * 8);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 80017d6:	e069      	b.n	80018ac <MB_Slave_Routine+0x494>
						MB->RX_MSG_LEN = 9 + (MB->NumOfRegisters * 2);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3309      	adds	r3, #9
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 8;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2208      	movs	r2, #8
 80017f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->HoldingRegStart;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	89da      	ldrh	r2, [r3, #14]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->HoldingRegSize);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	8a1b      	ldrh	r3, [r3, #16]
 8001808:	4413      	add	r3, r2
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 8001812:	e04b      	b.n	80018ac <MB_Slave_Routine+0x494>
						MB->Reg_Address_W = (MB->RxBuffer[6] << 8) | MB->RxBuffer[7];
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	3306      	adds	r3, #6
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b21a      	sxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	3307      	adds	r3, #7
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b21b      	sxth	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b21b      	sxth	r3, r3
 800182e:	b29a      	uxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
						MB->NumOfW_Regs = (MB->RxBuffer[8] << 8) | MB->RxBuffer[9];
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	3308      	adds	r3, #8
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b21a      	sxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	3309      	adds	r3, #9
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b21b      	sxth	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b21b      	sxth	r3, r3
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
						MB->ByteCount = MB->RxBuffer[10];
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	7a9a      	ldrb	r2, [r3, #10]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
						MB->RX_MSG_LEN = 13 + (2 * MB->NumOfW_Regs);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	b29b      	uxth	r3, r3
 800186e:	330d      	adds	r3, #13
 8001870:	b29a      	uxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 5 + (2 * MB->NumOfRegisters);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	b29b      	uxth	r3, r3
 8001882:	3305      	adds	r3, #5
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->HoldingRegStart;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	89da      	ldrh	r2, [r3, #14]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->HoldingRegSize);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	8a1b      	ldrh	r3, [r3, #16]
 80018a0:	4413      	add	r3, r2
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 80018aa:	bf00      	nop
				if (MB->RX_LEN >= MB->RX_MSG_LEN)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d334      	bcc.n	8001924 <MB_Slave_Routine+0x50c>
					MB->MB_Stat = MB_STAT_OK;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
					MB_Slave_ProcessMessage(MB);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f914 	bl	8001af0 <MB_Slave_ProcessMessage>
					if (MB->RX_Silent_Interval_MS == 0)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11d      	bne.n	800190c <MB_Slave_Routine+0x4f4>
						MB->hw_interface.MB_Activate_TX(1); // activate transmitter
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	2001      	movs	r0, #1
 80018d6:	4798      	blx	r3
						MB->hw_interface.MB_Transmit(MB->TxBuffer, MB->TX_MSG_LEN);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6850      	ldr	r0, [r2, #4]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80018e6:	4611      	mov	r1, r2
 80018e8:	4798      	blx	r3
						if (MB->TX_Automplete)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <MB_Slave_Routine+0x4ea>
							MB->hw_interface.MB_Activate_TX(0);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	2000      	movs	r0, #0
 8001900:	4798      	blx	r3
						MB->Seq = 40;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2228      	movs	r2, #40	@ 0x28
 8001906:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 800190a:	e0ad      	b.n	8001a68 <MB_Slave_Routine+0x650>
						MB->Ticks = Ticks + MB->RX_Silent_Interval_MS;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001910:	461a      	mov	r2, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	441a      	add	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	64da      	str	r2, [r3, #76]	@ 0x4c
						MB->Seq = 30;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	221e      	movs	r2, #30
 800191e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 8001922:	e0a1      	b.n	8001a68 <MB_Slave_Routine+0x650>
					MB->Seq = 20;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2214      	movs	r2, #20
 8001928:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 800192c:	e09c      	b.n	8001a68 <MB_Slave_Routine+0x650>

			// wait for the rest of the message
		case 20:
			if (MB->RX_LEN >= MB->RX_MSG_LEN)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001938:	429a      	cmp	r2, r3
 800193a:	d334      	bcc.n	80019a6 <MB_Slave_Routine+0x58e>
			{
				MB->MB_Stat = MB_STAT_OK;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				MB_Slave_ProcessMessage(MB);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f8d3 	bl	8001af0 <MB_Slave_ProcessMessage>
				// for a zero wait state interfae (like modbus over USB)
				if (MB->RX_Silent_Interval_MS == 0)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11d      	bne.n	800198e <MB_Slave_Routine+0x576>
				{
					MB->hw_interface.MB_Activate_TX(1); // activate transmitter
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	2001      	movs	r0, #1
 8001958:	4798      	blx	r3
					MB->hw_interface.MB_Transmit(MB->TxBuffer, MB->TX_MSG_LEN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6850      	ldr	r0, [r2, #4]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8001968:	4611      	mov	r1, r2
 800196a:	4798      	blx	r3
					// disable TX mode in case of autocomplete (non blocking call)
					if (MB->TX_Automplete)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <MB_Slave_Routine+0x56c>
					{
						MB->hw_interface.MB_Activate_TX(0);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	2000      	movs	r0, #0
 8001982:	4798      	blx	r3
					}
					MB->Seq = 40;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2228      	movs	r2, #40	@ 0x28
 8001988:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
				MB->MB_Stat = MB_RX_TIMEOUT;
				MB->hw_interface.MB_Request_Recieved(MB);
				MB->Seq = 0;
				return;
			}
			break;
 800198c:	e06e      	b.n	8001a6c <MB_Slave_Routine+0x654>
					MB->Ticks = Ticks + MB->RX_Silent_Interval_MS;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001992:	461a      	mov	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	441a      	add	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	64da      	str	r2, [r3, #76]	@ 0x4c
					MB->Seq = 30;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	221e      	movs	r2, #30
 80019a0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 80019a4:	e062      	b.n	8001a6c <MB_Slave_Routine+0x654>
			else if (Ticks > MB->Ticks)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d95d      	bls.n	8001a6c <MB_Slave_Routine+0x654>
				MB->MB_Stat = MB_RX_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	220f      	movs	r2, #15
 80019b4:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				MB->hw_interface.MB_Request_Recieved(MB);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	4798      	blx	r3
				MB->Seq = 0;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
				return;
 80019c8:	e055      	b.n	8001a76 <MB_Slave_Routine+0x65e>

			// transmit the reply if needed
		case 30:
			if (MB->MB_Stat == MB_STAT_OK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d122      	bne.n	8001a1a <MB_Slave_Routine+0x602>
			{
				// wait for silent interval to finish
				if (Ticks > MB->Ticks)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d948      	bls.n	8001a70 <MB_Slave_Routine+0x658>
				{
					MB->hw_interface.MB_Activate_TX(1); // activate transmitter
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	2001      	movs	r0, #1
 80019e4:	4798      	blx	r3
					MB->hw_interface.MB_Transmit(MB->TxBuffer, MB->TX_MSG_LEN);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6850      	ldr	r0, [r2, #4]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80019f4:	4611      	mov	r1, r2
 80019f6:	4798      	blx	r3
					// disable TX mode in case of autocomplete (non blocking call)
					if (MB->TX_Automplete)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <MB_Slave_Routine+0x5f8>
					{
						MB->hw_interface.MB_Activate_TX(0);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	4798      	blx	r3
					}
					MB->Seq = 40;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2228      	movs	r2, #40	@ 0x28
 8001a14:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			else
			{
				MB->Seq = 0;
			}
			break;
 8001a18:	e02a      	b.n	8001a70 <MB_Slave_Routine+0x658>
				MB->Seq = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 8001a22:	e025      	b.n	8001a70 <MB_Slave_Routine+0x658>

			// wait till tx is complete
		case 40:
			if (MB->TX_Complete || MB->TX_Automplete)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d107      	bne.n	8001a44 <MB_Slave_Routine+0x62c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d017      	beq.n	8001a74 <MB_Slave_Routine+0x65c>
			{
				MB->MB_Stat = MB_STAT_OK;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				MB->Seq = 0;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			break;
 8001a54:	e00e      	b.n	8001a74 <MB_Slave_Routine+0x65c>

		default:
			MB->Seq = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 8001a5e:	e00a      	b.n	8001a76 <MB_Slave_Routine+0x65e>
		return;
 8001a60:	bf00      	nop
 8001a62:	e008      	b.n	8001a76 <MB_Slave_Routine+0x65e>
			break;
 8001a64:	bf00      	nop
 8001a66:	e006      	b.n	8001a76 <MB_Slave_Routine+0x65e>
			break;
 8001a68:	bf00      	nop
 8001a6a:	e004      	b.n	8001a76 <MB_Slave_Routine+0x65e>
			break;
 8001a6c:	bf00      	nop
 8001a6e:	e002      	b.n	8001a76 <MB_Slave_Routine+0x65e>
			break;
 8001a70:	bf00      	nop
 8001a72:	e000      	b.n	8001a76 <MB_Slave_Routine+0x65e>
			break;
 8001a74:	bf00      	nop
	}
}
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <MB_Slave_TX_Complete>:
 }*/

// These functions are called from the user program
// used to signal the library that the TX operation s complete
void MB_Slave_TX_Complete(MB_Slave_t *MB)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	MB->TX_Complete = 1;
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
	MB->hw_interface.MB_Activate_TX(0);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2000      	movs	r0, #0
 8001a98:	4798      	blx	r3
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <MB_Slave_Prepare_Exception>:
	}
}

/// @brief (internal only) prepares an exception reply to be issed to the master
void MB_Slave_Prepare_Exception(MB_Slave_t *MB, MB_EXC_CODE C)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
	MB->TX_MSG_LEN = 5;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2205      	movs	r2, #5
 8001ab2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	MB->TxBuffer[0] = MB->RxBuffer[0];
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	701a      	strb	r2, [r3, #0]
	MB->TxBuffer[1] = MB->RxBuffer[1] | 0x80;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	781a      	ldrb	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
	MB->TxBuffer[2] = C;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	3302      	adds	r3, #2
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	701a      	strb	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <MB_Slave_ProcessMessage>:
/// @fn void MB_Slave_ProcessMessage(MB_Slave_t*)
/// @brief internal api function
/// this is where the message is processed,
/// @param MB ptr to the Modbus slave struct
void MB_Slave_ProcessMessage(MB_Slave_t *MB)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	// return MB_OK;
	// check the message integrity
	uint16_t crc = crc16(MB->RxBuffer, MB->RX_LEN - 2);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b00:	3b02      	subs	r3, #2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f7ff fa90 	bl	800102c <crc16>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	82fb      	strh	r3, [r7, #22]
	uint16_t crc_data = MB->RxBuffer[MB->RX_LEN - 1] | (MB->RxBuffer[MB->RX_LEN - 2] << 8);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6899      	ldr	r1, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b28:	3b02      	subs	r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	82bb      	strh	r3, [r7, #20]

	// check the CRC
	if (crc != crc_data)
 8001b38:	8afa      	ldrh	r2, [r7, #22]
 8001b3a:	8abb      	ldrh	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d004      	beq.n	8001b4a <MB_Slave_ProcessMessage+0x5a>
	{
		// return CRC error
		MB->MB_Stat = MB_RX_ERR_CRC;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	220d      	movs	r2, #13
 8001b44:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
		return;
 8001b48:	e1cd      	b.n	8001ee6 <MB_Slave_ProcessMessage+0x3f6>
	}
	else if (MB->SLA != MB->RX_SLA)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d004      	beq.n	8001b62 <MB_Slave_ProcessMessage+0x72>
	{
		MB->MB_Stat = MB_RX_ERR_ADD;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	220b      	movs	r2, #11
 8001b5c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
		return;
 8001b60:	e1c1      	b.n	8001ee6 <MB_Slave_ProcessMessage+0x3f6>
	}

	// used for internal operations
	uint16_t Off = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	81fb      	strh	r3, [r7, #14]
	uint16_t *ptr;

	// check for a valid address and data length
	if (MB->Target_MEM_Start > MB->Reg_Address || (MB->Reg_Address + MB->NumOfRegisters) > MB->Target_MEM_End)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d80c      	bhi.n	8001b90 <MB_Slave_ProcessMessage+0xa0>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001b84:	4413      	add	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	dd04      	ble.n	8001b9a <MB_Slave_ProcessMessage+0xaa>
	{
		MB_Slave_Prepare_Exception(MB, MB_ILLEGAL_DATA_ADDRESS);
 8001b90:	2102      	movs	r1, #2
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff85 	bl	8001aa2 <MB_Slave_Prepare_Exception>
 8001b98:	e174      	b.n	8001e84 <MB_Slave_ProcessMessage+0x394>
	}
	else
	{
		// get the function code
		switch (MB->Fcn)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	2b16      	cmp	r3, #22
 8001ba4:	f200 8169 	bhi.w	8001e7a <MB_Slave_ProcessMessage+0x38a>
 8001ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb0 <MB_Slave_ProcessMessage+0xc0>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001c0d 	.word	0x08001c0d
 8001bb4:	08001c0d 	.word	0x08001c0d
 8001bb8:	08001c7f 	.word	0x08001c7f
 8001bbc:	08001c7f 	.word	0x08001c7f
 8001bc0:	08001cfb 	.word	0x08001cfb
 8001bc4:	08001cfb 	.word	0x08001cfb
 8001bc8:	08001e7b 	.word	0x08001e7b
 8001bcc:	08001e7b 	.word	0x08001e7b
 8001bd0:	08001e7b 	.word	0x08001e7b
 8001bd4:	08001e7b 	.word	0x08001e7b
 8001bd8:	08001e7b 	.word	0x08001e7b
 8001bdc:	08001e7b 	.word	0x08001e7b
 8001be0:	08001e7b 	.word	0x08001e7b
 8001be4:	08001e7b 	.word	0x08001e7b
 8001be8:	08001d55 	.word	0x08001d55
 8001bec:	08001d55 	.word	0x08001d55
 8001bf0:	08001e7b 	.word	0x08001e7b
 8001bf4:	08001e7b 	.word	0x08001e7b
 8001bf8:	08001e7b 	.word	0x08001e7b
 8001bfc:	08001e7b 	.word	0x08001e7b
 8001c00:	08001e7b 	.word	0x08001e7b
 8001c04:	08001e7b 	.word	0x08001e7b
 8001c08:	08001dcf 	.word	0x08001dcf
		{
			case MB_READ_COIL:
			case MB_READ_INPUT_STAT:
				// callback is issued before preparing the reply
				MB->hw_interface.MB_Request_Recieved(MB);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
				// encode the bits to be acquirted into the message
				MB_Encode_Coils(MB->Fcn == MB_READ_COIL ? MB->CoilBits : MB->InputBits, MB->Reg_Address, MB->TxBuffer + 3, MB->NumOfRegisters);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <MB_Slave_ProcessMessage+0x134>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c22:	e001      	b.n	8001c28 <MB_Slave_ProcessMessage+0x138>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	1cda      	adds	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001c3a:	f7ff fac1 	bl	80011c0 <MB_Encode_Coils>
				MB->TxBuffer[2] = (MB->NumOfRegisters / 8) + (MB->NumOfRegisters % 8 ? 1 : 0);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bf14      	ite	ne
 8001c5a:	2301      	movne	r3, #1
 8001c5c:	2300      	moveq	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	3302      	adds	r3, #2
 8001c68:	440a      	add	r2, r1
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]
				memcpy(MB->TxBuffer, MB->RxBuffer, 2);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6892      	ldr	r2, [r2, #8]
 8001c76:	8812      	ldrh	r2, [r2, #0]
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	801a      	strh	r2, [r3, #0]
				break;
 8001c7c:	e102      	b.n	8001e84 <MB_Slave_ProcessMessage+0x394>

				// for read multiple holding registers.
			case MB_READ_MUL_HLD_REG:
			case MB_READ_INPUT_REG:
				// callback is issued before preparing the reply
				MB->hw_interface.MB_Request_Recieved(MB);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
				ptr = MB->Fcn == MB_READ_INPUT_REG ? MB->InputRegs : MB->HoldingRegs;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d102      	bne.n	8001c96 <MB_Slave_ProcessMessage+0x1a6>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	e001      	b.n	8001c9a <MB_Slave_ProcessMessage+0x1aa>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
				// encode the registers
				for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	83fb      	strh	r3, [r7, #30]
 8001ca0:	e013      	b.n	8001cca <MB_Slave_ProcessMessage+0x1da>
				{
					MB_Encode_UInt16(MB->TxBuffer + 3, ptr[x + MB->Reg_Address], &Off);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	1cd8      	adds	r0, r3, #3
 8001ca8:	8bfb      	ldrh	r3, [r7, #30]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8001cb0:	4413      	add	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	f107 020e 	add.w	r2, r7, #14
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7ff fada 	bl	8001278 <MB_Encode_UInt16>
				for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 8001cc4:	8bfb      	ldrh	r3, [r7, #30]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	83fb      	strh	r3, [r7, #30]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001cd0:	8bfa      	ldrh	r2, [r7, #30]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d3e5      	bcc.n	8001ca2 <MB_Slave_ProcessMessage+0x1b2>
				}

				memcpy(MB->TxBuffer, MB->RxBuffer, 2);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6892      	ldr	r2, [r2, #8]
 8001cde:	8812      	ldrh	r2, [r2, #0]
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	801a      	strh	r2, [r3, #0]
				// compute and load the byte count
				MB->TxBuffer[2] = 2 * MB->NumOfRegisters;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]
				break;
 8001cf8:	e0c4      	b.n	8001e84 <MB_Slave_ProcessMessage+0x394>

			case MB_FRC_SNG_COIL:
			case MB_PRST_SNG_REG:
				if (MB->Fcn == MB_FRC_SNG_COIL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d10b      	bne.n	8001d1c <MB_Slave_ProcessMessage+0x22c>
				{
					MB_Parse_Coils(MB->RxBuffer + 4, MB->Reg_Address, MB->CoilBits, 1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	1d18      	adds	r0, r3, #4
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d14:	2301      	movs	r3, #1
 8001d16:	f7ff f9d1 	bl	80010bc <MB_Parse_Coils>
 8001d1a:	e00e      	b.n	8001d3a <MB_Slave_ProcessMessage+0x24a>
				}
				else
				{
					MB_Parse_UInt16(MB->RxBuffer + 4, &Off, &MB->HoldingRegs[MB->Reg_Address]);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	1d18      	adds	r0, r3, #4
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	441a      	add	r2, r3
 8001d30:	f107 030e 	add.w	r3, r7, #14
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7ff fa1d 	bl	8001174 <MB_Parse_UInt16>
				}
				// callback is issued after parsing the data
				MB->hw_interface.MB_Request_Recieved(MB);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
				// copy the slave address, function code, reg address, numofregisters
				// to the TX Buffer
				memcpy(MB->TxBuffer, MB->RxBuffer, 6);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6858      	ldr	r0, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2206      	movs	r2, #6
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f003 fa75 	bl	800523c <memcpy>
				break;
 8001d52:	e097      	b.n	8001e84 <MB_Slave_ProcessMessage+0x394>

				// num of registers here indicate the num of coil bits
			case MB_FRC_MUL_COILS:
			case MB_PRST_MUL_REGS:
				if (MB->Fcn == MB_FRC_MUL_COILS)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	d10d      	bne.n	8001d7a <MB_Slave_ProcessMessage+0x28a>
				{
					MB_Parse_Coils(MB->RxBuffer + 7, MB->Reg_Address, MB->CoilBits, MB->NumOfRegisters);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	1dd8      	adds	r0, r3, #7
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001d74:	f7ff f9a2 	bl	80010bc <MB_Parse_Coils>
 8001d78:	e01c      	b.n	8001db4 <MB_Slave_ProcessMessage+0x2c4>
				}
				else
				{
					for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	83bb      	strh	r3, [r7, #28]
 8001d7e:	e013      	b.n	8001da8 <MB_Slave_ProcessMessage+0x2b8>
					{
						MB_Parse_UInt16(MB->RxBuffer + 7, &Off, &MB->HoldingRegs[x + MB->Reg_Address]);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	1dd8      	adds	r0, r3, #7
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	8bbb      	ldrh	r3, [r7, #28]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	f8b1 1056 	ldrh.w	r1, [r1, #86]	@ 0x56
 8001d92:	440b      	add	r3, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	441a      	add	r2, r3
 8001d98:	f107 030e 	add.w	r3, r7, #14
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7ff f9e9 	bl	8001174 <MB_Parse_UInt16>
					for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 8001da2:	8bbb      	ldrh	r3, [r7, #28]
 8001da4:	3301      	adds	r3, #1
 8001da6:	83bb      	strh	r3, [r7, #28]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001dae:	8bba      	ldrh	r2, [r7, #28]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d3e5      	bcc.n	8001d80 <MB_Slave_ProcessMessage+0x290>
					}
				}
				// callback is issued after parsing the data
				MB->hw_interface.MB_Request_Recieved(MB);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
				// copy the slave address, function code, reg address, numofregisters
				// to the TX Buffer
				memcpy(MB->TxBuffer, MB->RxBuffer, 6);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6858      	ldr	r0, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2206      	movs	r2, #6
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f003 fa38 	bl	800523c <memcpy>
				break;
 8001dcc:	e05a      	b.n	8001e84 <MB_Slave_ProcessMessage+0x394>

			case MB_PRST_READ_MUL_REGS:
				// preset the requested holding registers (the write part)
				for (uint16_t x = 0; x < MB->NumOfW_Regs; x++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	837b      	strh	r3, [r7, #26]
 8001dd2:	e014      	b.n	8001dfe <MB_Slave_ProcessMessage+0x30e>
				{
					MB_Parse_UInt16(MB->RxBuffer + 11, &Off, &MB->HoldingRegs[x + MB->Reg_Address_W]);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f103 000b 	add.w	r0, r3, #11
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	8b7b      	ldrh	r3, [r7, #26]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f8b1 1058 	ldrh.w	r1, [r1, #88]	@ 0x58
 8001de8:	440b      	add	r3, r1
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	441a      	add	r2, r3
 8001dee:	f107 030e 	add.w	r3, r7, #14
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7ff f9be 	bl	8001174 <MB_Parse_UInt16>
				for (uint16_t x = 0; x < MB->NumOfW_Regs; x++)
 8001df8:	8b7b      	ldrh	r3, [r7, #26]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	837b      	strh	r3, [r7, #26]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8001e04:	8b7a      	ldrh	r2, [r7, #26]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3e4      	bcc.n	8001dd4 <MB_Slave_ProcessMessage+0x2e4>
				}
				// issue the callback before loading the data intot he buffer
				MB->hw_interface.MB_Request_Recieved(MB);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
				ptr = MB->HoldingRegs;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	613b      	str	r3, [r7, #16]
				// encode the registers (the read part)
				Off = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	81fb      	strh	r3, [r7, #14]
				for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	833b      	strh	r3, [r7, #24]
 8001e20:	e013      	b.n	8001e4a <MB_Slave_ProcessMessage+0x35a>
				{
					MB_Encode_UInt16(MB->TxBuffer + 3, ptr[x + MB->Reg_Address], &Off);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	1cd8      	adds	r0, r3, #3
 8001e28:	8b3b      	ldrh	r3, [r7, #24]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8001e30:	4413      	add	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	f107 020e 	add.w	r2, r7, #14
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7ff fa1a 	bl	8001278 <MB_Encode_UInt16>
				for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 8001e44:	8b3b      	ldrh	r3, [r7, #24]
 8001e46:	3301      	adds	r3, #1
 8001e48:	833b      	strh	r3, [r7, #24]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001e50:	8b3a      	ldrh	r2, [r7, #24]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d3e5      	bcc.n	8001e22 <MB_Slave_ProcessMessage+0x332>
				}
				// load the byte count
				MB->TxBuffer[2] = 2 * MB->NumOfRegisters;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	3302      	adds	r3, #2
 8001e64:	0052      	lsls	r2, r2, #1
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]
				// copy the slave address and functioncode from the incoming message
				memcpy(MB->TxBuffer, MB->RxBuffer, 2);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6892      	ldr	r2, [r2, #8]
 8001e72:	8812      	ldrh	r2, [r2, #0]
 8001e74:	b292      	uxth	r2, r2
 8001e76:	801a      	strh	r2, [r3, #0]
				break;
 8001e78:	e004      	b.n	8001e84 <MB_Slave_ProcessMessage+0x394>

				// for illegal function code
			default:
				MB_Slave_Prepare_Exception(MB, MB_ILLEGAL_FUNC);
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff fe10 	bl	8001aa2 <MB_Slave_Prepare_Exception>
				break;
 8001e82:	bf00      	nop
		}
	}
	MB->RX_LEN = 0;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	865a      	strh	r2, [r3, #50]	@ 0x32
	// compute the checksum
	crc = crc16(MB->TxBuffer, MB->TX_MSG_LEN - 2); // -2 to remove the CRC slots from the CRC calculation
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e94:	3b02      	subs	r3, #2
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f7ff f8c6 	bl	800102c <crc16>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	82fb      	strh	r3, [r7, #22]
	MB->TxBuffer[MB->TX_MSG_LEN - 2] = (uint8_t) (crc >> 8);
 8001ea4:	8afb      	ldrh	r3, [r7, #22]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	b299      	uxth	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eb4:	3b02      	subs	r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b2ca      	uxtb	r2, r1
 8001eba:	701a      	strb	r2, [r3, #0]
	MB->TxBuffer[MB->TX_MSG_LEN - 1] = (uint8_t) (crc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	8afa      	ldrh	r2, [r7, #22]
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]
	// ready to transmit
	MB->TX_Complete = 0;
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 8001ed6:	f36f 0382 	bfc	r3, #2, #1
 8001eda:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
	MB->MB_Stat = MB_STAT_OK;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
}
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f2c <HAL_Init+0x40>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <HAL_Init+0x40>)
 8001f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	@ (8001f2c <HAL_Init+0x40>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f92b 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	200f      	movs	r0, #15
 8001f1c:	f000 f808 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7fe fd4a 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_InitTick+0x54>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <HAL_InitTick+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f943 	bl	80021da <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 f90b 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	@ (8001f8c <HAL_InitTick+0x5c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000628 	.word	0x20000628

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000628 	.word	0x20000628

08001fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fec:	4013      	ands	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002002:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <__NVIC_SetPriorityGrouping+0x44>)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	60d3      	str	r3, [r2, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <__NVIC_GetPriorityGrouping+0x18>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0307 	and.w	r3, r3, #7
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db0b      	blt.n	800205e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4907      	ldr	r1, [pc, #28]	@ (800206c <__NVIC_EnableIRQ+0x38>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2001      	movs	r0, #1
 8002056:	fa00 f202 	lsl.w	r2, r0, r2
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	@ (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	@ (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	@ 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff8e 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff29 	bl	8001fd0 <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff3e 	bl	8002018 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff8e 	bl	80020c4 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5d 	bl	8002070 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff31 	bl	8002034 <__NVIC_EnableIRQ>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffa2 	bl	800212c <SysTick_Config>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff feda 	bl	8001fb8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e099      	b.n	8002344 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002230:	e00f      	b.n	8002252 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002232:	f7ff fec1 	bl	8001fb8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b05      	cmp	r3, #5
 800223e:	d908      	bls.n	8002252 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e078      	b.n	8002344 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e8      	bne.n	8002232 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4b38      	ldr	r3, [pc, #224]	@ (800234c <HAL_DMA_Init+0x158>)
 800226c:	4013      	ands	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d107      	bne.n	80022bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	4313      	orrs	r3, r2
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0307 	bic.w	r3, r3, #7
 80022d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d117      	bne.n	8002316 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fb01 	bl	8002900 <DMA_CheckFifoParam>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2240      	movs	r2, #64	@ 0x40
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002312:	2301      	movs	r3, #1
 8002314:	e016      	b.n	8002344 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fab8 	bl	8002894 <DMA_CalcBaseAndBitshift>
 8002324:	4603      	mov	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	223f      	movs	r2, #63	@ 0x3f
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	f010803f 	.word	0xf010803f

08002350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Start_IT+0x26>
 8002372:	2302      	movs	r3, #2
 8002374:	e040      	b.n	80023f8 <HAL_DMA_Start_IT+0xa8>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d12f      	bne.n	80023ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fa4a 	bl	8002838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	223f      	movs	r2, #63	@ 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0216 	orr.w	r2, r2, #22
 80023be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0208 	orr.w	r2, r2, #8
 80023d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e005      	b.n	80023f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800240e:	f7ff fdd3 	bl	8001fb8 <HAL_GetTick>
 8002412:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d008      	beq.n	8002432 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e052      	b.n	80024d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0216 	bic.w	r2, r2, #22
 8002440:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002450:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d103      	bne.n	8002462 <HAL_DMA_Abort+0x62>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0208 	bic.w	r2, r2, #8
 8002470:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002482:	e013      	b.n	80024ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002484:	f7ff fd98 	bl	8001fb8 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b05      	cmp	r3, #5
 8002490:	d90c      	bls.n	80024ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2203      	movs	r2, #3
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e015      	b.n	80024d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e4      	bne.n	8002484 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	223f      	movs	r2, #63	@ 0x3f
 80024c0:	409a      	lsls	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d004      	beq.n	80024fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2280      	movs	r2, #128	@ 0x80
 80024f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00c      	b.n	8002518 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2205      	movs	r2, #5
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002530:	4b8e      	ldr	r3, [pc, #568]	@ (800276c <HAL_DMA_IRQHandler+0x248>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a8e      	ldr	r2, [pc, #568]	@ (8002770 <HAL_DMA_IRQHandler+0x24c>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0a9b      	lsrs	r3, r3, #10
 800253c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002542:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	2208      	movs	r2, #8
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01a      	beq.n	8002590 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0204 	bic.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257c:	2208      	movs	r2, #8
 800257e:	409a      	lsls	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	2201      	movs	r2, #1
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b2:	2201      	movs	r2, #1
 80025b4:	409a      	lsls	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025be:	f043 0202 	orr.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2204      	movs	r2, #4
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e8:	2204      	movs	r2, #4
 80025ea:	409a      	lsls	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002600:	2210      	movs	r2, #16
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d043      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d03c      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261e:	2210      	movs	r2, #16
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d018      	beq.n	8002666 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d024      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
 8002652:	e01f      	b.n	8002694 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
 8002664:	e016      	b.n	8002694 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0208 	bic.w	r2, r2, #8
 8002682:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002698:	2220      	movs	r2, #32
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 808f 	beq.w	80027c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8087 	beq.w	80027c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	2220      	movs	r2, #32
 80026bc:	409a      	lsls	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d136      	bne.n	800273c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0216 	bic.w	r2, r2, #22
 80026dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_DMA_IRQHandler+0x1da>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0208 	bic.w	r2, r2, #8
 800270c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	223f      	movs	r2, #63	@ 0x3f
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272e:	2b00      	cmp	r3, #0
 8002730:	d07e      	beq.n	8002830 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
        }
        return;
 800273a:	e079      	b.n	8002830 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01d      	beq.n	8002786 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10d      	bne.n	8002774 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275c:	2b00      	cmp	r3, #0
 800275e:	d031      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
 8002768:	e02c      	b.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000
 8002770:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d023      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
 8002784:	e01e      	b.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10f      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0210 	bic.w	r2, r2, #16
 80027a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d032      	beq.n	8002832 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d022      	beq.n	800281e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2205      	movs	r2, #5
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	3301      	adds	r3, #1
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d307      	bcc.n	800280c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f2      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x2cc>
 800280a:	e000      	b.n	800280e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800280c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
 800282e:	e000      	b.n	8002832 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002830:	bf00      	nop
    }
  }
}
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b40      	cmp	r3, #64	@ 0x40
 8002864:	d108      	bne.n	8002878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002876:	e007      	b.n	8002888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	3b10      	subs	r3, #16
 80028a4:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <DMA_CalcBaseAndBitshift+0x64>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ae:	4a13      	ldr	r2, [pc, #76]	@ (80028fc <DMA_CalcBaseAndBitshift+0x68>)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d909      	bls.n	80028d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80028d4:	e007      	b.n	80028e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	aaaaaaab 	.word	0xaaaaaaab
 80028fc:	08005298 	.word	0x08005298

08002900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11f      	bne.n	800295a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d856      	bhi.n	80029ce <DMA_CheckFifoParam+0xce>
 8002920:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <DMA_CheckFifoParam+0x28>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	08002939 	.word	0x08002939
 800292c:	0800294b 	.word	0x0800294b
 8002930:	08002939 	.word	0x08002939
 8002934:	080029cf 	.word	0x080029cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d046      	beq.n	80029d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002948:	e043      	b.n	80029d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002952:	d140      	bne.n	80029d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e03d      	b.n	80029d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002962:	d121      	bne.n	80029a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d837      	bhi.n	80029da <DMA_CheckFifoParam+0xda>
 800296a:	a201      	add	r2, pc, #4	@ (adr r2, 8002970 <DMA_CheckFifoParam+0x70>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	08002981 	.word	0x08002981
 8002974:	08002987 	.word	0x08002987
 8002978:	08002981 	.word	0x08002981
 800297c:	08002999 	.word	0x08002999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e030      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d025      	beq.n	80029de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002996:	e022      	b.n	80029de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029a0:	d11f      	bne.n	80029e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029a6:	e01c      	b.n	80029e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d903      	bls.n	80029b6 <DMA_CheckFifoParam+0xb6>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d003      	beq.n	80029bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029b4:	e018      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
      break;
 80029ba:	e015      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      break;
 80029cc:	e00b      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029ce:	bf00      	nop
 80029d0:	e00a      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029d2:	bf00      	nop
 80029d4:	e008      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029d6:	bf00      	nop
 80029d8:	e006      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029da:	bf00      	nop
 80029dc:	e004      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029de:	bf00      	nop
 80029e0:	e002      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <DMA_CheckFifoParam+0xe8>
      break;
 80029e6:	bf00      	nop
    }
  } 
  
  return status; 
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a0a:	4b23      	ldr	r3, [pc, #140]	@ (8002a98 <HAL_FLASH_Program+0xa0>)
 8002a0c:	7e1b      	ldrb	r3, [r3, #24]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_FLASH_Program+0x1e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e03b      	b.n	8002a8e <HAL_FLASH_Program+0x96>
 8002a16:	4b20      	ldr	r3, [pc, #128]	@ (8002a98 <HAL_FLASH_Program+0xa0>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a20:	f000 f870 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002a24:	4603      	mov	r3, r0
 8002a26:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d12b      	bne.n	8002a86 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002a34:	783b      	ldrb	r3, [r7, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f000 f91b 	bl	8002c74 <FLASH_Program_Byte>
 8002a3e:	e016      	b.n	8002a6e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002a46:	883b      	ldrh	r3, [r7, #0]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	68b8      	ldr	r0, [r7, #8]
 8002a4c:	f000 f8ee 	bl	8002c2c <FLASH_Program_HalfWord>
 8002a50:	e00d      	b.n	8002a6e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d105      	bne.n	8002a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	68b8      	ldr	r0, [r7, #8]
 8002a5e:	f000 f8c3 	bl	8002be8 <FLASH_Program_Word>
 8002a62:	e004      	b.n	8002a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a68:	68b8      	ldr	r0, [r7, #8]
 8002a6a:	f000 f88b 	bl	8002b84 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a6e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a72:	f000 f847 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002a76:	4603      	mov	r3, r0
 8002a78:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_FLASH_Program+0xa4>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	4a07      	ldr	r2, [pc, #28]	@ (8002a9c <HAL_FLASH_Program+0xa4>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a86:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <HAL_FLASH_Program+0xa0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	761a      	strb	r2, [r3, #24]

  return status;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	2000062c 	.word	0x2000062c
 8002a9c:	40023c00 	.word	0x40023c00

08002aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_FLASH_Unlock+0x38>)
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da0b      	bge.n	8002aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_FLASH_Unlock+0x38>)
 8002ab4:	4a09      	ldr	r2, [pc, #36]	@ (8002adc <HAL_FLASH_Unlock+0x3c>)
 8002ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002ab8:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <HAL_FLASH_Unlock+0x38>)
 8002aba:	4a09      	ldr	r2, [pc, #36]	@ (8002ae0 <HAL_FLASH_Unlock+0x40>)
 8002abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_FLASH_Unlock+0x38>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da01      	bge.n	8002aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002aca:	79fb      	ldrb	r3, [r7, #7]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40023c00 	.word	0x40023c00
 8002adc:	45670123 	.word	0x45670123
 8002ae0:	cdef89ab 	.word	0xcdef89ab

08002ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_FLASH_Lock+0x1c>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	4a04      	ldr	r2, [pc, #16]	@ (8002b00 <HAL_FLASH_Lock+0x1c>)
 8002aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002af2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40023c00 	.word	0x40023c00

08002b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b10:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <FLASH_WaitForLastOperation+0x78>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b16:	f7ff fa4f 	bl	8001fb8 <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002b1c:	e010      	b.n	8002b40 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d00c      	beq.n	8002b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <FLASH_WaitForLastOperation+0x38>
 8002b2c:	f7ff fa44 	bl	8001fb8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d201      	bcs.n	8002b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e019      	b.n	8002b74 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <FLASH_WaitForLastOperation+0x7c>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e8      	bne.n	8002b1e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <FLASH_WaitForLastOperation+0x7c>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <FLASH_WaitForLastOperation+0x7c>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002b5e:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <FLASH_WaitForLastOperation+0x7c>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002b6a:	f000 f8a5 	bl	8002cb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0

}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000062c 	.word	0x2000062c
 8002b80:	40023c00 	.word	0x40023c00

08002b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b90:	4b14      	ldr	r3, [pc, #80]	@ (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	4a13      	ldr	r2, [pc, #76]	@ (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	4a10      	ldr	r2, [pc, #64]	@ (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002ba2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4a0d      	ldr	r2, [pc, #52]	@ (8002be4 <FLASH_Program_DoubleWord+0x60>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002bba:	f3bf 8f6f 	isb	sy
}
 8002bbe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	000a      	movs	r2, r1
 8002bce:	2300      	movs	r3, #0
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	3104      	adds	r1, #4
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40023c00 	.word	0x40023c00

08002be8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <FLASH_Program_Word+0x40>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c28 <FLASH_Program_Word+0x40>)
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <FLASH_Program_Word+0x40>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	4a09      	ldr	r2, [pc, #36]	@ (8002c28 <FLASH_Program_Word+0x40>)
 8002c04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <FLASH_Program_Word+0x40>)
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	4a06      	ldr	r2, [pc, #24]	@ (8002c28 <FLASH_Program_Word+0x40>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40023c00 	.word	0x40023c00

08002c2c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c38:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002c44:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	4a09      	ldr	r2, [pc, #36]	@ (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c50:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4a06      	ldr	r2, [pc, #24]	@ (8002c70 <FLASH_Program_HalfWord+0x44>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	801a      	strh	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40023c00 	.word	0x40023c00

08002c74 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c80:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c8e:	4a09      	ldr	r2, [pc, #36]	@ (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c94:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	4a06      	ldr	r2, [pc, #24]	@ (8002cb4 <FLASH_Program_Byte+0x40>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	701a      	strb	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00

08002cb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f043 0310 	orr.w	r3, r3, #16
 8002cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002cd2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002cd4:	4b29      	ldr	r3, [pc, #164]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002cda:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002ce6:	4b26      	ldr	r3, [pc, #152]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	4a24      	ldr	r2, [pc, #144]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002cf0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002cf2:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002cf8:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002d04:	4b1e      	ldr	r3, [pc, #120]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d0e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d12:	2240      	movs	r2, #64	@ 0x40
 8002d14:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002d16:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002d22:	4b17      	ldr	r3, [pc, #92]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	4a15      	ldr	r2, [pc, #84]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d2c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002d2e:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d30:	2280      	movs	r2, #128	@ 0x80
 8002d32:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002d34:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	4a0d      	ldr	r2, [pc, #52]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d4a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d52:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f043 0320 	orr.w	r3, r3, #32
 8002d68:	4a05      	ldr	r2, [pc, #20]	@ (8002d80 <FLASH_SetErrorCode+0xc8>)
 8002d6a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <FLASH_SetErrorCode+0xc4>)
 8002d6e:	2202      	movs	r2, #2
 8002d70:	60da      	str	r2, [r3, #12]
  }
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40023c00 	.word	0x40023c00
 8002d80:	2000062c 	.word	0x2000062c

08002d84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d96:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <HAL_FLASHEx_Erase+0xd8>)
 8002d98:	7e1b      	ldrb	r3, [r3, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_FLASHEx_Erase+0x1e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e058      	b.n	8002e54 <HAL_FLASHEx_Erase+0xd0>
 8002da2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e5c <HAL_FLASHEx_Erase+0xd8>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002da8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002dac:	f7ff feaa 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002db0:	4603      	mov	r3, r0
 8002db2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d148      	bne.n	8002e4c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d115      	bne.n	8002df6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f000 f844 	bl	8002e64 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ddc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002de0:	f7ff fe90 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002de8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <HAL_FLASHEx_Erase+0xdc>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	4a1c      	ldr	r2, [pc, #112]	@ (8002e60 <HAL_FLASHEx_Erase+0xdc>)
 8002dee:	f023 0304 	bic.w	r3, r3, #4
 8002df2:	6113      	str	r3, [r2, #16]
 8002df4:	e028      	b.n	8002e48 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	e01c      	b.n	8002e38 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	68b8      	ldr	r0, [r7, #8]
 8002e08:	f000 f850 	bl	8002eac <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e10:	f7ff fe78 	bl	8002b04 <FLASH_WaitForLastOperation>
 8002e14:	4603      	mov	r3, r0
 8002e16:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <HAL_FLASHEx_Erase+0xdc>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	4a10      	ldr	r2, [pc, #64]	@ (8002e60 <HAL_FLASHEx_Erase+0xdc>)
 8002e1e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002e22:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	601a      	str	r2, [r3, #0]
          break;
 8002e30:	e00a      	b.n	8002e48 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3301      	adds	r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4413      	add	r3, r2
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d3da      	bcc.n	8002dfe <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002e48:	f000 f878 	bl	8002f3c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <HAL_FLASHEx_Erase+0xd8>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	761a      	strb	r2, [r3, #24]

  return status;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	2000062c 	.word	0x2000062c
 8002e60:	40023c00 	.word	0x40023c00

08002e64 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <FLASH_MassErase+0x44>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <FLASH_MassErase+0x44>)
 8002e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <FLASH_MassErase+0x44>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <FLASH_MassErase+0x44>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002e88:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <FLASH_MassErase+0x44>)
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	4313      	orrs	r3, r2
 8002e92:	4a05      	ldr	r2, [pc, #20]	@ (8002ea8 <FLASH_MassErase+0x44>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e98:	6113      	str	r3, [r2, #16]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00

08002eac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e010      	b.n	8002eea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d103      	bne.n	8002ed6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e009      	b.n	8002eea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d103      	bne.n	8002ee4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e002      	b.n	8002eea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002ee4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002eea:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002ef6:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	490f      	ldr	r1, [pc, #60]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002f02:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	4a0c      	ldr	r2, [pc, #48]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002f08:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002f0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4313      	orrs	r3, r2
 8002f18:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <FLASH_Erase_Sector+0x8c>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2a:	6113      	str	r3, [r2, #16]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40023c00 	.word	0x40023c00

08002f3c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002f40:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d017      	beq.n	8002f7c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f52:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f56:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002f58:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a16      	ldr	r2, [pc, #88]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f6e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f70:	4b14      	ldr	r3, [pc, #80]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a13      	ldr	r2, [pc, #76]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f7a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002f7c:	4b11      	ldr	r3, [pc, #68]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d017      	beq.n	8002fb8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f88:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f92:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002f9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a07      	ldr	r2, [pc, #28]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002fa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002faa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <FLASH_FlushCaches+0x88>)
 8002fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fb6:	6013      	str	r3, [r2, #0]
  }
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	@ 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e159      	b.n	8003298 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	f040 8148 	bne.w	8003292 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d005      	beq.n	800301a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003016:	2b02      	cmp	r3, #2
 8003018:	d130      	bne.n	800307c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003050:	2201      	movs	r2, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 0201 	and.w	r2, r3, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b03      	cmp	r3, #3
 8003086:	d017      	beq.n	80030b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d123      	bne.n	800310c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	08da      	lsrs	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3208      	adds	r2, #8
 8003106:	69b9      	ldr	r1, [r7, #24]
 8003108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0203 	and.w	r2, r3, #3
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a2 	beq.w	8003292 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b57      	ldr	r3, [pc, #348]	@ (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	4a56      	ldr	r2, [pc, #344]	@ (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800315c:	6453      	str	r3, [r2, #68]	@ 0x44
 800315e:	4b54      	ldr	r3, [pc, #336]	@ (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800316a:	4a52      	ldr	r2, [pc, #328]	@ (80032b4 <HAL_GPIO_Init+0x2ec>)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a49      	ldr	r2, [pc, #292]	@ (80032b8 <HAL_GPIO_Init+0x2f0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d019      	beq.n	80031ca <HAL_GPIO_Init+0x202>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a48      	ldr	r2, [pc, #288]	@ (80032bc <HAL_GPIO_Init+0x2f4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_GPIO_Init+0x1fe>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a47      	ldr	r2, [pc, #284]	@ (80032c0 <HAL_GPIO_Init+0x2f8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00d      	beq.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a46      	ldr	r2, [pc, #280]	@ (80032c4 <HAL_GPIO_Init+0x2fc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <HAL_GPIO_Init+0x1f6>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a45      	ldr	r2, [pc, #276]	@ (80032c8 <HAL_GPIO_Init+0x300>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_GPIO_Init+0x1f2>
 80031b6:	2304      	movs	r3, #4
 80031b8:	e008      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031ba:	2307      	movs	r3, #7
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031be:	2303      	movs	r3, #3
 80031c0:	e004      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e002      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031ca:	2300      	movs	r3, #0
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f002 0203 	and.w	r2, r2, #3
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	4093      	lsls	r3, r2
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031dc:	4935      	ldr	r1, [pc, #212]	@ (80032b4 <HAL_GPIO_Init+0x2ec>)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ea:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <HAL_GPIO_Init+0x304>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800320e:	4a2f      	ldr	r2, [pc, #188]	@ (80032cc <HAL_GPIO_Init+0x304>)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003214:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <HAL_GPIO_Init+0x304>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003238:	4a24      	ldr	r2, [pc, #144]	@ (80032cc <HAL_GPIO_Init+0x304>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323e:	4b23      	ldr	r3, [pc, #140]	@ (80032cc <HAL_GPIO_Init+0x304>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003262:	4a1a      	ldr	r2, [pc, #104]	@ (80032cc <HAL_GPIO_Init+0x304>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003268:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <HAL_GPIO_Init+0x304>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800328c:	4a0f      	ldr	r2, [pc, #60]	@ (80032cc <HAL_GPIO_Init+0x304>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	f67f aea2 	bls.w	8002fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3724      	adds	r7, #36	@ 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40013c00 	.word	0x40013c00

080032d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ec:	e003      	b.n	80032f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	041a      	lsls	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e267      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d075      	beq.n	800340e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003322:	4b88      	ldr	r3, [pc, #544]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d00c      	beq.n	8003348 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332e:	4b85      	ldr	r3, [pc, #532]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003336:	2b08      	cmp	r3, #8
 8003338:	d112      	bne.n	8003360 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333a:	4b82      	ldr	r3, [pc, #520]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003342:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003346:	d10b      	bne.n	8003360 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003348:	4b7e      	ldr	r3, [pc, #504]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d05b      	beq.n	800340c <HAL_RCC_OscConfig+0x108>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d157      	bne.n	800340c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e242      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003368:	d106      	bne.n	8003378 <HAL_RCC_OscConfig+0x74>
 800336a:	4b76      	ldr	r3, [pc, #472]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a75      	ldr	r2, [pc, #468]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e01d      	b.n	80033b4 <HAL_RCC_OscConfig+0xb0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x98>
 8003382:	4b70      	ldr	r3, [pc, #448]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6f      	ldr	r2, [pc, #444]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b6d      	ldr	r3, [pc, #436]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a6c      	ldr	r2, [pc, #432]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e00b      	b.n	80033b4 <HAL_RCC_OscConfig+0xb0>
 800339c:	4b69      	ldr	r3, [pc, #420]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a68      	ldr	r2, [pc, #416]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 80033a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b66      	ldr	r3, [pc, #408]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a65      	ldr	r2, [pc, #404]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 80033ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fdfc 	bl	8001fb8 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c4:	f7fe fdf8 	bl	8001fb8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	@ 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e207      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0xc0>
 80033e2:	e014      	b.n	800340e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe fde8 	bl	8001fb8 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe fde4 	bl	8001fb8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	@ 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e1f3      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	4b51      	ldr	r3, [pc, #324]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0xe8>
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d063      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800341a:	4b4a      	ldr	r3, [pc, #296]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003426:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800342e:	2b08      	cmp	r3, #8
 8003430:	d11c      	bne.n	800346c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003432:	4b44      	ldr	r3, [pc, #272]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d116      	bne.n	800346c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343e:	4b41      	ldr	r3, [pc, #260]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_RCC_OscConfig+0x152>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e1c7      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003456:	4b3b      	ldr	r3, [pc, #236]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4937      	ldr	r1, [pc, #220]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	e03a      	b.n	80034e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003474:	4b34      	ldr	r3, [pc, #208]	@ (8003548 <HAL_RCC_OscConfig+0x244>)
 8003476:	2201      	movs	r2, #1
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fe fd9d 	bl	8001fb8 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003482:	f7fe fd99 	bl	8001fb8 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e1a8      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	4b2b      	ldr	r3, [pc, #172]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a0:	4b28      	ldr	r3, [pc, #160]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4925      	ldr	r1, [pc, #148]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]
 80034b4:	e015      	b.n	80034e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b6:	4b24      	ldr	r3, [pc, #144]	@ (8003548 <HAL_RCC_OscConfig+0x244>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe fd7c 	bl	8001fb8 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c4:	f7fe fd78 	bl	8001fb8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e187      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d036      	beq.n	800355c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d016      	beq.n	8003524 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f6:	4b15      	ldr	r3, [pc, #84]	@ (800354c <HAL_RCC_OscConfig+0x248>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fe fd5c 	bl	8001fb8 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003504:	f7fe fd58 	bl	8001fb8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e167      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <HAL_RCC_OscConfig+0x240>)
 8003518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x200>
 8003522:	e01b      	b.n	800355c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003524:	4b09      	ldr	r3, [pc, #36]	@ (800354c <HAL_RCC_OscConfig+0x248>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352a:	f7fe fd45 	bl	8001fb8 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	e00e      	b.n	8003550 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003532:	f7fe fd41 	bl	8001fb8 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d907      	bls.n	8003550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e150      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
 8003544:	40023800 	.word	0x40023800
 8003548:	42470000 	.word	0x42470000
 800354c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	4b88      	ldr	r3, [pc, #544]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ea      	bne.n	8003532 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8097 	beq.w	8003698 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b81      	ldr	r3, [pc, #516]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	4b7d      	ldr	r3, [pc, #500]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	4a7c      	ldr	r2, [pc, #496]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	@ 0x40
 800358a:	4b7a      	ldr	r3, [pc, #488]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b77      	ldr	r3, [pc, #476]	@ (8003778 <HAL_RCC_OscConfig+0x474>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a6:	4b74      	ldr	r3, [pc, #464]	@ (8003778 <HAL_RCC_OscConfig+0x474>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a73      	ldr	r2, [pc, #460]	@ (8003778 <HAL_RCC_OscConfig+0x474>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fd01 	bl	8001fb8 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fe fcfd 	bl	8001fb8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e10c      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003778 <HAL_RCC_OscConfig+0x474>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x2ea>
 80035e0:	4b64      	ldr	r3, [pc, #400]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e4:	4a63      	ldr	r2, [pc, #396]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ec:	e01c      	b.n	8003628 <HAL_RCC_OscConfig+0x324>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x30c>
 80035f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 80035fc:	f043 0304 	orr.w	r3, r3, #4
 8003600:	6713      	str	r3, [r2, #112]	@ 0x70
 8003602:	4b5c      	ldr	r3, [pc, #368]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003606:	4a5b      	ldr	r2, [pc, #364]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6713      	str	r3, [r2, #112]	@ 0x70
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0x324>
 8003610:	4b58      	ldr	r3, [pc, #352]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003614:	4a57      	ldr	r2, [pc, #348]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	6713      	str	r3, [r2, #112]	@ 0x70
 800361c:	4b55      	ldr	r3, [pc, #340]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003620:	4a54      	ldr	r2, [pc, #336]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003622:	f023 0304 	bic.w	r3, r3, #4
 8003626:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d015      	beq.n	800365c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fe fcc2 	bl	8001fb8 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7fe fcbe 	bl	8001fb8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e0cb      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364e:	4b49      	ldr	r3, [pc, #292]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0ee      	beq.n	8003638 <HAL_RCC_OscConfig+0x334>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365c:	f7fe fcac 	bl	8001fb8 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003662:	e00a      	b.n	800367a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003664:	f7fe fca8 	bl	8001fb8 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e0b5      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367a:	4b3e      	ldr	r3, [pc, #248]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1ee      	bne.n	8003664 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368c:	4b39      	ldr	r3, [pc, #228]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	4a38      	ldr	r2, [pc, #224]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003696:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80a1 	beq.w	80037e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a2:	4b34      	ldr	r3, [pc, #208]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d05c      	beq.n	8003768 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d141      	bne.n	800373a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b31      	ldr	r3, [pc, #196]	@ (800377c <HAL_RCC_OscConfig+0x478>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fe fc7c 	bl	8001fb8 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fc78 	bl	8001fb8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e087      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	4b27      	ldr	r3, [pc, #156]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	019b      	lsls	r3, r3, #6
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	3b01      	subs	r3, #1
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	491b      	ldr	r1, [pc, #108]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370c:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <HAL_RCC_OscConfig+0x478>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7fe fc51 	bl	8001fb8 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7fe fc4d 	bl	8001fb8 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e05c      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	4b11      	ldr	r3, [pc, #68]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x416>
 8003738:	e054      	b.n	80037e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b10      	ldr	r3, [pc, #64]	@ (800377c <HAL_RCC_OscConfig+0x478>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fe fc3a 	bl	8001fb8 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe fc36 	bl	8001fb8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e045      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <HAL_RCC_OscConfig+0x470>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x444>
 8003766:	e03d      	b.n	80037e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e038      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000
 800377c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003780:	4b1b      	ldr	r3, [pc, #108]	@ (80037f0 <HAL_RCC_OscConfig+0x4ec>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d028      	beq.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d121      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d11a      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d111      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800

080037f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0cc      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003808:	4b68      	ldr	r3, [pc, #416]	@ (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d90c      	bls.n	8003830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b65      	ldr	r3, [pc, #404]	@ (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b63      	ldr	r3, [pc, #396]	@ (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0b8      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d020      	beq.n	800387e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003848:	4b59      	ldr	r3, [pc, #356]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a58      	ldr	r2, [pc, #352]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003852:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003860:	4b53      	ldr	r3, [pc, #332]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a52      	ldr	r2, [pc, #328]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800386a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386c:	4b50      	ldr	r3, [pc, #320]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	494d      	ldr	r1, [pc, #308]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d044      	beq.n	8003914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b47      	ldr	r3, [pc, #284]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d119      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e07f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b2:	4b3f      	ldr	r3, [pc, #252]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e06f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c2:	4b3b      	ldr	r3, [pc, #236]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e067      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d2:	4b37      	ldr	r3, [pc, #220]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4934      	ldr	r1, [pc, #208]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e4:	f7fe fb68 	bl	8001fb8 <HAL_GetTick>
 80038e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ec:	f7fe fb64 	bl	8001fb8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e04f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	4b2b      	ldr	r3, [pc, #172]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 020c 	and.w	r2, r3, #12
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	429a      	cmp	r2, r3
 8003912:	d1eb      	bne.n	80038ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003914:	4b25      	ldr	r3, [pc, #148]	@ (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d20c      	bcs.n	800393c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b22      	ldr	r3, [pc, #136]	@ (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e032      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003948:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4916      	ldr	r1, [pc, #88]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003966:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	490e      	ldr	r1, [pc, #56]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800397a:	f000 f821 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 800397e:	4602      	mov	r2, r0
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	490a      	ldr	r1, [pc, #40]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	5ccb      	ldrb	r3, [r1, r3]
 800398e:	fa22 f303 	lsr.w	r3, r2, r3
 8003992:	4a09      	ldr	r2, [pc, #36]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003996:	4b09      	ldr	r3, [pc, #36]	@ (80039bc <HAL_RCC_ClockConfig+0x1c8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fac8 	bl	8001f30 <HAL_InitTick>

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023c00 	.word	0x40023c00
 80039b0:	40023800 	.word	0x40023800
 80039b4:	08005270 	.word	0x08005270
 80039b8:	20000000 	.word	0x20000000
 80039bc:	20000004 	.word	0x20000004

080039c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c4:	b090      	sub	sp, #64	@ 0x40
 80039c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d8:	4b59      	ldr	r3, [pc, #356]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x180>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d00d      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x40>
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	f200 80a1 	bhi.w	8003b2c <HAL_RCC_GetSysClockFreq+0x16c>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d003      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0x3a>
 80039f2:	e09b      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f4:	4b53      	ldr	r3, [pc, #332]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0x184>)
 80039f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039f8:	e09b      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fa:	4b53      	ldr	r3, [pc, #332]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x188>)
 80039fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039fe:	e098      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a00:	4b4f      	ldr	r3, [pc, #316]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a08:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d028      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a16:	4b4a      	ldr	r3, [pc, #296]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	099b      	lsrs	r3, r3, #6
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4b47      	ldr	r3, [pc, #284]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a2c:	fb03 f201 	mul.w	r2, r3, r1
 8003a30:	2300      	movs	r3, #0
 8003a32:	fb00 f303 	mul.w	r3, r0, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	4a43      	ldr	r2, [pc, #268]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a40:	460a      	mov	r2, r1
 8003a42:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a46:	4413      	add	r3, r2
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	61fa      	str	r2, [r7, #28]
 8003a52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a5a:	f7fc fbbd 	bl	80001d8 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4613      	mov	r3, r2
 8003a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a66:	e053      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a68:	4b35      	ldr	r3, [pc, #212]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	2200      	movs	r2, #0
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	617a      	str	r2, [r7, #20]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a7a:	f04f 0b00 	mov.w	fp, #0
 8003a7e:	4652      	mov	r2, sl
 8003a80:	465b      	mov	r3, fp
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	0159      	lsls	r1, r3, #5
 8003a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a90:	0150      	lsls	r0, r2, #5
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	ebb2 080a 	subs.w	r8, r2, sl
 8003a9a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aaa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003aae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ab2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ab6:	eb63 0509 	sbc.w	r5, r3, r9
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	00eb      	lsls	r3, r5, #3
 8003ac4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ac8:	00e2      	lsls	r2, r4, #3
 8003aca:	4614      	mov	r4, r2
 8003acc:	461d      	mov	r5, r3
 8003ace:	eb14 030a 	adds.w	r3, r4, sl
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	eb45 030b 	adc.w	r3, r5, fp
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	028b      	lsls	r3, r1, #10
 8003aea:	4621      	mov	r1, r4
 8003aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af0:	4621      	mov	r1, r4
 8003af2:	028a      	lsls	r2, r1, #10
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afa:	2200      	movs	r2, #0
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	60fa      	str	r2, [r7, #12]
 8003b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b04:	f7fc fb68 	bl	80001d8 <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b10:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b2a:	e002      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3740      	adds	r7, #64	@ 0x40
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	017d7840 	.word	0x017d7840

08003b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b50:	4b03      	ldr	r3, [pc, #12]	@ (8003b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000000 	.word	0x20000000

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b68:	f7ff fff0 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0a9b      	lsrs	r3, r3, #10
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	@ (8003b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40023800 	.word	0x40023800
 8003b88:	08005280 	.word	0x08005280

08003b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b90:	f7ff ffdc 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0b5b      	lsrs	r3, r3, #13
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	@ (8003bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	08005280 	.word	0x08005280

08003bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e04d      	b.n	8003c62 <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d111      	bne.n	8003bf6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fcdc 	bl	8004598 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a20      	ldr	r2, [pc, #128]	@ (8003c6c <HAL_UART_Init+0xb8>)
 8003bec:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2224      	movs	r2, #36	@ 0x24
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 ffa6 	bl	8004b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	08000a09 	.word	0x08000a09

08003c70 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e07c      	b.n	8003d92 <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d150      	bne.n	8003d46 <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 8003ca4:	7afb      	ldrb	r3, [r7, #11]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d844      	bhi.n	8003d34 <HAL_UART_RegisterCallback+0xc4>
 8003caa:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <HAL_UART_RegisterCallback+0x40>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003ced 	.word	0x08003ced
 8003cb8:	08003cf5 	.word	0x08003cf5
 8003cbc:	08003cfd 	.word	0x08003cfd
 8003cc0:	08003d05 	.word	0x08003d05
 8003cc4:	08003d0d 	.word	0x08003d0d
 8003cc8:	08003d15 	.word	0x08003d15
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003d35 	.word	0x08003d35
 8003cd8:	08003d35 	.word	0x08003d35
 8003cdc:	08003d25 	.word	0x08003d25
 8003ce0:	08003d2d 	.word	0x08003d2d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8003cea:	e051      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003cf2:	e04d      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003cfa:	e049      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003d02:	e045      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003d0a:	e041      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003d12:	e03d      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003d1a:	e039      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003d22:	e035      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003d2a:	e031      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003d32:	e02d      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
        break;
 8003d44:	e024      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8003d52:	7afb      	ldrb	r3, [r7, #11]
 8003d54:	2b0b      	cmp	r3, #11
 8003d56:	d002      	beq.n	8003d5e <HAL_UART_RegisterCallback+0xee>
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d004      	beq.n	8003d66 <HAL_UART_RegisterCallback+0xf6>
 8003d5c:	e007      	b.n	8003d6e <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003d64:	e014      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003d6c:	e010      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
        break;
 8003d7e:	e007      	b.n	8003d90 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop

08003da0 <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d107      	bne.n	8003dc4 <HAL_UART_RegisterRxEventCallback+0x24>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e021      	b.n	8003e08 <HAL_UART_RegisterRxEventCallback+0x68>
  }

  /* Process locked */
  __HAL_LOCK(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_RegisterRxEventCallback+0x32>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e01a      	b.n	8003e08 <HAL_UART_RegisterRxEventCallback+0x68>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (huart->gState == HAL_UART_STATE_READY)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d103      	bne.n	8003dee <HAL_UART_RegisterRxEventCallback+0x4e>
  {
    huart->RxEventCallback = pCallback;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003dec:	e007      	b.n	8003dfe <HAL_UART_RegisterRxEventCallback+0x5e>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44

    status =  HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	@ 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d156      	bne.n	8003edc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_UART_Transmit_DMA+0x26>
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e04f      	b.n	8003ede <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2221      	movs	r2, #33	@ 0x21
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e62:	4a21      	ldr	r2, [pc, #132]	@ (8003ee8 <HAL_UART_Transmit_DMA+0xd4>)
 8003e64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6a:	4a20      	ldr	r2, [pc, #128]	@ (8003eec <HAL_UART_Transmit_DMA+0xd8>)
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef0 <HAL_UART_Transmit_DMA+0xdc>)
 8003e74:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8a:	6819      	ldr	r1, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3304      	adds	r3, #4
 8003e92:	461a      	mov	r2, r3
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	f7fe fa5b 	bl	8002350 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ea2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ec4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e5      	bne.n	8003ea4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3730      	adds	r7, #48	@ 0x30
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	08004609 	.word	0x08004609
 8003eec:	080046a5 	.word	0x080046a5
 8003ef0:	080046c3 	.word	0x080046c3

08003ef4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	@ 0x30
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d14a      	bne.n	8003fa4 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e043      	b.n	8003fa6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fc11 	bl	8004758 <UART_Start_Receive_IT>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d12c      	bne.n	8003f9e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d125      	bne.n	8003f98 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	617b      	str	r3, [r7, #20]
   return(result);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f043 0310 	orr.w	r3, r3, #16
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f82:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6a39      	ldr	r1, [r7, #32]
 8003f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e5      	bne.n	8003f62 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003f96:	e002      	b.n	8003f9e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fa2:	e000      	b.n	8003fa6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3730      	adds	r7, #48	@ 0x30
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_UART_IRQHandler+0x66>
 8004002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fce5 	bl	80049de <UART_Receive_IT>
      return;
 8004014:	e260      	b.n	80044d8 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80e1 	beq.w	80041e2 <HAL_UART_IRQHandler+0x232>
 8004020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800402c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004030:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80d4 	beq.w	80041e2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <HAL_UART_IRQHandler+0xae>
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800404a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f043 0201 	orr.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_UART_IRQHandler+0xd2>
 800406a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f043 0202 	orr.w	r2, r3, #2
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_UART_IRQHandler+0xf6>
 800408e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	f043 0204 	orr.w	r2, r3, #4
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d011      	beq.n	80040d6 <HAL_UART_IRQHandler+0x126>
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d105      	bne.n	80040ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	f043 0208 	orr.w	r2, r3, #8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 81f7 	beq.w	80044ce <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_UART_IRQHandler+0x14e>
 80040ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fc70 	bl	80049de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004108:	2b40      	cmp	r3, #64	@ 0x40
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d103      	bne.n	800412a <HAL_UART_IRQHandler+0x17a>
 8004122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d051      	beq.n	80041ce <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fb76 	bl	800481c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d142      	bne.n	80041c4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3314      	adds	r3, #20
 8004144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800415c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3314      	adds	r3, #20
 8004166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800416a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800416e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1d9      	bne.n	800413e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d013      	beq.n	80041ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004196:	4a80      	ldr	r2, [pc, #512]	@ (8004398 <HAL_UART_IRQHandler+0x3e8>)
 8004198:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe f99e 	bl	80024e0 <HAL_DMA_Abort_IT>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d019      	beq.n	80041de <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041b4:	4610      	mov	r0, r2
 80041b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	e011      	b.n	80041de <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c2:	e00c      	b.n	80041de <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	e007      	b.n	80041de <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041dc:	e177      	b.n	80044ce <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041de:	bf00      	nop
    return;
 80041e0:	e175      	b.n	80044ce <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	f040 8151 	bne.w	800448e <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 814a 	beq.w	800448e <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8143 	beq.w	800448e <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004228:	2b40      	cmp	r3, #64	@ 0x40
 800422a:	f040 80b7 	bne.w	800439c <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800423a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8147 	beq.w	80044d2 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004248:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800424c:	429a      	cmp	r2, r3
 800424e:	f080 8140 	bcs.w	80044d2 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004258:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004264:	f000 8088 	beq.w	8004378 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800427e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004282:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004286:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004294:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1d9      	bne.n	8004268 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e1      	bne.n	80042b4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3314      	adds	r3, #20
 80042f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004300:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004302:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004314:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004316:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800431a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e3      	bne.n	80042f0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004348:	f023 0310 	bic.w	r3, r3, #16
 800434c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800435a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800435c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004360:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e3      	bne.n	8004336 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe f844 	bl	8002400 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 800438a:	b292      	uxth	r2, r2
 800438c:	1a8a      	subs	r2, r1, r2
 800438e:	b292      	uxth	r2, r2
 8004390:	4611      	mov	r1, r2
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004396:	e09c      	b.n	80044d2 <HAL_UART_IRQHandler+0x522>
 8004398:	080048e3 	.word	0x080048e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 808f 	beq.w	80044d6 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 80043b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 808a 	beq.w	80044d6 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80043e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e3      	bne.n	80043c2 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	623b      	str	r3, [r7, #32]
   return(result);
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3314      	adds	r3, #20
 800441a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800441e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e3      	bne.n	80043fa <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0310 	bic.w	r3, r3, #16
 8004456:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004464:	61fa      	str	r2, [r7, #28]
 8004466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	617b      	str	r3, [r7, #20]
   return(result);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e3      	bne.n	8004440 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004482:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8004486:	4611      	mov	r1, r2
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800448c:	e023      	b.n	80044d6 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_UART_IRQHandler+0x4fe>
 800449a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800449e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fa30 	bl	800490c <UART_Transmit_IT>
    return;
 80044ac:	e014      	b.n	80044d8 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00e      	beq.n	80044d8 <HAL_UART_IRQHandler+0x528>
 80044ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa70 	bl	80049ac <UART_EndTransmit_IT>
    return;
 80044cc:	e004      	b.n	80044d8 <HAL_UART_IRQHandler+0x528>
    return;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <HAL_UART_IRQHandler+0x528>
      return;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_UART_IRQHandler+0x528>
      return;
 80044d6:	bf00      	nop
  }
}
 80044d8:	37e8      	adds	r7, #232	@ 0xe8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop

080044e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a10      	ldr	r2, [pc, #64]	@ (80045e4 <UART_InitCallbacksToDefault+0x4c>)
 80045a4:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a0f      	ldr	r2, [pc, #60]	@ (80045e8 <UART_InitCallbacksToDefault+0x50>)
 80045aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0f      	ldr	r2, [pc, #60]	@ (80045ec <UART_InitCallbacksToDefault+0x54>)
 80045b0:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a0e      	ldr	r2, [pc, #56]	@ (80045f0 <UART_InitCallbacksToDefault+0x58>)
 80045b6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a0e      	ldr	r2, [pc, #56]	@ (80045f4 <UART_InitCallbacksToDefault+0x5c>)
 80045bc:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a0d      	ldr	r2, [pc, #52]	@ (80045f8 <UART_InitCallbacksToDefault+0x60>)
 80045c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a0d      	ldr	r2, [pc, #52]	@ (80045fc <UART_InitCallbacksToDefault+0x64>)
 80045c8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004600 <UART_InitCallbacksToDefault+0x68>)
 80045ce:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004604 <UART_InitCallbacksToDefault+0x6c>)
 80045d4:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	080044f5 	.word	0x080044f5
 80045e8:	080044e1 	.word	0x080044e1
 80045ec:	0800451d 	.word	0x0800451d
 80045f0:	08004509 	.word	0x08004509
 80045f4:	08004531 	.word	0x08004531
 80045f8:	08004545 	.word	0x08004545
 80045fc:	08004559 	.word	0x08004559
 8004600:	0800456d 	.word	0x0800456d
 8004604:	08004581 	.word	0x08004581

08004608 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b090      	sub	sp, #64	@ 0x40
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d137      	bne.n	8004694 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004626:	2200      	movs	r2, #0
 8004628:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	623b      	str	r3, [r7, #32]
   return(result);
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004640:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800464a:	633a      	str	r2, [r7, #48]	@ 0x30
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e5      	bne.n	800462a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800465e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	60fb      	str	r3, [r7, #12]
   return(result);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004674:	637b      	str	r3, [r7, #52]	@ 0x34
 8004676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800467e:	61fa      	str	r2, [r7, #28]
 8004680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	617b      	str	r3, [r7, #20]
   return(result);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004692:	e003      	b.n	800469c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8004694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004698:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800469a:	4798      	blx	r3
}
 800469c:	bf00      	nop
 800469e:	3740      	adds	r7, #64	@ 0x40
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	2b80      	cmp	r3, #128	@ 0x80
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b21      	cmp	r3, #33	@ 0x21
 80046f4:	d108      	bne.n	8004708 <UART_DMAError+0x46>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2200      	movs	r2, #0
 8004700:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004702:	68b8      	ldr	r0, [r7, #8]
 8004704:	f000 f862 	bl	80047cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004712:	2b40      	cmp	r3, #64	@ 0x40
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b22      	cmp	r3, #34	@ 0x22
 8004728:	d108      	bne.n	800473c <UART_DMAError+0x7a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004736:	68b8      	ldr	r0, [r7, #8]
 8004738:	f000 f870 	bl	800481c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004740:	f043 0210 	orr.w	r2, r3, #16
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474c:	68b8      	ldr	r0, [r7, #8]
 800474e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2222      	movs	r2, #34	@ 0x22
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800479c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0220 	orr.w	r2, r2, #32
 80047bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b089      	sub	sp, #36	@ 0x24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	61ba      	str	r2, [r7, #24]
 80047f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6979      	ldr	r1, [r7, #20]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	613b      	str	r3, [r7, #16]
   return(result);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e5      	bne.n	80047d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004810:	bf00      	nop
 8004812:	3724      	adds	r7, #36	@ 0x24
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800481c:	b480      	push	{r7}
 800481e:	b095      	sub	sp, #84	@ 0x54
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800483a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004844:	643a      	str	r2, [r7, #64]	@ 0x40
 8004846:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800484a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	61fb      	str	r3, [r7, #28]
   return(result);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800487a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800487e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e5      	bne.n	8004858 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	2b01      	cmp	r3, #1
 8004892:	d119      	bne.n	80048c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f023 0310 	bic.w	r3, r3, #16
 80048aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048b4:	61ba      	str	r2, [r7, #24]
 80048b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6979      	ldr	r1, [r7, #20]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	613b      	str	r3, [r7, #16]
   return(result);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e5      	bne.n	8004894 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048d6:	bf00      	nop
 80048d8:	3754      	adds	r7, #84	@ 0x54
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b21      	cmp	r3, #33	@ 0x21
 800491e:	d13e      	bne.n	800499e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004928:	d114      	bne.n	8004954 <UART_Transmit_IT+0x48>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d110      	bne.n	8004954 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004946:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]
 8004952:	e008      	b.n	8004966 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	1c59      	adds	r1, r3, #1
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6211      	str	r1, [r2, #32]
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4619      	mov	r1, r3
 8004974:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10f      	bne.n	800499a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004988:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004998:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e000      	b.n	80049a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b08c      	sub	sp, #48	@ 0x30
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b22      	cmp	r3, #34	@ 0x22
 80049f0:	f040 80b0 	bne.w	8004b54 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fc:	d117      	bne.n	8004a2e <UART_Receive_IT+0x50>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d113      	bne.n	8004a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	1c9a      	adds	r2, r3, #2
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a2c:	e026      	b.n	8004a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a40:	d007      	beq.n	8004a52 <UART_Receive_IT+0x74>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <UART_Receive_IT+0x82>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e008      	b.n	8004a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d15f      	bne.n	8004b50 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0220 	bic.w	r2, r2, #32
 8004a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d136      	bne.n	8004b44 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	613b      	str	r3, [r7, #16]
   return(result);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 0310 	bic.w	r3, r3, #16
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afc:	623a      	str	r2, [r7, #32]
 8004afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	69f9      	ldr	r1, [r7, #28]
 8004b02:	6a3a      	ldr	r2, [r7, #32]
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e5      	bne.n	8004adc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b10      	cmp	r3, #16
 8004b1c:	d10a      	bne.n	8004b34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
 8004b42:	e003      	b.n	8004b4c <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e002      	b.n	8004b56 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3730      	adds	r7, #48	@ 0x30
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b64:	b0c0      	sub	sp, #256	@ 0x100
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	68d9      	ldr	r1, [r3, #12]
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	ea40 0301 	orr.w	r3, r0, r1
 8004b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bb8:	f021 010c 	bic.w	r1, r1, #12
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	6999      	ldr	r1, [r3, #24]
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	ea40 0301 	orr.w	r3, r0, r1
 8004be6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b8f      	ldr	r3, [pc, #572]	@ (8004e2c <UART_SetConfig+0x2cc>)
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d005      	beq.n	8004c00 <UART_SetConfig+0xa0>
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8004e30 <UART_SetConfig+0x2d0>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d104      	bne.n	8004c0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c00:	f7fe ffc4 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8004c04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c08:	e003      	b.n	8004c12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c0a:	f7fe ffab 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8004c0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1c:	f040 810c 	bne.w	8004e38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c32:	4622      	mov	r2, r4
 8004c34:	462b      	mov	r3, r5
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c42:	4621      	mov	r1, r4
 8004c44:	eb12 0801 	adds.w	r8, r2, r1
 8004c48:	4629      	mov	r1, r5
 8004c4a:	eb43 0901 	adc.w	r9, r3, r1
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c62:	4690      	mov	r8, r2
 8004c64:	4699      	mov	r9, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	eb18 0303 	adds.w	r3, r8, r3
 8004c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c70:	462b      	mov	r3, r5
 8004c72:	eb49 0303 	adc.w	r3, r9, r3
 8004c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c8e:	460b      	mov	r3, r1
 8004c90:	18db      	adds	r3, r3, r3
 8004c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c94:	4613      	mov	r3, r2
 8004c96:	eb42 0303 	adc.w	r3, r2, r3
 8004c9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ca0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ca4:	f7fb fa98 	bl	80001d8 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4b61      	ldr	r3, [pc, #388]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004cae:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	011c      	lsls	r4, r3, #4
 8004cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	1891      	adds	r1, r2, r2
 8004cce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cd0:	415b      	adcs	r3, r3
 8004cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cd8:	4641      	mov	r1, r8
 8004cda:	eb12 0a01 	adds.w	sl, r2, r1
 8004cde:	4649      	mov	r1, r9
 8004ce0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf8:	4692      	mov	sl, r2
 8004cfa:	469b      	mov	fp, r3
 8004cfc:	4643      	mov	r3, r8
 8004cfe:	eb1a 0303 	adds.w	r3, sl, r3
 8004d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d06:	464b      	mov	r3, r9
 8004d08:	eb4b 0303 	adc.w	r3, fp, r3
 8004d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d24:	460b      	mov	r3, r1
 8004d26:	18db      	adds	r3, r3, r3
 8004d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d3a:	f7fb fa4d 	bl	80001d8 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	4b3b      	ldr	r3, [pc, #236]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004d46:	fba3 2301 	umull	r2, r3, r3, r1
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2264      	movs	r2, #100	@ 0x64
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	1acb      	subs	r3, r1, r3
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d5a:	4b36      	ldr	r3, [pc, #216]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d68:	441c      	add	r4, r3
 8004d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	1891      	adds	r1, r2, r2
 8004d82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d84:	415b      	adcs	r3, r3
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	1851      	adds	r1, r2, r1
 8004d90:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d92:	4649      	mov	r1, r9
 8004d94:	414b      	adcs	r3, r1
 8004d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004da4:	4659      	mov	r1, fp
 8004da6:	00cb      	lsls	r3, r1, #3
 8004da8:	4651      	mov	r1, sl
 8004daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dae:	4651      	mov	r1, sl
 8004db0:	00ca      	lsls	r2, r1, #3
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	4642      	mov	r2, r8
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	eb42 0303 	adc.w	r3, r2, r3
 8004dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004de0:	460b      	mov	r3, r1
 8004de2:	18db      	adds	r3, r3, r3
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de6:	4613      	mov	r3, r2
 8004de8:	eb42 0303 	adc.w	r3, r2, r3
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004df2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004df6:	f7fb f9ef 	bl	80001d8 <__aeabi_uldivmod>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004e00:	fba3 1302 	umull	r1, r3, r3, r2
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	2164      	movs	r1, #100	@ 0x64
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	3332      	adds	r3, #50	@ 0x32
 8004e12:	4a08      	ldr	r2, [pc, #32]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	f003 0207 	and.w	r2, r3, #7
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4422      	add	r2, r4
 8004e26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e28:	e106      	b.n	8005038 <UART_SetConfig+0x4d8>
 8004e2a:	bf00      	nop
 8004e2c:	40011000 	.word	0x40011000
 8004e30:	40011400 	.word	0x40011400
 8004e34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	1891      	adds	r1, r2, r2
 8004e50:	6239      	str	r1, [r7, #32]
 8004e52:	415b      	adcs	r3, r3
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	1854      	adds	r4, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb43 0501 	adc.w	r5, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	00eb      	lsls	r3, r5, #3
 8004e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e72:	00e2      	lsls	r2, r4, #3
 8004e74:	4614      	mov	r4, r2
 8004e76:	461d      	mov	r5, r3
 8004e78:	4643      	mov	r3, r8
 8004e7a:	18e3      	adds	r3, r4, r3
 8004e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e80:	464b      	mov	r3, r9
 8004e82:	eb45 0303 	adc.w	r3, r5, r3
 8004e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	008b      	lsls	r3, r1, #2
 8004eaa:	4621      	mov	r1, r4
 8004eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	008a      	lsls	r2, r1, #2
 8004eb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004eb8:	f7fb f98e 	bl	80001d8 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4b60      	ldr	r3, [pc, #384]	@ (8005044 <UART_SetConfig+0x4e4>)
 8004ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	011c      	lsls	r4, r3, #4
 8004eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ed4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ed8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	1891      	adds	r1, r2, r2
 8004ee2:	61b9      	str	r1, [r7, #24]
 8004ee4:	415b      	adcs	r3, r3
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eec:	4641      	mov	r1, r8
 8004eee:	1851      	adds	r1, r2, r1
 8004ef0:	6139      	str	r1, [r7, #16]
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	414b      	adcs	r3, r1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f04:	4659      	mov	r1, fp
 8004f06:	00cb      	lsls	r3, r1, #3
 8004f08:	4651      	mov	r1, sl
 8004f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0e:	4651      	mov	r1, sl
 8004f10:	00ca      	lsls	r2, r1, #3
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	4642      	mov	r2, r8
 8004f1a:	189b      	adds	r3, r3, r2
 8004f1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f20:	464b      	mov	r3, r9
 8004f22:	460a      	mov	r2, r1
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f44:	4649      	mov	r1, r9
 8004f46:	008b      	lsls	r3, r1, #2
 8004f48:	4641      	mov	r1, r8
 8004f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f4e:	4641      	mov	r1, r8
 8004f50:	008a      	lsls	r2, r1, #2
 8004f52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f56:	f7fb f93f 	bl	80001d8 <__aeabi_uldivmod>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4b38      	ldr	r3, [pc, #224]	@ (8005044 <UART_SetConfig+0x4e4>)
 8004f62:	fba3 2301 	umull	r2, r3, r3, r1
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2264      	movs	r2, #100	@ 0x64
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	1acb      	subs	r3, r1, r3
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	3332      	adds	r3, #50	@ 0x32
 8004f74:	4a33      	ldr	r2, [pc, #204]	@ (8005044 <UART_SetConfig+0x4e4>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f80:	441c      	add	r4, r3
 8004f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f86:	2200      	movs	r2, #0
 8004f88:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	1891      	adds	r1, r2, r2
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	415b      	adcs	r3, r3
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	1851      	adds	r1, r2, r1
 8004fa4:	6039      	str	r1, [r7, #0]
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	414b      	adcs	r3, r1
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fb8:	4659      	mov	r1, fp
 8004fba:	00cb      	lsls	r3, r1, #3
 8004fbc:	4651      	mov	r1, sl
 8004fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc2:	4651      	mov	r1, sl
 8004fc4:	00ca      	lsls	r2, r1, #3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4642      	mov	r2, r8
 8004fce:	189b      	adds	r3, r3, r2
 8004fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	eb42 0303 	adc.w	r3, r2, r3
 8004fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fe6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	008b      	lsls	r3, r1, #2
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffe:	4641      	mov	r1, r8
 8005000:	008a      	lsls	r2, r1, #2
 8005002:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005006:	f7fb f8e7 	bl	80001d8 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <UART_SetConfig+0x4e4>)
 8005010:	fba3 1302 	umull	r1, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2164      	movs	r1, #100	@ 0x64
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	3332      	adds	r3, #50	@ 0x32
 8005022:	4a08      	ldr	r2, [pc, #32]	@ (8005044 <UART_SetConfig+0x4e4>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	f003 020f 	and.w	r2, r3, #15
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4422      	add	r2, r4
 8005036:	609a      	str	r2, [r3, #8]
}
 8005038:	bf00      	nop
 800503a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800503e:	46bd      	mov	sp, r7
 8005040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005044:	51eb851f 	.word	0x51eb851f

08005048 <malloc>:
 8005048:	4b02      	ldr	r3, [pc, #8]	@ (8005054 <malloc+0xc>)
 800504a:	4601      	mov	r1, r0
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f000 b825 	b.w	800509c <_malloc_r>
 8005052:	bf00      	nop
 8005054:	2000000c 	.word	0x2000000c

08005058 <sbrk_aligned>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	4e0f      	ldr	r6, [pc, #60]	@ (8005098 <sbrk_aligned+0x40>)
 800505c:	460c      	mov	r4, r1
 800505e:	6831      	ldr	r1, [r6, #0]
 8005060:	4605      	mov	r5, r0
 8005062:	b911      	cbnz	r1, 800506a <sbrk_aligned+0x12>
 8005064:	f000 f8ae 	bl	80051c4 <_sbrk_r>
 8005068:	6030      	str	r0, [r6, #0]
 800506a:	4621      	mov	r1, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f8a9 	bl	80051c4 <_sbrk_r>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	d103      	bne.n	800507e <sbrk_aligned+0x26>
 8005076:	f04f 34ff 	mov.w	r4, #4294967295
 800507a:	4620      	mov	r0, r4
 800507c:	bd70      	pop	{r4, r5, r6, pc}
 800507e:	1cc4      	adds	r4, r0, #3
 8005080:	f024 0403 	bic.w	r4, r4, #3
 8005084:	42a0      	cmp	r0, r4
 8005086:	d0f8      	beq.n	800507a <sbrk_aligned+0x22>
 8005088:	1a21      	subs	r1, r4, r0
 800508a:	4628      	mov	r0, r5
 800508c:	f000 f89a 	bl	80051c4 <_sbrk_r>
 8005090:	3001      	adds	r0, #1
 8005092:	d1f2      	bne.n	800507a <sbrk_aligned+0x22>
 8005094:	e7ef      	b.n	8005076 <sbrk_aligned+0x1e>
 8005096:	bf00      	nop
 8005098:	2000064c 	.word	0x2000064c

0800509c <_malloc_r>:
 800509c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a0:	1ccd      	adds	r5, r1, #3
 80050a2:	f025 0503 	bic.w	r5, r5, #3
 80050a6:	3508      	adds	r5, #8
 80050a8:	2d0c      	cmp	r5, #12
 80050aa:	bf38      	it	cc
 80050ac:	250c      	movcc	r5, #12
 80050ae:	2d00      	cmp	r5, #0
 80050b0:	4606      	mov	r6, r0
 80050b2:	db01      	blt.n	80050b8 <_malloc_r+0x1c>
 80050b4:	42a9      	cmp	r1, r5
 80050b6:	d904      	bls.n	80050c2 <_malloc_r+0x26>
 80050b8:	230c      	movs	r3, #12
 80050ba:	6033      	str	r3, [r6, #0]
 80050bc:	2000      	movs	r0, #0
 80050be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005198 <_malloc_r+0xfc>
 80050c6:	f000 f869 	bl	800519c <__malloc_lock>
 80050ca:	f8d8 3000 	ldr.w	r3, [r8]
 80050ce:	461c      	mov	r4, r3
 80050d0:	bb44      	cbnz	r4, 8005124 <_malloc_r+0x88>
 80050d2:	4629      	mov	r1, r5
 80050d4:	4630      	mov	r0, r6
 80050d6:	f7ff ffbf 	bl	8005058 <sbrk_aligned>
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	4604      	mov	r4, r0
 80050de:	d158      	bne.n	8005192 <_malloc_r+0xf6>
 80050e0:	f8d8 4000 	ldr.w	r4, [r8]
 80050e4:	4627      	mov	r7, r4
 80050e6:	2f00      	cmp	r7, #0
 80050e8:	d143      	bne.n	8005172 <_malloc_r+0xd6>
 80050ea:	2c00      	cmp	r4, #0
 80050ec:	d04b      	beq.n	8005186 <_malloc_r+0xea>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	4639      	mov	r1, r7
 80050f2:	4630      	mov	r0, r6
 80050f4:	eb04 0903 	add.w	r9, r4, r3
 80050f8:	f000 f864 	bl	80051c4 <_sbrk_r>
 80050fc:	4581      	cmp	r9, r0
 80050fe:	d142      	bne.n	8005186 <_malloc_r+0xea>
 8005100:	6821      	ldr	r1, [r4, #0]
 8005102:	1a6d      	subs	r5, r5, r1
 8005104:	4629      	mov	r1, r5
 8005106:	4630      	mov	r0, r6
 8005108:	f7ff ffa6 	bl	8005058 <sbrk_aligned>
 800510c:	3001      	adds	r0, #1
 800510e:	d03a      	beq.n	8005186 <_malloc_r+0xea>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	442b      	add	r3, r5
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	f8d8 3000 	ldr.w	r3, [r8]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	bb62      	cbnz	r2, 8005178 <_malloc_r+0xdc>
 800511e:	f8c8 7000 	str.w	r7, [r8]
 8005122:	e00f      	b.n	8005144 <_malloc_r+0xa8>
 8005124:	6822      	ldr	r2, [r4, #0]
 8005126:	1b52      	subs	r2, r2, r5
 8005128:	d420      	bmi.n	800516c <_malloc_r+0xd0>
 800512a:	2a0b      	cmp	r2, #11
 800512c:	d917      	bls.n	800515e <_malloc_r+0xc2>
 800512e:	1961      	adds	r1, r4, r5
 8005130:	42a3      	cmp	r3, r4
 8005132:	6025      	str	r5, [r4, #0]
 8005134:	bf18      	it	ne
 8005136:	6059      	strne	r1, [r3, #4]
 8005138:	6863      	ldr	r3, [r4, #4]
 800513a:	bf08      	it	eq
 800513c:	f8c8 1000 	streq.w	r1, [r8]
 8005140:	5162      	str	r2, [r4, r5]
 8005142:	604b      	str	r3, [r1, #4]
 8005144:	4630      	mov	r0, r6
 8005146:	f000 f82f 	bl	80051a8 <__malloc_unlock>
 800514a:	f104 000b 	add.w	r0, r4, #11
 800514e:	1d23      	adds	r3, r4, #4
 8005150:	f020 0007 	bic.w	r0, r0, #7
 8005154:	1ac2      	subs	r2, r0, r3
 8005156:	bf1c      	itt	ne
 8005158:	1a1b      	subne	r3, r3, r0
 800515a:	50a3      	strne	r3, [r4, r2]
 800515c:	e7af      	b.n	80050be <_malloc_r+0x22>
 800515e:	6862      	ldr	r2, [r4, #4]
 8005160:	42a3      	cmp	r3, r4
 8005162:	bf0c      	ite	eq
 8005164:	f8c8 2000 	streq.w	r2, [r8]
 8005168:	605a      	strne	r2, [r3, #4]
 800516a:	e7eb      	b.n	8005144 <_malloc_r+0xa8>
 800516c:	4623      	mov	r3, r4
 800516e:	6864      	ldr	r4, [r4, #4]
 8005170:	e7ae      	b.n	80050d0 <_malloc_r+0x34>
 8005172:	463c      	mov	r4, r7
 8005174:	687f      	ldr	r7, [r7, #4]
 8005176:	e7b6      	b.n	80050e6 <_malloc_r+0x4a>
 8005178:	461a      	mov	r2, r3
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	42a3      	cmp	r3, r4
 800517e:	d1fb      	bne.n	8005178 <_malloc_r+0xdc>
 8005180:	2300      	movs	r3, #0
 8005182:	6053      	str	r3, [r2, #4]
 8005184:	e7de      	b.n	8005144 <_malloc_r+0xa8>
 8005186:	230c      	movs	r3, #12
 8005188:	6033      	str	r3, [r6, #0]
 800518a:	4630      	mov	r0, r6
 800518c:	f000 f80c 	bl	80051a8 <__malloc_unlock>
 8005190:	e794      	b.n	80050bc <_malloc_r+0x20>
 8005192:	6005      	str	r5, [r0, #0]
 8005194:	e7d6      	b.n	8005144 <_malloc_r+0xa8>
 8005196:	bf00      	nop
 8005198:	20000650 	.word	0x20000650

0800519c <__malloc_lock>:
 800519c:	4801      	ldr	r0, [pc, #4]	@ (80051a4 <__malloc_lock+0x8>)
 800519e:	f000 b84b 	b.w	8005238 <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	20000790 	.word	0x20000790

080051a8 <__malloc_unlock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	@ (80051b0 <__malloc_unlock+0x8>)
 80051aa:	f000 b846 	b.w	800523a <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	20000790 	.word	0x20000790

080051b4 <memset>:
 80051b4:	4402      	add	r2, r0
 80051b6:	4603      	mov	r3, r0
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d100      	bne.n	80051be <memset+0xa>
 80051bc:	4770      	bx	lr
 80051be:	f803 1b01 	strb.w	r1, [r3], #1
 80051c2:	e7f9      	b.n	80051b8 <memset+0x4>

080051c4 <_sbrk_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d06      	ldr	r5, [pc, #24]	@ (80051e0 <_sbrk_r+0x1c>)
 80051c8:	2300      	movs	r3, #0
 80051ca:	4604      	mov	r4, r0
 80051cc:	4608      	mov	r0, r1
 80051ce:	602b      	str	r3, [r5, #0]
 80051d0:	f7fb fd1e 	bl	8000c10 <_sbrk>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_sbrk_r+0x1a>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	b103      	cbz	r3, 80051de <_sbrk_r+0x1a>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	2000078c 	.word	0x2000078c

080051e4 <__errno>:
 80051e4:	4b01      	ldr	r3, [pc, #4]	@ (80051ec <__errno+0x8>)
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	2000000c 	.word	0x2000000c

080051f0 <__libc_init_array>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005228 <__libc_init_array+0x38>)
 80051f4:	4c0d      	ldr	r4, [pc, #52]	@ (800522c <__libc_init_array+0x3c>)
 80051f6:	1b64      	subs	r4, r4, r5
 80051f8:	10a4      	asrs	r4, r4, #2
 80051fa:	2600      	movs	r6, #0
 80051fc:	42a6      	cmp	r6, r4
 80051fe:	d109      	bne.n	8005214 <__libc_init_array+0x24>
 8005200:	4d0b      	ldr	r5, [pc, #44]	@ (8005230 <__libc_init_array+0x40>)
 8005202:	4c0c      	ldr	r4, [pc, #48]	@ (8005234 <__libc_init_array+0x44>)
 8005204:	f000 f828 	bl	8005258 <_init>
 8005208:	1b64      	subs	r4, r4, r5
 800520a:	10a4      	asrs	r4, r4, #2
 800520c:	2600      	movs	r6, #0
 800520e:	42a6      	cmp	r6, r4
 8005210:	d105      	bne.n	800521e <__libc_init_array+0x2e>
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	f855 3b04 	ldr.w	r3, [r5], #4
 8005218:	4798      	blx	r3
 800521a:	3601      	adds	r6, #1
 800521c:	e7ee      	b.n	80051fc <__libc_init_array+0xc>
 800521e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005222:	4798      	blx	r3
 8005224:	3601      	adds	r6, #1
 8005226:	e7f2      	b.n	800520e <__libc_init_array+0x1e>
 8005228:	080052a8 	.word	0x080052a8
 800522c:	080052a8 	.word	0x080052a8
 8005230:	080052a8 	.word	0x080052a8
 8005234:	080052ac 	.word	0x080052ac

08005238 <__retarget_lock_acquire_recursive>:
 8005238:	4770      	bx	lr

0800523a <__retarget_lock_release_recursive>:
 800523a:	4770      	bx	lr

0800523c <memcpy>:
 800523c:	440a      	add	r2, r1
 800523e:	4291      	cmp	r1, r2
 8005240:	f100 33ff 	add.w	r3, r0, #4294967295
 8005244:	d100      	bne.n	8005248 <memcpy+0xc>
 8005246:	4770      	bx	lr
 8005248:	b510      	push	{r4, lr}
 800524a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800524e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005252:	4291      	cmp	r1, r2
 8005254:	d1f9      	bne.n	800524a <memcpy+0xe>
 8005256:	bd10      	pop	{r4, pc}

08005258 <_init>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	bf00      	nop
 800525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525e:	bc08      	pop	{r3}
 8005260:	469e      	mov	lr, r3
 8005262:	4770      	bx	lr

08005264 <_fini>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	bf00      	nop
 8005268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526a:	bc08      	pop	{r3}
 800526c:	469e      	mov	lr, r3
 800526e:	4770      	bx	lr
