
Modbus_Rtu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004754  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080048ec  080048ec  000058ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800491c  0800491c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800491c  0800491c  0000591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004924  08004924  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004924  08004924  00005924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800492c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000005c  08004988  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08004988  00006374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acee  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df8  00000000  00000000  00010d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00012b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000670  00000000  00000000  000133f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d0d  00000000  00000000  00013a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b51a  00000000  00000000  00029775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864d6  00000000  00000000  00034c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e0  00000000  00000000  000bb1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000bd688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080048d4 	.word	0x080048d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	080048d4 	.word	0x080048d4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <UART1_RxEventCallback>:
UART_HandleTypeDef *uart;

HoldingRegs_t *Hregs;
InputRegs_t *Iregs;

void UART1_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	807b      	strh	r3, [r7, #2]
	MB.RX_LEN = Size;
 80004d4:	4a04      	ldr	r2, [pc, #16]	@ (80004e8 <UART1_RxEventCallback+0x20>)
 80004d6:	887b      	ldrh	r3, [r7, #2]
 80004d8:	8653      	strh	r3, [r2, #50]	@ 0x32
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000078 	.word	0x20000078

080004ec <UART1_TxCpltCallback>:

void UART1_TxCpltCallback(UART_HandleTypeDef *huart) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	MB_Slave_TX_Complete(&MB);
 80004f4:	4803      	ldr	r0, [pc, #12]	@ (8000504 <UART1_TxCpltCallback+0x18>)
 80004f6:	f001 f8e7 	bl	80016c8 <MB_Slave_TX_Complete>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000078 	.word	0x20000078

08000508 <UART1_ErrorCallback>:

void UART1_ErrorCallback(UART_HandleTypeDef *huart) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	MB.hw_interface.MB_StartListening();
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <UART1_ErrorCallback+0x18>)
 8000512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000514:	4798      	blx	r3
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000078 	.word	0x20000078

08000524 <MB_Transmit_Data>:

// Wrapper function to transmit data over UART1
MB_Status_t MB_Transmit_Data(uint8_t *data, uint16_t Len) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Transmit_DMA(uart, data, Len) == HAL_OK ?
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <MB_Transmit_Data+0x30>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	887a      	ldrh	r2, [r7, #2]
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	4618      	mov	r0, r3
 800053a:	f002 ffa9 	bl	8003490 <HAL_UART_Transmit_DMA>
 800053e:	4603      	mov	r3, r0
			MB_STAT_OK : MB_TX_ERR_HW;
 8000540:	2b00      	cmp	r3, #0
 8000542:	d101      	bne.n	8000548 <MB_Transmit_Data+0x24>
 8000544:	2300      	movs	r3, #0
 8000546:	e000      	b.n	800054a <MB_Transmit_Data+0x26>
 8000548:	2307      	movs	r3, #7
}
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200000e0 	.word	0x200000e0

08000558 <MB_Activate_TX>:

// Wrapper function to switch the system to transmit mode (necessary for RS485 2-wire mode)
MB_Status_t MB_Activate_TX(uint8_t TXON) {
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	// Control the RS485 TX enable pin (if applicable)
	// Not used because we use RS232
	// HAL_GPIO_WritePin(MODBUS_TXEN_GPIO_Port, MODBUS_TXEN_Pin, TXON ? GPIO_PIN_SET : GPIO_PIN_RESET);
	return MB_STAT_OK;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <MB_StartListening>:

// Wrapper function used to start listening to the UART1 bus
MB_Status_t MB_StartListening() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	// Start receiving data either until the buffer is filled or the data stream is finished (data line returns to idle)
	HAL_UARTEx_ReceiveToIdle_IT(uart, MB.RxBuffer, MB.TX_RX_Buffer_Size);
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <MB_StartListening+0x1c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <MB_StartListening+0x20>)
 800057a:	6891      	ldr	r1, [r2, #8]
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <MB_StartListening+0x20>)
 800057e:	8992      	ldrh	r2, [r2, #12]
 8000580:	4618      	mov	r0, r3
 8000582:	f002 fff5 	bl	8003570 <HAL_UARTEx_ReceiveToIdle_IT>
	return MB_STAT_OK;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200000e0 	.word	0x200000e0
 8000590:	20000078 	.word	0x20000078

08000594 <MB_Request_Recieved>:

// Callback function when a master sends a request (to read or write data)
// The user can implement custom logic here. After the function exits, the Modbus reply will be automatically issued.
// Callback function when a master sends a request (to read or write data)
MB_Status_t MB_Request_Recieved(void *ptr) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    MB_Slave_t *mb = (MB_Slave_t*) ptr;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60fb      	str	r3, [r7, #12]



    return MB_STAT_OK;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <MB_Init_UART1>:

// Initialize Modbus for UART1

MB_Status_t MB_Init_UART1(UART_HandleTypeDef *huart, uint8_t SLA) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	70fb      	strb	r3, [r7, #3]
	uart = huart;
 80005bc:	4a29      	ldr	r2, [pc, #164]	@ (8000664 <MB_Init_UART1+0xb4>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]

	// Register the UART1 callbacks
	HAL_UART_RegisterRxEventCallback(huart, UART1_RxEventCallback);
 80005c2:	4929      	ldr	r1, [pc, #164]	@ (8000668 <MB_Init_UART1+0xb8>)
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f002 ff29 	bl	800341c <HAL_UART_RegisterRxEventCallback>
	HAL_UART_RegisterCallback(huart, HAL_UART_TX_COMPLETE_CB_ID,
 80005ca:	4a28      	ldr	r2, [pc, #160]	@ (800066c <MB_Init_UART1+0xbc>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f002 fe8c 	bl	80032ec <HAL_UART_RegisterCallback>
			UART1_TxCpltCallback);
	HAL_UART_RegisterCallback(huart, HAL_UART_ERROR_CB_ID, UART1_ErrorCallback);
 80005d4:	4a26      	ldr	r2, [pc, #152]	@ (8000670 <MB_Init_UART1+0xc0>)
 80005d6:	2104      	movs	r1, #4
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f002 fe87 	bl	80032ec <HAL_UART_RegisterCallback>

	// Set buffer size
	MB.TX_RX_Buffer_Size = 256; // Set the buffer size to 256 bytes
 80005de:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <MB_Init_UART1+0xc4>)
 80005e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e4:	819a      	strh	r2, [r3, #12]

	// Set the size of holding and input registers
	MB.HoldingRegSize = HoldingRegsSize;  // size from Modbuse reg map
 80005e6:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <MB_Init_UART1+0xc4>)
 80005e8:	2282      	movs	r2, #130	@ 0x82
 80005ea:	821a      	strh	r2, [r3, #16]
	MB.InputRegSize = InputRegsSize;    // size from Modbuse reg map
 80005ec:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MB_Init_UART1+0xc4>)
 80005ee:	2224      	movs	r2, #36	@ 0x24
 80005f0:	835a      	strh	r2, [r3, #26]


	// Set the size of input bits and coil bits
	MB.InputBitsSize = 2;    // 2 bytes for input bits (16 bits)
 80005f2:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <MB_Init_UART1+0xc4>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	845a      	strh	r2, [r3, #34]	@ 0x22
	MB.CoilBitsSize = 2;     // 2 bytes for coil bits (16 bits)
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MB_Init_UART1+0xc4>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

	// Assign the function pointers
	MB.hw_interface.MB_Activate_TX = &MB_Activate_TX;
 80005fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MB_Init_UART1+0xc4>)
 8000600:	4a1d      	ldr	r2, [pc, #116]	@ (8000678 <MB_Init_UART1+0xc8>)
 8000602:	641a      	str	r2, [r3, #64]	@ 0x40
	MB.hw_interface.MB_Transmit = &MB_Transmit_Data;
 8000604:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MB_Init_UART1+0xc4>)
 8000606:	4a1d      	ldr	r2, [pc, #116]	@ (800067c <MB_Init_UART1+0xcc>)
 8000608:	639a      	str	r2, [r3, #56]	@ 0x38
	MB.hw_interface.MB_StartListening = &MB_StartListening;
 800060a:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MB_Init_UART1+0xc4>)
 800060c:	4a1c      	ldr	r2, [pc, #112]	@ (8000680 <MB_Init_UART1+0xd0>)
 800060e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MB.hw_interface.MB_Request_Recieved = &MB_Request_Recieved; // Corrected to use MB_Request_Recieved
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MB_Init_UART1+0xc4>)
 8000612:	4a1c      	ldr	r2, [pc, #112]	@ (8000684 <MB_Init_UART1+0xd4>)
 8000614:	645a      	str	r2, [r3, #68]	@ 0x44

	// Set the slave address
	MB.SLA = SLA;
 8000616:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <MB_Init_UART1+0xc4>)
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	7013      	strb	r3, [r2, #0]

	// Configure transmission and reception settings
	MB.TX_Automplete = 1; // Disable auto-complete for TX (manual control)
 800061c:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <MB_Init_UART1+0xc4>)
 800061e:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
	MB.RX_Silent_Interval_MS = 2; // Silent interval between messages (2 ms)
 800062a:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MB_Init_UART1+0xc4>)
 800062c:	2202      	movs	r2, #2
 800062e:	869a      	strh	r2, [r3, #52]	@ 0x34
	MB.RX_Timeout = 100; // Timeout for receiving messages (100 ms)
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MB_Init_UART1+0xc4>)
 8000632:	2264      	movs	r2, #100	@ 0x64
 8000634:	86da      	strh	r2, [r3, #54]	@ 0x36



	// Switch to listen mode
	MB.hw_interface.MB_Activate_TX(0);
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MB_Init_UART1+0xc4>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063a:	2000      	movs	r0, #0
 800063c:	4798      	blx	r3

	// Initialize the Modbus slave
	uint8_t Ret= MB_Slave_Init(&MB);
 800063e:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MB_Init_UART1+0xc4>)
 8000640:	f000 fc67 	bl	8000f12 <MB_Slave_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	73fb      	strb	r3, [r7, #15]


	 Hregs=(HoldingRegs_t*)MB.HoldingRegs;
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <MB_Init_UART1+0xc4>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <MB_Init_UART1+0xd8>)
 800064e:	6013      	str	r3, [r2, #0]
	 Iregs=(InputRegs_t*)MB.InputRegs;
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MB_Init_UART1+0xc4>)
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <MB_Init_UART1+0xdc>)
 8000656:	6013      	str	r3, [r2, #0]

	 return Ret;
 8000658:	7bfb      	ldrb	r3, [r7, #15]

}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000e0 	.word	0x200000e0
 8000668:	080004c9 	.word	0x080004c9
 800066c:	080004ed 	.word	0x080004ed
 8000670:	08000509 	.word	0x08000509
 8000674:	20000078 	.word	0x20000078
 8000678:	08000559 	.word	0x08000559
 800067c:	08000525 	.word	0x08000525
 8000680:	08000571 	.word	0x08000571
 8000684:	08000595 	.word	0x08000595
 8000688:	200000e4 	.word	0x200000e4
 800068c:	200000e8 	.word	0x200000e8

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f001 fa4f 	bl	8001b38 <HAL_Init>
  float test4;
  float test5;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f83f 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f8f7 	bl	8000890 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a2:	f000 f8cd 	bl	8000840 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006a6:	f000 f8a1 	bl	80007ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MB_Init_UART1(&huart1, 0x1);
 80006aa:	2101      	movs	r1, #1
 80006ac:	4818      	ldr	r0, [pc, #96]	@ (8000710 <main+0x80>)
 80006ae:	f7ff ff7f 	bl	80005b0 <MB_Init_UART1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MB_Slave_Routine(&MB, HAL_GetTick());
 80006b2:	f001 faa7 	bl	8001c04 <HAL_GetTick>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4619      	mov	r1, r3
 80006ba:	4816      	ldr	r0, [pc, #88]	@ (8000714 <main+0x84>)
 80006bc:	f000 fcd2 	bl	8001064 <MB_Slave_Routine>
//testing for holding reg to see if the addresse are aligend
		test1=Hregs->sParams.Iq_Kp;//add start 0 which means qmod_add 1
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <main+0x88>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	617b      	str	r3, [r7, #20]
		test2=Hregs->sParams.Idq_Filter_Const;//add start 10 qmod_add 11
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <main+0x88>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	613b      	str	r3, [r7, #16]
		test3=Hregs->sParams.Checksum;//add start 38  qmod_add 39
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <main+0x88>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006e0:	edc7 7a03 	vstr	s15, [r7, #12]
		test4=Hregs->System_State;//add start 128 at qmod_add 129
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <main+0x88>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f4:	edc7 7a02 	vstr	s15, [r7, #8]
		test5=Hregs->FOC_State_Machine;//add start 130 at qmod_add 131
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <main+0x88>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8000700:	ee07 3a90 	vmov	s15, r3
 8000704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000708:	edc7 7a01 	vstr	s15, [r7, #4]
		MB_Slave_Routine(&MB, HAL_GetTick());
 800070c:	bf00      	nop
 800070e:	e7d0      	b.n	80006b2 <main+0x22>
 8000710:	200000ec 	.word	0x200000ec
 8000714:	20000078 	.word	0x20000078
 8000718:	200000e4 	.word	0x200000e4

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	@ 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f004 f880 	bl	8004830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <SystemClock_Config+0xc8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a26      	ldr	r2, [pc, #152]	@ (80007e4 <SystemClock_Config+0xc8>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <SystemClock_Config+0xc8>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <SystemClock_Config+0xcc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a20      	ldr	r2, [pc, #128]	@ (80007e8 <SystemClock_Config+0xcc>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <SystemClock_Config+0xcc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000790:	2354      	movs	r3, #84	@ 0x54
 8000792:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 f8ed 	bl	8002980 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 f8c2 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2102      	movs	r1, #2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fb4f 	bl	8002e70 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007d8:	f000 f8ac 	bl	8000934 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	@ 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_USART1_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	@ (800083c <MX_USART1_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_USART1_UART_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_USART1_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_USART1_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_USART1_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_USART1_UART_Init+0x4c>)
 8000824:	f002 fd04 	bl	8003230 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f000 f881 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000ec 	.word	0x200000ec
 800083c:	40011000 	.word	0x40011000

08000840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_DMA_Init+0x4c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a0f      	ldr	r2, [pc, #60]	@ (800088c <MX_DMA_Init+0x4c>)
 8000850:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <MX_DMA_Init+0x4c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	203a      	movs	r0, #58	@ 0x3a
 8000868:	f001 fab3 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800086c:	203a      	movs	r0, #58	@ 0x3a
 800086e:	f001 facc 	bl	8001e0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2046      	movs	r0, #70	@ 0x46
 8000878:	f001 faab 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800087c:	2046      	movs	r0, #70	@ 0x46
 800087e:	f001 fac4 	bl	8001e0a <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <MX_GPIO_Init+0x9c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a1f      	ldr	r2, [pc, #124]	@ (800092c <MX_GPIO_Init+0x9c>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_GPIO_Init+0x9c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_GPIO_Init+0x9c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a18      	ldr	r2, [pc, #96]	@ (800092c <MX_GPIO_Init+0x9c>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_GPIO_Init+0x9c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_GPIO_Init+0x9c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a11      	ldr	r2, [pc, #68]	@ (800092c <MX_GPIO_Init+0x9c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_GPIO_Init+0x9c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <MX_GPIO_Init+0xa0>)
 8000902:	f002 f823 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_GPIO_Init+0xa0>)
 8000920:	f001 fe90 	bl	8002644 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020800 	.word	0x40020800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a4c      	ldr	r2, [pc, #304]	@ (8000ae0 <HAL_UART_MspInit+0x150>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	f040 8091 	bne.w	8000ad6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae4 <HAL_UART_MspInit+0x154>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009bc:	4a49      	ldr	r2, [pc, #292]	@ (8000ae4 <HAL_UART_MspInit+0x154>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c4:	4b47      	ldr	r3, [pc, #284]	@ (8000ae4 <HAL_UART_MspInit+0x154>)
 80009c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4b43      	ldr	r3, [pc, #268]	@ (8000ae4 <HAL_UART_MspInit+0x154>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d8:	4a42      	ldr	r2, [pc, #264]	@ (8000ae4 <HAL_UART_MspInit+0x154>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e0:	4b40      	ldr	r3, [pc, #256]	@ (8000ae4 <HAL_UART_MspInit+0x154>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fe:	2307      	movs	r3, #7
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4837      	ldr	r0, [pc, #220]	@ (8000ae8 <HAL_UART_MspInit+0x158>)
 8000a0a:	f001 fe1b 	bl	8002644 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a0e:	4b37      	ldr	r3, [pc, #220]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a10:	4a37      	ldr	r2, [pc, #220]	@ (8000af0 <HAL_UART_MspInit+0x160>)
 8000a12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a14:	4b35      	ldr	r3, [pc, #212]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a1c:	4b33      	ldr	r3, [pc, #204]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a22:	4b32      	ldr	r3, [pc, #200]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a28:	4b30      	ldr	r3, [pc, #192]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a30:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a36:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a42:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a48:	4b28      	ldr	r3, [pc, #160]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a4e:	4827      	ldr	r0, [pc, #156]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a50:	f001 f9f6 	bl	8001e40 <HAL_DMA_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000a5a:	f7ff ff6b 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a22      	ldr	r2, [pc, #136]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a64:	4a21      	ldr	r2, [pc, #132]	@ (8000aec <HAL_UART_MspInit+0x15c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000a6a:	4b22      	ldr	r3, [pc, #136]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000a6c:	4a22      	ldr	r2, [pc, #136]	@ (8000af8 <HAL_UART_MspInit+0x168>)
 8000a6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000a70:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000a72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a76:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000a7a:	2240      	movs	r2, #64	@ 0x40
 8000a7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a92:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000aaa:	4812      	ldr	r0, [pc, #72]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000aac:	f001 f9c8 	bl	8001e40 <HAL_DMA_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000ab6:	f7ff ff3d 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000abe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8000af4 <HAL_UART_MspInit+0x164>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2025      	movs	r0, #37	@ 0x25
 8000acc:	f001 f981 	bl	8001dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ad0:	2025      	movs	r0, #37	@ 0x25
 8000ad2:	f001 f99a 	bl	8001e0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	@ 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	20000164 	.word	0x20000164
 8000af0:	40026440 	.word	0x40026440
 8000af4:	200001c4 	.word	0x200001c4
 8000af8:	400264b8 	.word	0x400264b8

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b52:	f001 f843 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <USART1_IRQHandler+0x10>)
 8000b62:	f002 fd63 	bl	800362c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000ec 	.word	0x200000ec

08000b70 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <DMA2_Stream2_IRQHandler+0x10>)
 8000b76:	f001 fafb 	bl	8002170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000164 	.word	0x20000164

08000b84 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <DMA2_Stream7_IRQHandler+0x10>)
 8000b8a:	f001 faf1 	bl	8002170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001c4 	.word	0x200001c4

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	@ (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f003 fe4a 	bl	8004860 <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20020000 	.word	0x20020000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	20000224 	.word	0x20000224
 8000c00:	20000378 	.word	0x20000378

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c2c:	f7ff ffea 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	@ (8000c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c56:	f003 fe09 	bl	800486c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fd19 	bl	8000690 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c6c:	0800492c 	.word	0x0800492c
  ldr r2, =_sbss
 8000c70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c74:	20000374 	.word	0x20000374

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>

08000c7a <crc16>:
	return (crc_hi | crc_lo << 8);
}

#else
uint16_t crc16(uint8_t *data, uint16_t length)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 8000c86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c8a:	81fb      	strh	r3, [r7, #14]

	for (uint16_t i = 0; i < length; i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	81bb      	strh	r3, [r7, #12]
 8000c90:	e026      	b.n	8000ce0 <crc16+0x66>
	{
		crc ^= data[i];
 8000c92:	89bb      	ldrh	r3, [r7, #12]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	89fb      	ldrh	r3, [r7, #14]
 8000c9e:	4053      	eors	r3, r2
 8000ca0:	81fb      	strh	r3, [r7, #14]

		for (uint8_t j = 0; j < 8; j++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	72fb      	strb	r3, [r7, #11]
 8000ca6:	e015      	b.n	8000cd4 <crc16+0x5a>
		{
			if (crc & 0x0001)
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00a      	beq.n	8000cc8 <crc16+0x4e>
			{
				crc >>= 1;
 8000cb2:	89fb      	ldrh	r3, [r7, #14]
 8000cb4:	085b      	lsrs	r3, r3, #1
 8000cb6:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8000cbe:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	81fb      	strh	r3, [r7, #14]
 8000cc6:	e002      	b.n	8000cce <crc16+0x54>
			}
			else
			{
				crc >>= 1;
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	085b      	lsrs	r3, r3, #1
 8000ccc:	81fb      	strh	r3, [r7, #14]
		for (uint8_t j = 0; j < 8; j++)
 8000cce:	7afb      	ldrb	r3, [r7, #11]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	72fb      	strb	r3, [r7, #11]
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	2b07      	cmp	r3, #7
 8000cd8:	d9e6      	bls.n	8000ca8 <crc16+0x2e>
	for (uint16_t i = 0; i < length; i++)
 8000cda:	89bb      	ldrh	r3, [r7, #12]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	81bb      	strh	r3, [r7, #12]
 8000ce0:	89ba      	ldrh	r2, [r7, #12]
 8000ce2:	887b      	ldrh	r3, [r7, #2]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3d4      	bcc.n	8000c92 <crc16+0x18>
			}
		}
	}
	return (crc >> 8) | (crc << 8);
 8000ce8:	89fb      	ldrh	r3, [r7, #14]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	b29b      	uxth	r3, r3
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <MB_Parse_Coils>:
bool MB_Parse_Bit(uint8_t *data, uint16_t Address)
{
	return (data[Address / 8] & BitMasks[Address % 8]) ? 1 : 0;
}
void MB_Parse_Coils(uint8_t *data, uint16_t Offset, uint8_t *Output, uint16_t Length)
{
 8000d08:	b490      	push	{r4, r7}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	461a      	mov	r2, r3
 8000d14:	460b      	mov	r3, r1
 8000d16:	817b      	strh	r3, [r7, #10]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	813b      	strh	r3, [r7, #8]
	for (uint8_t x = 0; x < Length; x++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	75fb      	strb	r3, [r7, #23]
 8000d20:	e03f      	b.n	8000da2 <MB_Parse_Coils+0x9a>
	{
		uint16_t idx = Offset + x;
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	897b      	ldrh	r3, [r7, #10]
 8000d28:	4413      	add	r3, r2
 8000d2a:	82bb      	strh	r3, [r7, #20]
		//erase the designated area
		Output[idx / 8] &= NbitMasks[idx % 8];
 8000d2c:	8abb      	ldrh	r3, [r7, #20]
 8000d2e:	08db      	lsrs	r3, r3, #3
 8000d30:	b298      	uxth	r0, r3
 8000d32:	4602      	mov	r2, r0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	7819      	ldrb	r1, [r3, #0]
 8000d3a:	8abb      	ldrh	r3, [r7, #20]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	4a1d      	ldr	r2, [pc, #116]	@ (8000db8 <MB_Parse_Coils+0xb0>)
 8000d42:	5cd2      	ldrb	r2, [r2, r3]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4403      	add	r3, r0
 8000d48:	400a      	ands	r2, r1
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	701a      	strb	r2, [r3, #0]
		//write the designated area
		Output[idx / 8] |= (data[x / 8] & BitMasks[x % 8]) ? BitMasks[idx % 8] : 0;
 8000d4e:	8abb      	ldrh	r3, [r7, #20]
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	b29c      	uxth	r4, r3
 8000d54:	4622      	mov	r2, r4
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b25a      	sxtb	r2, r3
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4619      	mov	r1, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	440b      	add	r3, r1
 8000d6a:	7819      	ldrb	r1, [r3, #0]
 8000d6c:	7dfb      	ldrb	r3, [r7, #23]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	4812      	ldr	r0, [pc, #72]	@ (8000dbc <MB_Parse_Coils+0xb4>)
 8000d74:	5cc3      	ldrb	r3, [r0, r3]
 8000d76:	400b      	ands	r3, r1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d006      	beq.n	8000d8c <MB_Parse_Coils+0x84>
 8000d7e:	8abb      	ldrh	r3, [r7, #20]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	490d      	ldr	r1, [pc, #52]	@ (8000dbc <MB_Parse_Coils+0xb4>)
 8000d86:	5ccb      	ldrb	r3, [r1, r3]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	e000      	b.n	8000d8e <MB_Parse_Coils+0x86>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	4621      	mov	r1, r4
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	440b      	add	r3, r1
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	701a      	strb	r2, [r3, #0]
	for (uint8_t x = 0; x < Length; x++)
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	75fb      	strb	r3, [r7, #23]
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	893a      	ldrh	r2, [r7, #8]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8ba      	bhi.n	8000d22 <MB_Parse_Coils+0x1a>
	}
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc90      	pop	{r4, r7}
 8000db6:	4770      	bx	lr
 8000db8:	0800490c 	.word	0x0800490c
 8000dbc:	08004904 	.word	0x08004904

08000dc0 <MB_Parse_UInt16>:
{
	*Output = data[(*offset)];
	*offset += 1;
}
void MB_Parse_UInt16(uint8_t *data, uint16_t *offset, uint16_t *Output)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	*Output = data[(*offset)] << 8 | (uint16_t) data[(*offset) + 1];
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21a      	sxth	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	68f9      	ldr	r1, [r7, #12]
 8000de4:	440b      	add	r3, r1
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	801a      	strh	r2, [r3, #0]
	*offset += 2;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	3302      	adds	r3, #2
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	801a      	strh	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <MB_Encode_Coils>:
	{
		data[Address / 8] &= NbitMasks[Address % 8];
	}
}
void MB_Encode_Coils(uint8_t *data, uint16_t Offset, uint8_t *Output, uint16_t Length)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	461a      	mov	r2, r3
 8000e18:	460b      	mov	r3, r1
 8000e1a:	817b      	strh	r3, [r7, #10]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	813b      	strh	r3, [r7, #8]

	//erase the buffer area
	memset(Output, 0, (Length / 8) + ((Length % 8) ? 1 : 0));
 8000e20:	893b      	ldrh	r3, [r7, #8]
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	893b      	ldrh	r3, [r7, #8]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bf14      	ite	ne
 8000e34:	2301      	movne	r3, #1
 8000e36:	2300      	moveq	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f003 fcf5 	bl	8004830 <memset>

	for (uint8_t x = 0; x < Length; x++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	75fb      	strb	r3, [r7, #23]
 8000e4a:	e02e      	b.n	8000eaa <MB_Encode_Coils+0x9e>
	{
		uint16_t idx = Offset + x;
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	897b      	ldrh	r3, [r7, #10]
 8000e52:	4413      	add	r3, r2
 8000e54:	82bb      	strh	r3, [r7, #20]
		//write the designated area
		Output[x / 8] |= (data[idx / 8] & BitMasks[idx % 8]) ? BitMasks[x % 8] : 0;
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	b2dc      	uxtb	r4, r3
 8000e5c:	4622      	mov	r2, r4
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b25a      	sxtb	r2, r3
 8000e66:	8abb      	ldrh	r3, [r7, #20]
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	440b      	add	r3, r1
 8000e72:	7819      	ldrb	r1, [r3, #0]
 8000e74:	8abb      	ldrh	r3, [r7, #20]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	4811      	ldr	r0, [pc, #68]	@ (8000ec0 <MB_Encode_Coils+0xb4>)
 8000e7c:	5cc3      	ldrb	r3, [r0, r3]
 8000e7e:	400b      	ands	r3, r1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <MB_Encode_Coils+0x88>
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	490c      	ldr	r1, [pc, #48]	@ (8000ec0 <MB_Encode_Coils+0xb4>)
 8000e8e:	5ccb      	ldrb	r3, [r1, r3]
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	e000      	b.n	8000e96 <MB_Encode_Coils+0x8a>
 8000e94:	2300      	movs	r3, #0
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b25a      	sxtb	r2, r3
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	440b      	add	r3, r1
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]
	for (uint8_t x = 0; x < Length; x++)
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	75fb      	strb	r3, [r7, #23]
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	893a      	ldrh	r2, [r7, #8]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8cb      	bhi.n	8000e4c <MB_Encode_Coils+0x40>
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	371c      	adds	r7, #28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	08004904 	.word	0x08004904

08000ec4 <MB_Encode_UInt16>:
void MB_Encode_Int8(uint8_t *data, int8_t Input, uint16_t *Offset)
{
	data[(*Offset)++] = (uint8_t) (Input);
}
void MB_Encode_UInt16(uint8_t *data, uint16_t Input, uint16_t *Offset)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	817b      	strh	r3, [r7, #10]
	data[(*Offset)++] = (uint8_t) (Input >> 8);
 8000ed2:	897b      	ldrh	r3, [r7, #10]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b299      	uxth	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	b290      	uxth	r0, r2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	8010      	strh	r0, [r2, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
	data[(*Offset)++] = (uint8_t) (Input);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	b291      	uxth	r1, r2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	8011      	strh	r1, [r2, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	897a      	ldrh	r2, [r7, #10]
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <MB_Slave_Init>:
void MB_Slave_ProcessMessage(MB_Slave_t *MB);

// Initialize the modbus
// IPs: Modbus instance with all parameters
MB_Status_t MB_Slave_Init(MB_Slave_t *MB)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
	MB->IsInitialized = 0;
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 8000f20:	f36f 0341 	bfc	r3, #1, #1
 8000f24:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48

	// allocate the TX and RX Buffers
	MB->TxBuffer = malloc(MB->TX_RX_Buffer_Size);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	899b      	ldrh	r3, [r3, #12]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fbc9 	bl	80046c4 <malloc>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	605a      	str	r2, [r3, #4]
	MB->RxBuffer = malloc(MB->TX_RX_Buffer_Size);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	899b      	ldrh	r3, [r3, #12]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fbc0 	bl	80046c4 <malloc>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	609a      	str	r2, [r3, #8]

	// allocate the MODBUS memory area to be accessed by the master
	MB->HoldingRegs = malloc(MB->HoldingRegSize * sizeof(uint16_t));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	8a1b      	ldrh	r3, [r3, #16]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fbb6 	bl	80046c4 <malloc>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	615a      	str	r2, [r3, #20]
	MB->InputRegs = malloc(MB->InputRegSize * sizeof(uint16_t));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	8b5b      	ldrh	r3, [r3, #26]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fbac 	bl	80046c4 <malloc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	61da      	str	r2, [r3, #28]

	memset(MB->HoldingRegs, 0, MB->HoldingRegSize * sizeof(uint16_t));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6958      	ldr	r0, [r3, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	8a1b      	ldrh	r3, [r3, #16]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	f003 fc55 	bl	8004830 <memset>
	memset(MB->InputRegs, 0, MB->InputRegSize * sizeof(uint16_t));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69d8      	ldr	r0, [r3, #28]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	8b5b      	ldrh	r3, [r3, #26]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	461a      	mov	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f003 fc4c 	bl	8004830 <memset>

	MB->InputBits = malloc(sizeof(MB->InputBitsSize));
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f003 fb93 	bl	80046c4 <malloc>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24
	MB->CoilBits = malloc(sizeof(MB->CoilBitsSize));
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f003 fb8c 	bl	80046c4 <malloc>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

	memset(MB->CoilBits, 0, MB->CoilBitsSize * sizeof(uint8_t));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	f003 fc36 	bl	8004830 <memset>
	memset(MB->InputBits, 0, MB->InputBitsSize * sizeof(uint8_t));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f003 fc2e 	bl	8004830 <memset>

	if (MB->SLA == 0)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <MB_Slave_Init+0xce>
	{
		return MB_INIT_ERR_INVALID_SLA;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e03d      	b.n	800105c <MB_Slave_Init+0x14a>
	}

	// check the buffers
	if (!MB->TxBuffer || !MB->RxBuffer || !MB->HoldingRegs || !MB->InputRegs || !MB->CoilBits || !MB->InputBits)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d013      	beq.n	8001010 <MB_Slave_Init+0xfe>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00f      	beq.n	8001010 <MB_Slave_Init+0xfe>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00b      	beq.n	8001010 <MB_Slave_Init+0xfe>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <MB_Slave_Init+0xfe>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <MB_Slave_Init+0xfe>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <MB_Slave_Init+0x102>
	{
		return MB_INIT_ERR_MEM_ALLOC;
 8001010:	2304      	movs	r3, #4
 8001012:	e023      	b.n	800105c <MB_Slave_Init+0x14a>
	}

	// check the function pointers to be called by the MB library
	else if (!MB->hw_interface.MB_Activate_TX || !MB->hw_interface.MB_StartListening || !MB->hw_interface.MB_Transmit || !MB->hw_interface.MB_Request_Recieved)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00b      	beq.n	8001034 <MB_Slave_Init+0x122>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <MB_Slave_Init+0x122>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <MB_Slave_Init+0x122>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <MB_Slave_Init+0x126>
	{
		return MB_INIT_ERR_FN_PTR;
 8001034:	2305      	movs	r3, #5
 8001036:	e011      	b.n	800105c <MB_Slave_Init+0x14a>
	}

	MB->IsInitialized = 1;
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
	MB->Seq = 0;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	MB->MB_Stat = MB_INIT_OK;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	return MB->MB_Stat;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <MB_Slave_Routine>:

// to be called periodicaly to check for incoming messages
void MB_Slave_Routine(MB_Slave_t *MB, uint32_t Ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	if (!MB->IsInitialized)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8316 	beq.w	80016ac <MB_Slave_Routine+0x648>
	{
		return;
	}
	switch (MB->Seq)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001086:	2b28      	cmp	r3, #40	@ 0x28
 8001088:	f200 830b 	bhi.w	80016a2 <MB_Slave_Routine+0x63e>
 800108c:	a201      	add	r2, pc, #4	@ (adr r2, 8001094 <MB_Slave_Routine+0x30>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	08001139 	.word	0x08001139
 8001098:	080016a3 	.word	0x080016a3
 800109c:	080016a3 	.word	0x080016a3
 80010a0:	080016a3 	.word	0x080016a3
 80010a4:	080016a3 	.word	0x080016a3
 80010a8:	0800115f 	.word	0x0800115f
 80010ac:	080016a3 	.word	0x080016a3
 80010b0:	080016a3 	.word	0x080016a3
 80010b4:	080016a3 	.word	0x080016a3
 80010b8:	080016a3 	.word	0x080016a3
 80010bc:	08001181 	.word	0x08001181
 80010c0:	080016a3 	.word	0x080016a3
 80010c4:	080016a3 	.word	0x080016a3
 80010c8:	080016a3 	.word	0x080016a3
 80010cc:	080016a3 	.word	0x080016a3
 80010d0:	080016a3 	.word	0x080016a3
 80010d4:	080016a3 	.word	0x080016a3
 80010d8:	080016a3 	.word	0x080016a3
 80010dc:	080016a3 	.word	0x080016a3
 80010e0:	080016a3 	.word	0x080016a3
 80010e4:	0800157b 	.word	0x0800157b
 80010e8:	080016a3 	.word	0x080016a3
 80010ec:	080016a3 	.word	0x080016a3
 80010f0:	080016a3 	.word	0x080016a3
 80010f4:	080016a3 	.word	0x080016a3
 80010f8:	080016a3 	.word	0x080016a3
 80010fc:	080016a3 	.word	0x080016a3
 8001100:	080016a3 	.word	0x080016a3
 8001104:	080016a3 	.word	0x080016a3
 8001108:	080016a3 	.word	0x080016a3
 800110c:	08001617 	.word	0x08001617
 8001110:	080016a3 	.word	0x080016a3
 8001114:	080016a3 	.word	0x080016a3
 8001118:	080016a3 	.word	0x080016a3
 800111c:	080016a3 	.word	0x080016a3
 8001120:	080016a3 	.word	0x080016a3
 8001124:	080016a3 	.word	0x080016a3
 8001128:	080016a3 	.word	0x080016a3
 800112c:	080016a3 	.word	0x080016a3
 8001130:	080016a3 	.word	0x080016a3
 8001134:	08001671 	.word	0x08001671
	{
		// start the receiving sequence
		case 0:
			MB->TX_MSG_LEN = 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			MB->RX_LEN = 0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	865a      	strh	r2, [r3, #50]	@ 0x32
			MB->hw_interface.MB_Activate_TX(0);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	2000      	movs	r0, #0
 800114c:	4798      	blx	r3
			MB->hw_interface.MB_StartListening();
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001152:	4798      	blx	r3
			MB->Seq = 5;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2205      	movs	r2, #5
 8001158:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 800115c:	e2b1      	b.n	80016c2 <MB_Slave_Routine+0x65e>

			// start of the potential frame
		case 5:
			if (MB->RX_LEN > 0)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 82a4 	beq.w	80016b0 <MB_Slave_Routine+0x64c>
			{
				MB->Ticks = Ticks + MB->RX_Timeout;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800116c:	461a      	mov	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	441a      	add	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	64da      	str	r2, [r3, #76]	@ 0x4c
				MB->Seq = 10;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	220a      	movs	r2, #10
 800117a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			break;
 800117e:	e297      	b.n	80016b0 <MB_Slave_Routine+0x64c>
			// waiting for the first 6 bytes in the message
			// SLA, FCN, reg address, and num of registers
		case 10:
			// check for timeout
			if (Ticks > MB->Ticks)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d907      	bls.n	800119a <MB_Slave_Routine+0x136>
			{
				MB->RX_LEN = 0;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	865a      	strh	r2, [r3, #50]	@ 0x32
				MB->Seq = 5;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2205      	movs	r2, #5
 8001194:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
				{
					// jump to the next step
					MB->Seq = 20;
				}
			}
			break;
 8001198:	e28c      	b.n	80016b4 <MB_Slave_Routine+0x650>
			else if ((MB->RX_LEN > 6 && (MB->RxBuffer[1] != MB_PRST_READ_MUL_REGS)) || (MB->RX_LEN > 10 && (MB->RxBuffer[1] == MB_PRST_READ_MUL_REGS)))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d905      	bls.n	80011ae <MB_Slave_Routine+0x14a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	3301      	adds	r3, #1
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b17      	cmp	r3, #23
 80011ac:	d10b      	bne.n	80011c6 <MB_Slave_Routine+0x162>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80011b2:	2b0a      	cmp	r3, #10
 80011b4:	f240 827e 	bls.w	80016b4 <MB_Slave_Routine+0x650>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	3301      	adds	r3, #1
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b17      	cmp	r3, #23
 80011c2:	f040 8277 	bne.w	80016b4 <MB_Slave_Routine+0x650>
				MB->RX_SLA = MB->RxBuffer[0];
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
				MB->Fcn = MB->RxBuffer[1];
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	3301      	adds	r3, #1
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
				MB->Reg_Address = (MB->RxBuffer[2] << 8) | MB->RxBuffer[3];
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	3302      	adds	r3, #2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	3303      	adds	r3, #3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
				MB->NumOfRegisters = (MB->RxBuffer[4] << 8) | MB->RxBuffer[5];
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	3304      	adds	r3, #4
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	3305      	adds	r3, #5
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21b      	sxth	r3, r3
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
				switch (MB->Fcn)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 800122a:	3b01      	subs	r3, #1
 800122c:	2b16      	cmp	r3, #22
 800122e:	f200 8163 	bhi.w	80014f8 <MB_Slave_Routine+0x494>
 8001232:	a201      	add	r2, pc, #4	@ (adr r2, 8001238 <MB_Slave_Routine+0x1d4>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	08001295 	.word	0x08001295
 800123c:	08001295 	.word	0x08001295
 8001240:	08001313 	.word	0x08001313
 8001244:	08001313 	.word	0x08001313
 8001248:	0800136f 	.word	0x0800136f
 800124c:	0800136f 	.word	0x0800136f
 8001250:	080014f9 	.word	0x080014f9
 8001254:	080014f9 	.word	0x080014f9
 8001258:	080014f9 	.word	0x080014f9
 800125c:	080014f9 	.word	0x080014f9
 8001260:	080014f9 	.word	0x080014f9
 8001264:	080014f9 	.word	0x080014f9
 8001268:	080014f9 	.word	0x080014f9
 800126c:	080014f9 	.word	0x080014f9
 8001270:	080013cb 	.word	0x080013cb
 8001274:	08001425 	.word	0x08001425
 8001278:	080014f9 	.word	0x080014f9
 800127c:	080014f9 	.word	0x080014f9
 8001280:	080014f9 	.word	0x080014f9
 8001284:	080014f9 	.word	0x080014f9
 8001288:	080014f9 	.word	0x080014f9
 800128c:	080014f9 	.word	0x080014f9
 8001290:	08001461 	.word	0x08001461
						MB->RX_MSG_LEN = 8;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2208      	movs	r2, #8
 8001298:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 5 + (MB->NumOfRegisters / 8) + (MB->NumOfRegisters % 8 ? 1 : 0);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	f8b2 205a 	ldrh.w	r2, [r2, #90]	@ 0x5a
 80012ac:	f002 0207 	and.w	r2, r2, #7
 80012b0:	b292      	uxth	r2, r2
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2201      	movne	r2, #1
 80012b8:	2200      	moveq	r2, #0
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3305      	adds	r3, #5
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->Fcn == MB_READ_COIL ? MB->CoilBitsStart : MB->InputBitsStart;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d102      	bne.n	80012da <MB_Slave_Routine+0x276>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d8:	e001      	b.n	80012de <MB_Slave_Routine+0x27a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	8c1b      	ldrh	r3, [r3, #32]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	f8a2 3062 	strh.w	r3, [r2, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->Fcn == MB_READ_COIL ? MB->CoilBitsSize * 8 : MB->InputBitsSize * 8);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d104      	bne.n	80012fe <MB_Slave_Routine+0x29a>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	e003      	b.n	8001306 <MB_Slave_Routine+0x2a2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 8001310:	e0f2      	b.n	80014f8 <MB_Slave_Routine+0x494>
						MB->RX_MSG_LEN = 8;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2208      	movs	r2, #8
 8001316:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 5 + (MB->NumOfRegisters * 2);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b29b      	uxth	r3, r3
 8001324:	3305      	adds	r3, #5
 8001326:	b29a      	uxth	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->Fcn == MB_READ_MUL_HLD_REG ? MB->HoldingRegStart : MB->InputRegsStart;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001334:	2b03      	cmp	r3, #3
 8001336:	d102      	bne.n	800133e <MB_Slave_Routine+0x2da>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	89db      	ldrh	r3, [r3, #14]
 800133c:	e001      	b.n	8001342 <MB_Slave_Routine+0x2de>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	8b1b      	ldrh	r3, [r3, #24]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	f8a2 3062 	strh.w	r3, [r2, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->Fcn == MB_READ_MUL_HLD_REG ? MB->HoldingRegSize : MB->InputRegSize);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001354:	2b03      	cmp	r3, #3
 8001356:	d102      	bne.n	800135e <MB_Slave_Routine+0x2fa>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	8a1b      	ldrh	r3, [r3, #16]
 800135c:	e001      	b.n	8001362 <MB_Slave_Routine+0x2fe>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8b5b      	ldrh	r3, [r3, #26]
 8001362:	4413      	add	r3, r2
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 800136c:	e0c4      	b.n	80014f8 <MB_Slave_Routine+0x494>
						MB->NumOfRegisters = 1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
						MB->RX_MSG_LEN = 8;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2208      	movs	r2, #8
 800137a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 8;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2208      	movs	r2, #8
 8001382:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->Fcn == MB_FRC_SNG_COIL ? MB->CoilBitsStart : MB->HoldingRegStart;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 800138c:	2b05      	cmp	r3, #5
 800138e:	d102      	bne.n	8001396 <MB_Slave_Routine+0x332>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001394:	e001      	b.n	800139a <MB_Slave_Routine+0x336>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	89db      	ldrh	r3, [r3, #14]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	f8a2 3062 	strh.w	r3, [r2, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->Fcn == MB_FRC_SNG_COIL ? MB->CoilBitsSize * 8 : MB->HoldingRegSize);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d104      	bne.n	80013ba <MB_Slave_Routine+0x356>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	e001      	b.n	80013be <MB_Slave_Routine+0x35a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	8a1b      	ldrh	r3, [r3, #16]
 80013be:	4413      	add	r3, r2
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 80013c8:	e096      	b.n	80014f8 <MB_Slave_Routine+0x494>
						MB->RX_MSG_LEN = 9 + (MB->NumOfRegisters / 8) + (MB->NumOfRegisters % 8 ? 1 : 0);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	f8b2 205a 	ldrh.w	r2, [r2, #90]	@ 0x5a
 80013da:	f002 0207 	and.w	r2, r2, #7
 80013de:	b292      	uxth	r2, r2
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2201      	movne	r2, #1
 80013e6:	2200      	moveq	r2, #0
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	4413      	add	r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3309      	adds	r3, #9
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 8;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2208      	movs	r2, #8
 80013fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->CoilBitsStart;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->CoilBitsSize * 8);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	b29b      	uxth	r3, r3
 8001418:	4413      	add	r3, r2
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 8001422:	e069      	b.n	80014f8 <MB_Slave_Routine+0x494>
						MB->RX_MSG_LEN = 9 + (MB->NumOfRegisters * 2);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	b29b      	uxth	r3, r3
 800142e:	3309      	adds	r3, #9
 8001430:	b29a      	uxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 8;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2208      	movs	r2, #8
 800143c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->HoldingRegStart;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	89da      	ldrh	r2, [r3, #14]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->HoldingRegSize);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	8a1b      	ldrh	r3, [r3, #16]
 8001454:	4413      	add	r3, r2
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 800145e:	e04b      	b.n	80014f8 <MB_Slave_Routine+0x494>
						MB->Reg_Address_W = (MB->RxBuffer[6] << 8) | MB->RxBuffer[7];
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	3306      	adds	r3, #6
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21a      	sxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	3307      	adds	r3, #7
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21b      	sxth	r3, r3
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
						MB->NumOfW_Regs = (MB->RxBuffer[8] << 8) | MB->RxBuffer[9];
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	3308      	adds	r3, #8
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	3309      	adds	r3, #9
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
						MB->ByteCount = MB->RxBuffer[10];
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	7a9a      	ldrb	r2, [r3, #10]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
						MB->RX_MSG_LEN = 13 + (2 * MB->NumOfW_Regs);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	330d      	adds	r3, #13
 80014bc:	b29a      	uxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						MB->TX_MSG_LEN = 5 + (2 * MB->NumOfRegisters);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3305      	adds	r3, #5
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
						MB->Target_MEM_Start = MB->HoldingRegStart;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	89da      	ldrh	r2, [r3, #14]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
						MB->Target_MEM_End = MB->Target_MEM_Start + (MB->HoldingRegSize);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	8a1b      	ldrh	r3, [r3, #16]
 80014ec:	4413      	add	r3, r2
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
						break;
 80014f6:	bf00      	nop
				if (MB->RX_LEN >= MB->RX_MSG_LEN)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001502:	429a      	cmp	r2, r3
 8001504:	d334      	bcc.n	8001570 <MB_Slave_Routine+0x50c>
					MB->MB_Stat = MB_STAT_OK;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
					MB_Slave_ProcessMessage(MB);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f914 	bl	800173c <MB_Slave_ProcessMessage>
					if (MB->RX_Silent_Interval_MS == 0)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11d      	bne.n	8001558 <MB_Slave_Routine+0x4f4>
						MB->hw_interface.MB_Activate_TX(1); // activate transmitter
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	2001      	movs	r0, #1
 8001522:	4798      	blx	r3
						MB->hw_interface.MB_Transmit(MB->TxBuffer, MB->TX_MSG_LEN);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6850      	ldr	r0, [r2, #4]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8001532:	4611      	mov	r1, r2
 8001534:	4798      	blx	r3
						if (MB->TX_Automplete)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <MB_Slave_Routine+0x4ea>
							MB->hw_interface.MB_Activate_TX(0);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	2000      	movs	r0, #0
 800154c:	4798      	blx	r3
						MB->Seq = 40;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2228      	movs	r2, #40	@ 0x28
 8001552:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 8001556:	e0ad      	b.n	80016b4 <MB_Slave_Routine+0x650>
						MB->Ticks = Ticks + MB->RX_Silent_Interval_MS;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800155c:	461a      	mov	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	441a      	add	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	64da      	str	r2, [r3, #76]	@ 0x4c
						MB->Seq = 30;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	221e      	movs	r2, #30
 800156a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 800156e:	e0a1      	b.n	80016b4 <MB_Slave_Routine+0x650>
					MB->Seq = 20;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2214      	movs	r2, #20
 8001574:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 8001578:	e09c      	b.n	80016b4 <MB_Slave_Routine+0x650>

			// wait for the rest of the message
		case 20:
			if (MB->RX_LEN >= MB->RX_MSG_LEN)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001584:	429a      	cmp	r2, r3
 8001586:	d334      	bcc.n	80015f2 <MB_Slave_Routine+0x58e>
			{
				MB->MB_Stat = MB_STAT_OK;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				MB_Slave_ProcessMessage(MB);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f8d3 	bl	800173c <MB_Slave_ProcessMessage>
				// for a zero wait state interfae (like modbus over USB)
				if (MB->RX_Silent_Interval_MS == 0)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800159a:	2b00      	cmp	r3, #0
 800159c:	d11d      	bne.n	80015da <MB_Slave_Routine+0x576>
				{
					MB->hw_interface.MB_Activate_TX(1); // activate transmitter
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	2001      	movs	r0, #1
 80015a4:	4798      	blx	r3
					MB->hw_interface.MB_Transmit(MB->TxBuffer, MB->TX_MSG_LEN);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6850      	ldr	r0, [r2, #4]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80015b4:	4611      	mov	r1, r2
 80015b6:	4798      	blx	r3
					// disable TX mode in case of autocomplete (non blocking call)
					if (MB->TX_Automplete)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <MB_Slave_Routine+0x56c>
					{
						MB->hw_interface.MB_Activate_TX(0);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	2000      	movs	r0, #0
 80015ce:	4798      	blx	r3
					}
					MB->Seq = 40;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2228      	movs	r2, #40	@ 0x28
 80015d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
				MB->MB_Stat = MB_RX_TIMEOUT;
				MB->hw_interface.MB_Request_Recieved(MB);
				MB->Seq = 0;
				return;
			}
			break;
 80015d8:	e06e      	b.n	80016b8 <MB_Slave_Routine+0x654>
					MB->Ticks = Ticks + MB->RX_Silent_Interval_MS;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80015de:	461a      	mov	r2, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	441a      	add	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	64da      	str	r2, [r3, #76]	@ 0x4c
					MB->Seq = 30;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	221e      	movs	r2, #30
 80015ec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 80015f0:	e062      	b.n	80016b8 <MB_Slave_Routine+0x654>
			else if (Ticks > MB->Ticks)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d95d      	bls.n	80016b8 <MB_Slave_Routine+0x654>
				MB->MB_Stat = MB_RX_TIMEOUT;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	220f      	movs	r2, #15
 8001600:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				MB->hw_interface.MB_Request_Recieved(MB);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
				MB->Seq = 0;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
				return;
 8001614:	e055      	b.n	80016c2 <MB_Slave_Routine+0x65e>

			// transmit the reply if needed
		case 30:
			if (MB->MB_Stat == MB_STAT_OK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800161c:	2b00      	cmp	r3, #0
 800161e:	d122      	bne.n	8001666 <MB_Slave_Routine+0x602>
			{
				// wait for silent interval to finish
				if (Ticks > MB->Ticks)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d948      	bls.n	80016bc <MB_Slave_Routine+0x658>
				{
					MB->hw_interface.MB_Activate_TX(1); // activate transmitter
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	2001      	movs	r0, #1
 8001630:	4798      	blx	r3
					MB->hw_interface.MB_Transmit(MB->TxBuffer, MB->TX_MSG_LEN);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6850      	ldr	r0, [r2, #4]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8001640:	4611      	mov	r1, r2
 8001642:	4798      	blx	r3
					// disable TX mode in case of autocomplete (non blocking call)
					if (MB->TX_Automplete)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <MB_Slave_Routine+0x5f8>
					{
						MB->hw_interface.MB_Activate_TX(0);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	2000      	movs	r0, #0
 800165a:	4798      	blx	r3
					}
					MB->Seq = 40;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2228      	movs	r2, #40	@ 0x28
 8001660:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			else
			{
				MB->Seq = 0;
			}
			break;
 8001664:	e02a      	b.n	80016bc <MB_Slave_Routine+0x658>
				MB->Seq = 0;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 800166e:	e025      	b.n	80016bc <MB_Slave_Routine+0x658>

			// wait till tx is complete
		case 40:
			if (MB->TX_Complete || MB->TX_Automplete)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <MB_Slave_Routine+0x62c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d017      	beq.n	80016c0 <MB_Slave_Routine+0x65c>
			{
				MB->MB_Stat = MB_STAT_OK;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				MB->Seq = 0;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			break;
 80016a0:	e00e      	b.n	80016c0 <MB_Slave_Routine+0x65c>

		default:
			MB->Seq = 0;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			break;
 80016aa:	e00a      	b.n	80016c2 <MB_Slave_Routine+0x65e>
		return;
 80016ac:	bf00      	nop
 80016ae:	e008      	b.n	80016c2 <MB_Slave_Routine+0x65e>
			break;
 80016b0:	bf00      	nop
 80016b2:	e006      	b.n	80016c2 <MB_Slave_Routine+0x65e>
			break;
 80016b4:	bf00      	nop
 80016b6:	e004      	b.n	80016c2 <MB_Slave_Routine+0x65e>
			break;
 80016b8:	bf00      	nop
 80016ba:	e002      	b.n	80016c2 <MB_Slave_Routine+0x65e>
			break;
 80016bc:	bf00      	nop
 80016be:	e000      	b.n	80016c2 <MB_Slave_Routine+0x65e>
			break;
 80016c0:	bf00      	nop
	}
}
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MB_Slave_TX_Complete>:
 }*/

// These functions are called from the user program
// used to signal the library that the TX operation s complete
void MB_Slave_TX_Complete(MB_Slave_t *MB)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	MB->TX_Complete = 1;
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
	MB->hw_interface.MB_Activate_TX(0);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	2000      	movs	r0, #0
 80016e4:	4798      	blx	r3
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <MB_Slave_Prepare_Exception>:
	}
}

/// @brief (internal only) prepares an exception reply to be issed to the master
void MB_Slave_Prepare_Exception(MB_Slave_t *MB, MB_EXC_CODE C)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	70fb      	strb	r3, [r7, #3]
	MB->TX_MSG_LEN = 5;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2205      	movs	r2, #5
 80016fe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	MB->TxBuffer[0] = MB->RxBuffer[0];
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	701a      	strb	r2, [r3, #0]
	MB->TxBuffer[1] = MB->RxBuffer[1] | 0x80;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	3301      	adds	r3, #1
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	701a      	strb	r2, [r3, #0]
	MB->TxBuffer[2] = C;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	3302      	adds	r3, #2
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	701a      	strb	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <MB_Slave_ProcessMessage>:
/// @fn void MB_Slave_ProcessMessage(MB_Slave_t*)
/// @brief internal api function
/// this is where the message is processed,
/// @param MB ptr to the Modbus slave struct
void MB_Slave_ProcessMessage(MB_Slave_t *MB)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	// return MB_OK;
	// check the message integrity
	uint16_t crc = crc16(MB->RxBuffer, MB->RX_LEN - 2);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800174c:	3b02      	subs	r3, #2
 800174e:	b29b      	uxth	r3, r3
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f7ff fa91 	bl	8000c7a <crc16>
 8001758:	4603      	mov	r3, r0
 800175a:	82fb      	strh	r3, [r7, #22]
	uint16_t crc_data = MB->RxBuffer[MB->RX_LEN - 1] | (MB->RxBuffer[MB->RX_LEN - 2] << 8);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001764:	3b01      	subs	r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b21a      	sxth	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001774:	3b02      	subs	r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21b      	sxth	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b21b      	sxth	r3, r3
 8001782:	82bb      	strh	r3, [r7, #20]

	// check the CRC
	if (crc != crc_data)
 8001784:	8afa      	ldrh	r2, [r7, #22]
 8001786:	8abb      	ldrh	r3, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	d004      	beq.n	8001796 <MB_Slave_ProcessMessage+0x5a>
	{
		// return CRC error
		MB->MB_Stat = MB_RX_ERR_CRC;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	220d      	movs	r2, #13
 8001790:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
		return;
 8001794:	e1cd      	b.n	8001b32 <MB_Slave_ProcessMessage+0x3f6>
	}
	else if (MB->SLA != MB->RX_SLA)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d004      	beq.n	80017ae <MB_Slave_ProcessMessage+0x72>
	{
		MB->MB_Stat = MB_RX_ERR_ADD;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	220b      	movs	r2, #11
 80017a8:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
		return;
 80017ac:	e1c1      	b.n	8001b32 <MB_Slave_ProcessMessage+0x3f6>
	}

	// used for internal operations
	uint16_t Off = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	81fb      	strh	r3, [r7, #14]
	uint16_t *ptr;

	// check for a valid address and data length
	if (MB->Target_MEM_Start > MB->Reg_Address || (MB->Reg_Address + MB->NumOfRegisters) > MB->Target_MEM_End)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80017be:	429a      	cmp	r2, r3
 80017c0:	d80c      	bhi.n	80017dc <MB_Slave_ProcessMessage+0xa0>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80017d0:	4413      	add	r3, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 80017d8:	4293      	cmp	r3, r2
 80017da:	dd04      	ble.n	80017e6 <MB_Slave_ProcessMessage+0xaa>
	{
		MB_Slave_Prepare_Exception(MB, MB_ILLEGAL_DATA_ADDRESS);
 80017dc:	2102      	movs	r1, #2
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ff85 	bl	80016ee <MB_Slave_Prepare_Exception>
 80017e4:	e174      	b.n	8001ad0 <MB_Slave_ProcessMessage+0x394>
	}
	else
	{
		// get the function code
		switch (MB->Fcn)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80017ec:	3b01      	subs	r3, #1
 80017ee:	2b16      	cmp	r3, #22
 80017f0:	f200 8169 	bhi.w	8001ac6 <MB_Slave_ProcessMessage+0x38a>
 80017f4:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <MB_Slave_ProcessMessage+0xc0>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	08001859 	.word	0x08001859
 8001800:	08001859 	.word	0x08001859
 8001804:	080018cb 	.word	0x080018cb
 8001808:	080018cb 	.word	0x080018cb
 800180c:	08001947 	.word	0x08001947
 8001810:	08001947 	.word	0x08001947
 8001814:	08001ac7 	.word	0x08001ac7
 8001818:	08001ac7 	.word	0x08001ac7
 800181c:	08001ac7 	.word	0x08001ac7
 8001820:	08001ac7 	.word	0x08001ac7
 8001824:	08001ac7 	.word	0x08001ac7
 8001828:	08001ac7 	.word	0x08001ac7
 800182c:	08001ac7 	.word	0x08001ac7
 8001830:	08001ac7 	.word	0x08001ac7
 8001834:	080019a1 	.word	0x080019a1
 8001838:	080019a1 	.word	0x080019a1
 800183c:	08001ac7 	.word	0x08001ac7
 8001840:	08001ac7 	.word	0x08001ac7
 8001844:	08001ac7 	.word	0x08001ac7
 8001848:	08001ac7 	.word	0x08001ac7
 800184c:	08001ac7 	.word	0x08001ac7
 8001850:	08001ac7 	.word	0x08001ac7
 8001854:	08001a1b 	.word	0x08001a1b
		{
			case MB_READ_COIL:
			case MB_READ_INPUT_STAT:
				// callback is issued before preparing the reply
				MB->hw_interface.MB_Request_Recieved(MB);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
				// encode the bits to be acquirted into the message
				MB_Encode_Coils(MB->Fcn == MB_READ_COIL ? MB->CoilBits : MB->InputBits, MB->Reg_Address, MB->TxBuffer + 3, MB->NumOfRegisters);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8001866:	2b01      	cmp	r3, #1
 8001868:	d102      	bne.n	8001870 <MB_Slave_ProcessMessage+0x134>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800186e:	e001      	b.n	8001874 <MB_Slave_ProcessMessage+0x138>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	1cda      	adds	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001886:	f7ff fac1 	bl	8000e0c <MB_Encode_Coils>
				MB->TxBuffer[2] = (MB->NumOfRegisters / 8) + (MB->NumOfRegisters % 8 ? 1 : 0);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	b29b      	uxth	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf14      	ite	ne
 80018a6:	2301      	movne	r3, #1
 80018a8:	2300      	moveq	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4619      	mov	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	3302      	adds	r3, #2
 80018b4:	440a      	add	r2, r1
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]
				memcpy(MB->TxBuffer, MB->RxBuffer, 2);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6892      	ldr	r2, [r2, #8]
 80018c2:	8812      	ldrh	r2, [r2, #0]
 80018c4:	b292      	uxth	r2, r2
 80018c6:	801a      	strh	r2, [r3, #0]
				break;
 80018c8:	e102      	b.n	8001ad0 <MB_Slave_ProcessMessage+0x394>

				// for read multiple holding registers.
			case MB_READ_MUL_HLD_REG:
			case MB_READ_INPUT_REG:
				// callback is issued before preparing the reply
				MB->hw_interface.MB_Request_Recieved(MB);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
				ptr = MB->Fcn == MB_READ_INPUT_REG ? MB->InputRegs : MB->HoldingRegs;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d102      	bne.n	80018e2 <MB_Slave_ProcessMessage+0x1a6>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	e001      	b.n	80018e6 <MB_Slave_ProcessMessage+0x1aa>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	613b      	str	r3, [r7, #16]
				// encode the registers
				for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	83fb      	strh	r3, [r7, #30]
 80018ec:	e013      	b.n	8001916 <MB_Slave_ProcessMessage+0x1da>
				{
					MB_Encode_UInt16(MB->TxBuffer + 3, ptr[x + MB->Reg_Address], &Off);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	1cd8      	adds	r0, r3, #3
 80018f4:	8bfb      	ldrh	r3, [r7, #30]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 80018fc:	4413      	add	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4413      	add	r3, r2
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	f107 020e 	add.w	r2, r7, #14
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff fada 	bl	8000ec4 <MB_Encode_UInt16>
				for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 8001910:	8bfb      	ldrh	r3, [r7, #30]
 8001912:	3301      	adds	r3, #1
 8001914:	83fb      	strh	r3, [r7, #30]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800191c:	8bfa      	ldrh	r2, [r7, #30]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3e5      	bcc.n	80018ee <MB_Slave_ProcessMessage+0x1b2>
				}

				memcpy(MB->TxBuffer, MB->RxBuffer, 2);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6892      	ldr	r2, [r2, #8]
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	b292      	uxth	r2, r2
 800192e:	801a      	strh	r2, [r3, #0]
				// compute and load the byte count
				MB->TxBuffer[2] = 2 * MB->NumOfRegisters;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001936:	b2da      	uxtb	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	3302      	adds	r3, #2
 800193e:	0052      	lsls	r2, r2, #1
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]
				break;
 8001944:	e0c4      	b.n	8001ad0 <MB_Slave_ProcessMessage+0x394>

			case MB_FRC_SNG_COIL:
			case MB_PRST_SNG_REG:
				if (MB->Fcn == MB_FRC_SNG_COIL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 800194c:	2b05      	cmp	r3, #5
 800194e:	d10b      	bne.n	8001968 <MB_Slave_ProcessMessage+0x22c>
				{
					MB_Parse_Coils(MB->RxBuffer + 4, MB->Reg_Address, MB->CoilBits, 1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	1d18      	adds	r0, r3, #4
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001960:	2301      	movs	r3, #1
 8001962:	f7ff f9d1 	bl	8000d08 <MB_Parse_Coils>
 8001966:	e00e      	b.n	8001986 <MB_Slave_ProcessMessage+0x24a>
				}
				else
				{
					MB_Parse_UInt16(MB->RxBuffer + 4, &Off, &MB->HoldingRegs[MB->Reg_Address]);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	1d18      	adds	r0, r3, #4
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	441a      	add	r2, r3
 800197c:	f107 030e 	add.w	r3, r7, #14
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff fa1d 	bl	8000dc0 <MB_Parse_UInt16>
				}
				// callback is issued after parsing the data
				MB->hw_interface.MB_Request_Recieved(MB);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
				// copy the slave address, function code, reg address, numofregisters
				// to the TX Buffer
				memcpy(MB->TxBuffer, MB->RxBuffer, 6);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6858      	ldr	r0, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2206      	movs	r2, #6
 8001998:	4619      	mov	r1, r3
 800199a:	f002 ff8d 	bl	80048b8 <memcpy>
				break;
 800199e:	e097      	b.n	8001ad0 <MB_Slave_ProcessMessage+0x394>

				// num of registers here indicate the num of coil bits
			case MB_FRC_MUL_COILS:
			case MB_PRST_MUL_REGS:
				if (MB->Fcn == MB_FRC_MUL_COILS)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	d10d      	bne.n	80019c6 <MB_Slave_ProcessMessage+0x28a>
				{
					MB_Parse_Coils(MB->RxBuffer + 7, MB->Reg_Address, MB->CoilBits, MB->NumOfRegisters);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	1dd8      	adds	r0, r3, #7
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80019c0:	f7ff f9a2 	bl	8000d08 <MB_Parse_Coils>
 80019c4:	e01c      	b.n	8001a00 <MB_Slave_ProcessMessage+0x2c4>
				}
				else
				{
					for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	83bb      	strh	r3, [r7, #28]
 80019ca:	e013      	b.n	80019f4 <MB_Slave_ProcessMessage+0x2b8>
					{
						MB_Parse_UInt16(MB->RxBuffer + 7, &Off, &MB->HoldingRegs[x + MB->Reg_Address]);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	1dd8      	adds	r0, r3, #7
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	8bbb      	ldrh	r3, [r7, #28]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	f8b1 1056 	ldrh.w	r1, [r1, #86]	@ 0x56
 80019de:	440b      	add	r3, r1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	441a      	add	r2, r3
 80019e4:	f107 030e 	add.w	r3, r7, #14
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f9e9 	bl	8000dc0 <MB_Parse_UInt16>
					for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 80019ee:	8bbb      	ldrh	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	83bb      	strh	r3, [r7, #28]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80019fa:	8bba      	ldrh	r2, [r7, #28]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d3e5      	bcc.n	80019cc <MB_Slave_ProcessMessage+0x290>
					}
				}
				// callback is issued after parsing the data
				MB->hw_interface.MB_Request_Recieved(MB);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
				// copy the slave address, function code, reg address, numofregisters
				// to the TX Buffer
				memcpy(MB->TxBuffer, MB->RxBuffer, 6);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6858      	ldr	r0, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2206      	movs	r2, #6
 8001a12:	4619      	mov	r1, r3
 8001a14:	f002 ff50 	bl	80048b8 <memcpy>
				break;
 8001a18:	e05a      	b.n	8001ad0 <MB_Slave_ProcessMessage+0x394>

			case MB_PRST_READ_MUL_REGS:
				// preset the requested holding registers (the write part)
				for (uint16_t x = 0; x < MB->NumOfW_Regs; x++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	837b      	strh	r3, [r7, #26]
 8001a1e:	e014      	b.n	8001a4a <MB_Slave_ProcessMessage+0x30e>
				{
					MB_Parse_UInt16(MB->RxBuffer + 11, &Off, &MB->HoldingRegs[x + MB->Reg_Address_W]);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f103 000b 	add.w	r0, r3, #11
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	8b7b      	ldrh	r3, [r7, #26]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f8b1 1058 	ldrh.w	r1, [r1, #88]	@ 0x58
 8001a34:	440b      	add	r3, r1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	441a      	add	r2, r3
 8001a3a:	f107 030e 	add.w	r3, r7, #14
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f9be 	bl	8000dc0 <MB_Parse_UInt16>
				for (uint16_t x = 0; x < MB->NumOfW_Regs; x++)
 8001a44:	8b7b      	ldrh	r3, [r7, #26]
 8001a46:	3301      	adds	r3, #1
 8001a48:	837b      	strh	r3, [r7, #26]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8001a50:	8b7a      	ldrh	r2, [r7, #26]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d3e4      	bcc.n	8001a20 <MB_Slave_ProcessMessage+0x2e4>
				}
				// issue the callback before loading the data intot he buffer
				MB->hw_interface.MB_Request_Recieved(MB);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
				ptr = MB->HoldingRegs;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	613b      	str	r3, [r7, #16]
				// encode the registers (the read part)
				Off = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	81fb      	strh	r3, [r7, #14]
				for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	833b      	strh	r3, [r7, #24]
 8001a6c:	e013      	b.n	8001a96 <MB_Slave_ProcessMessage+0x35a>
				{
					MB_Encode_UInt16(MB->TxBuffer + 3, ptr[x + MB->Reg_Address], &Off);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	1cd8      	adds	r0, r3, #3
 8001a74:	8b3b      	ldrh	r3, [r7, #24]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8001a7c:	4413      	add	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4413      	add	r3, r2
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	f107 020e 	add.w	r2, r7, #14
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff fa1a 	bl	8000ec4 <MB_Encode_UInt16>
				for (uint16_t x = 0; x < MB->NumOfRegisters; x++)
 8001a90:	8b3b      	ldrh	r3, [r7, #24]
 8001a92:	3301      	adds	r3, #1
 8001a94:	833b      	strh	r3, [r7, #24]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001a9c:	8b3a      	ldrh	r2, [r7, #24]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3e5      	bcc.n	8001a6e <MB_Slave_ProcessMessage+0x332>
				}
				// load the byte count
				MB->TxBuffer[2] = 2 * MB->NumOfRegisters;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	0052      	lsls	r2, r2, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]
				// copy the slave address and functioncode from the incoming message
				memcpy(MB->TxBuffer, MB->RxBuffer, 2);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6892      	ldr	r2, [r2, #8]
 8001abe:	8812      	ldrh	r2, [r2, #0]
 8001ac0:	b292      	uxth	r2, r2
 8001ac2:	801a      	strh	r2, [r3, #0]
				break;
 8001ac4:	e004      	b.n	8001ad0 <MB_Slave_ProcessMessage+0x394>

				// for illegal function code
			default:
				MB_Slave_Prepare_Exception(MB, MB_ILLEGAL_FUNC);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fe10 	bl	80016ee <MB_Slave_Prepare_Exception>
				break;
 8001ace:	bf00      	nop
		}
	}
	MB->RX_LEN = 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	865a      	strh	r2, [r3, #50]	@ 0x32
	// compute the checksum
	crc = crc16(MB->TxBuffer, MB->TX_MSG_LEN - 2); // -2 to remove the CRC slots from the CRC calculation
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ae0:	3b02      	subs	r3, #2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f7ff f8c7 	bl	8000c7a <crc16>
 8001aec:	4603      	mov	r3, r0
 8001aee:	82fb      	strh	r3, [r7, #22]
	MB->TxBuffer[MB->TX_MSG_LEN - 2] = (uint8_t) (crc >> 8);
 8001af0:	8afb      	ldrh	r3, [r7, #22]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	b299      	uxth	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b00:	3b02      	subs	r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	b2ca      	uxtb	r2, r1
 8001b06:	701a      	strb	r2, [r3, #0]
	MB->TxBuffer[MB->TX_MSG_LEN - 1] = (uint8_t) (crc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b12:	3b01      	subs	r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	8afa      	ldrh	r2, [r7, #22]
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
	// ready to transmit
	MB->TX_Complete = 0;
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 8001b22:	f36f 0382 	bfc	r3, #2, #1
 8001b26:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
	MB->MB_Stat = MB_STAT_OK;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
}
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <HAL_Init+0x40>)
 8001b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <HAL_Init+0x40>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	@ (8001b78 <HAL_Init+0x40>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 f92b 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f000 f808 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6c:	f7fe fee8 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023c00 	.word	0x40023c00

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_InitTick+0x54>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_InitTick+0x58>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f943 	bl	8001e26 <HAL_SYSTICK_Config>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00e      	b.n	8001bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d80a      	bhi.n	8001bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f000 f90b 	bl	8001dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bbc:	4a06      	ldr	r2, [pc, #24]	@ (8001bd8 <HAL_InitTick+0x5c>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x20>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_IncTick+0x24>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <HAL_IncTick+0x24>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	20000228 	.word	0x20000228

08001c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return uwTick;
 8001c08:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <HAL_GetTick+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000228 	.word	0x20000228

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	@ (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff29 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff3e 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff31 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffa2 	bl	8001d78 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff feda 	bl	8001c04 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e099      	b.n	8001f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7c:	e00f      	b.n	8001e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7e:	f7ff fec1 	bl	8001c04 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d908      	bls.n	8001e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2203      	movs	r2, #3
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e078      	b.n	8001f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e8      	bne.n	8001e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <HAL_DMA_Init+0x158>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d107      	bne.n	8001f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f00:	4313      	orrs	r3, r2
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f023 0307 	bic.w	r3, r3, #7
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d117      	bne.n	8001f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00e      	beq.n	8001f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fb01 	bl	800254c <DMA_CheckFifoParam>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2240      	movs	r2, #64	@ 0x40
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e016      	b.n	8001f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fab8 	bl	80024e0 <DMA_CalcBaseAndBitshift>
 8001f70:	4603      	mov	r3, r0
 8001f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	223f      	movs	r2, #63	@ 0x3f
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	f010803f 	.word	0xf010803f

08001f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_DMA_Start_IT+0x26>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e040      	b.n	8002044 <HAL_DMA_Start_IT+0xa8>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d12f      	bne.n	8002036 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fa4a 	bl	8002484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	223f      	movs	r2, #63	@ 0x3f
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0216 	orr.w	r2, r2, #22
 800200a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0208 	orr.w	r2, r2, #8
 8002022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e005      	b.n	8002042 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800203e:	2302      	movs	r3, #2
 8002040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002042:	7dfb      	ldrb	r3, [r7, #23]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800205a:	f7ff fdd3 	bl	8001c04 <HAL_GetTick>
 800205e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d008      	beq.n	800207e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2280      	movs	r2, #128	@ 0x80
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e052      	b.n	8002124 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0216 	bic.w	r2, r2, #22
 800208c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800209c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <HAL_DMA_Abort+0x62>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ce:	e013      	b.n	80020f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d0:	f7ff fd98 	bl	8001c04 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d90c      	bls.n	80020f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2203      	movs	r2, #3
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e015      	b.n	8002124 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e4      	bne.n	80020d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	223f      	movs	r2, #63	@ 0x3f
 800210c:	409a      	lsls	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d004      	beq.n	800214a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2280      	movs	r2, #128	@ 0x80
 8002144:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e00c      	b.n	8002164 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2205      	movs	r2, #5
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800217c:	4b8e      	ldr	r3, [pc, #568]	@ (80023b8 <HAL_DMA_IRQHandler+0x248>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a8e      	ldr	r2, [pc, #568]	@ (80023bc <HAL_DMA_IRQHandler+0x24c>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	0a9b      	lsrs	r3, r3, #10
 8002188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	2208      	movs	r2, #8
 800219c:	409a      	lsls	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01a      	beq.n	80021dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0204 	bic.w	r2, r2, #4
 80021c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	2208      	movs	r2, #8
 80021ca:	409a      	lsls	r2, r3
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	2201      	movs	r2, #1
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d012      	beq.n	8002212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	2201      	movs	r2, #1
 8002200:	409a      	lsls	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220a:	f043 0202 	orr.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002216:	2204      	movs	r2, #4
 8002218:	409a      	lsls	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d012      	beq.n	8002248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00b      	beq.n	8002248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002234:	2204      	movs	r2, #4
 8002236:	409a      	lsls	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002240:	f043 0204 	orr.w	r2, r3, #4
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224c:	2210      	movs	r2, #16
 800224e:	409a      	lsls	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d043      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d03c      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	2210      	movs	r2, #16
 800226c:	409a      	lsls	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d018      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d108      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d024      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
 800229e:	e01f      	b.n	80022e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01b      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
 80022b0:	e016      	b.n	80022e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0208 	bic.w	r2, r2, #8
 80022ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e4:	2220      	movs	r2, #32
 80022e6:	409a      	lsls	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 808f 	beq.w	8002410 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8087 	beq.w	8002410 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	2220      	movs	r2, #32
 8002308:	409a      	lsls	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b05      	cmp	r3, #5
 8002318:	d136      	bne.n	8002388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0216 	bic.w	r2, r2, #22
 8002328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <HAL_DMA_IRQHandler+0x1da>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0208 	bic.w	r2, r2, #8
 8002358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	223f      	movs	r2, #63	@ 0x3f
 8002360:	409a      	lsls	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800237a:	2b00      	cmp	r3, #0
 800237c:	d07e      	beq.n	800247c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
        }
        return;
 8002386:	e079      	b.n	800247c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01d      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10d      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d031      	beq.n	8002410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
 80023b4:	e02c      	b.n	8002410 <HAL_DMA_IRQHandler+0x2a0>
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000
 80023bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d023      	beq.n	8002410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
 80023d0:	e01e      	b.n	8002410 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10f      	bne.n	8002400 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0210 	bic.w	r2, r2, #16
 80023ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002414:	2b00      	cmp	r3, #0
 8002416:	d032      	beq.n	800247e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d022      	beq.n	800246a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2205      	movs	r2, #5
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	3301      	adds	r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	d307      	bcc.n	8002458 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f2      	bne.n	800243c <HAL_DMA_IRQHandler+0x2cc>
 8002456:	e000      	b.n	800245a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002458:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
 800247a:	e000      	b.n	800247e <HAL_DMA_IRQHandler+0x30e>
        return;
 800247c:	bf00      	nop
    }
  }
}
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b40      	cmp	r3, #64	@ 0x40
 80024b0:	d108      	bne.n	80024c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024c2:	e007      	b.n	80024d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	60da      	str	r2, [r3, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	3b10      	subs	r3, #16
 80024f0:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <DMA_CalcBaseAndBitshift+0x64>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024fa:	4a13      	ldr	r2, [pc, #76]	@ (8002548 <DMA_CalcBaseAndBitshift+0x68>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d909      	bls.n	8002522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	1d1a      	adds	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002520:	e007      	b.n	8002532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	aaaaaaab 	.word	0xaaaaaaab
 8002548:	08004914 	.word	0x08004914

0800254c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11f      	bne.n	80025a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d856      	bhi.n	800261a <DMA_CheckFifoParam+0xce>
 800256c:	a201      	add	r2, pc, #4	@ (adr r2, 8002574 <DMA_CheckFifoParam+0x28>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	08002585 	.word	0x08002585
 8002578:	08002597 	.word	0x08002597
 800257c:	08002585 	.word	0x08002585
 8002580:	0800261b 	.word	0x0800261b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d046      	beq.n	800261e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002594:	e043      	b.n	800261e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800259e:	d140      	bne.n	8002622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a4:	e03d      	b.n	8002622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ae:	d121      	bne.n	80025f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d837      	bhi.n	8002626 <DMA_CheckFifoParam+0xda>
 80025b6:	a201      	add	r2, pc, #4	@ (adr r2, 80025bc <DMA_CheckFifoParam+0x70>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025d3 	.word	0x080025d3
 80025c4:	080025cd 	.word	0x080025cd
 80025c8:	080025e5 	.word	0x080025e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e030      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d025      	beq.n	800262a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e2:	e022      	b.n	800262a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025ec:	d11f      	bne.n	800262e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025f2:	e01c      	b.n	800262e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d903      	bls.n	8002602 <DMA_CheckFifoParam+0xb6>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d003      	beq.n	8002608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002600:	e018      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
      break;
 8002606:	e015      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      break;
 8002618:	e00b      	b.n	8002632 <DMA_CheckFifoParam+0xe6>
      break;
 800261a:	bf00      	nop
 800261c:	e00a      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e008      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e006      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e004      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e002      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;   
 800262e:	bf00      	nop
 8002630:	e000      	b.n	8002634 <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
    }
  } 
  
  return status; 
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e159      	b.n	8002914 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8148 	bne.w	800290e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a2 	beq.w	800290e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b57      	ldr	r3, [pc, #348]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a56      	ldr	r2, [pc, #344]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027e6:	4a52      	ldr	r2, [pc, #328]	@ (8002930 <HAL_GPIO_Init+0x2ec>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a49      	ldr	r2, [pc, #292]	@ (8002934 <HAL_GPIO_Init+0x2f0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d019      	beq.n	8002846 <HAL_GPIO_Init+0x202>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <HAL_GPIO_Init+0x2f4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0x1fe>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a47      	ldr	r2, [pc, #284]	@ (800293c <HAL_GPIO_Init+0x2f8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00d      	beq.n	800283e <HAL_GPIO_Init+0x1fa>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a46      	ldr	r2, [pc, #280]	@ (8002940 <HAL_GPIO_Init+0x2fc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0x1f6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a45      	ldr	r2, [pc, #276]	@ (8002944 <HAL_GPIO_Init+0x300>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_GPIO_Init+0x1f2>
 8002832:	2304      	movs	r3, #4
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002836:	2307      	movs	r3, #7
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x204>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x204>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	@ (8002930 <HAL_GPIO_Init+0x2ec>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a2f      	ldr	r2, [pc, #188]	@ (8002948 <HAL_GPIO_Init+0x304>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a24      	ldr	r2, [pc, #144]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ba:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028de:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e4:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002908:	4a0f      	ldr	r2, [pc, #60]	@ (8002948 <HAL_GPIO_Init+0x304>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f aea2 	bls.w	8002660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40013c00 	.word	0x40013c00

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002968:	e003      	b.n	8002972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	619a      	str	r2, [r3, #24]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e267      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d075      	beq.n	8002a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800299e:	4b88      	ldr	r3, [pc, #544]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d00c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4b85      	ldr	r3, [pc, #532]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d112      	bne.n	80029dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b6:	4b82      	ldr	r3, [pc, #520]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029c2:	d10b      	bne.n	80029dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d05b      	beq.n	8002a88 <HAL_RCC_OscConfig+0x108>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d157      	bne.n	8002a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e242      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e4:	d106      	bne.n	80029f4 <HAL_RCC_OscConfig+0x74>
 80029e6:	4b76      	ldr	r3, [pc, #472]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a75      	ldr	r2, [pc, #468]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e01d      	b.n	8002a30 <HAL_RCC_OscConfig+0xb0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x98>
 80029fe:	4b70      	ldr	r3, [pc, #448]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6f      	ldr	r2, [pc, #444]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6c      	ldr	r2, [pc, #432]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0xb0>
 8002a18:	4b69      	ldr	r3, [pc, #420]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a68      	ldr	r2, [pc, #416]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b66      	ldr	r3, [pc, #408]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a65      	ldr	r2, [pc, #404]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff f8e4 	bl	8001c04 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7ff f8e0 	bl	8001c04 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	@ 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e207      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0xc0>
 8002a5e:	e014      	b.n	8002a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff f8d0 	bl	8001c04 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7ff f8cc 	bl	8001c04 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	@ 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1f3      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	4b51      	ldr	r3, [pc, #324]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0xe8>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d063      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a96:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b47      	ldr	r3, [pc, #284]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b44      	ldr	r3, [pc, #272]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	4b41      	ldr	r3, [pc, #260]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x152>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e1c7      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4937      	ldr	r1, [pc, #220]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	e03a      	b.n	8002b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af0:	4b34      	ldr	r3, [pc, #208]	@ (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7ff f885 	bl	8001c04 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afe:	f7ff f881 	bl	8001c04 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1a8      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b28      	ldr	r3, [pc, #160]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4925      	ldr	r1, [pc, #148]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b32:	4b24      	ldr	r3, [pc, #144]	@ (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7ff f864 	bl	8001c04 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b40:	f7ff f860 	bl	8001c04 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e187      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d036      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d016      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <HAL_RCC_OscConfig+0x248>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7ff f844 	bl	8001c04 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7ff f840 	bl	8001c04 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e167      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_RCC_OscConfig+0x240>)
 8002b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x200>
 8002b9e:	e01b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba0:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <HAL_RCC_OscConfig+0x248>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba6:	f7ff f82d 	bl	8001c04 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	e00e      	b.n	8002bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bae:	f7ff f829 	bl	8001c04 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d907      	bls.n	8002bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e150      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	42470000 	.word	0x42470000
 8002bc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	4b88      	ldr	r3, [pc, #544]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ea      	bne.n	8002bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8097 	beq.w	8002d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bea:	4b81      	ldr	r3, [pc, #516]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c06:	4b7a      	ldr	r3, [pc, #488]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b77      	ldr	r3, [pc, #476]	@ (8002df4 <HAL_RCC_OscConfig+0x474>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b74      	ldr	r3, [pc, #464]	@ (8002df4 <HAL_RCC_OscConfig+0x474>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a73      	ldr	r2, [pc, #460]	@ (8002df4 <HAL_RCC_OscConfig+0x474>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe ffe9 	bl	8001c04 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7fe ffe5 	bl	8001c04 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e10c      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	4b6a      	ldr	r3, [pc, #424]	@ (8002df4 <HAL_RCC_OscConfig+0x474>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x2ea>
 8002c5c:	4b64      	ldr	r3, [pc, #400]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c60:	4a63      	ldr	r2, [pc, #396]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c68:	e01c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x324>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x30c>
 8002c72:	4b5f      	ldr	r3, [pc, #380]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c76:	4a5e      	ldr	r2, [pc, #376]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	4a5b      	ldr	r2, [pc, #364]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x324>
 8002c8c:	4b58      	ldr	r3, [pc, #352]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c90:	4a57      	ldr	r2, [pc, #348]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c98:	4b55      	ldr	r3, [pc, #340]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9c:	4a54      	ldr	r2, [pc, #336]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d015      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe ffaa 	bl	8001c04 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe ffa6 	bl	8001c04 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e0cb      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	4b49      	ldr	r3, [pc, #292]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0ee      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x334>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd8:	f7fe ff94 	bl	8001c04 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe ff90 	bl	8001c04 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0b5      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ee      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d08:	4b39      	ldr	r3, [pc, #228]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	4a38      	ldr	r2, [pc, #224]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80a1 	beq.w	8002e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d1e:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d05c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d141      	bne.n	8002db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	4b31      	ldr	r3, [pc, #196]	@ (8002df8 <HAL_RCC_OscConfig+0x478>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe ff64 	bl	8001c04 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe ff60 	bl	8001c04 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e087      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	3b01      	subs	r3, #1
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	491b      	ldr	r1, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_RCC_OscConfig+0x478>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe ff39 	bl	8001c04 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7fe ff35 	bl	8001c04 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e05c      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da8:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x416>
 8002db4:	e054      	b.n	8002e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <HAL_RCC_OscConfig+0x478>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe ff22 	bl	8001c04 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe ff1e 	bl	8001c04 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e045      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x444>
 8002de2:	e03d      	b.n	8002e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e038      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000
 8002df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <HAL_RCC_OscConfig+0x4ec>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d028      	beq.n	8002e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d121      	bne.n	8002e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d11a      	bne.n	8002e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d111      	bne.n	8002e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	3b01      	subs	r3, #1
 8002e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800

08002e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0cc      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e84:	4b68      	ldr	r3, [pc, #416]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d90c      	bls.n	8002eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b65      	ldr	r3, [pc, #404]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b63      	ldr	r3, [pc, #396]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0b8      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d020      	beq.n	8002efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec4:	4b59      	ldr	r3, [pc, #356]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a58      	ldr	r2, [pc, #352]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ece:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a52      	ldr	r2, [pc, #328]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b50      	ldr	r3, [pc, #320]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	494d      	ldr	r1, [pc, #308]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d044      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b47      	ldr	r3, [pc, #284]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d119      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e07f      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06f      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e067      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4e:	4b37      	ldr	r3, [pc, #220]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4934      	ldr	r1, [pc, #208]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f60:	f7fe fe50 	bl	8001c04 <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7fe fe4c 	bl	8001c04 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e04f      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1eb      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f90:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d20c      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e032      	b.n	800301e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc4:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4916      	ldr	r1, [pc, #88]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe2:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	490e      	ldr	r1, [pc, #56]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ff6:	f000 f821 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	490a      	ldr	r1, [pc, #40]	@ (8003030 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	5ccb      	ldrb	r3, [r1, r3]
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	4a09      	ldr	r2, [pc, #36]	@ (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fdb0 	bl	8001b7c <HAL_InitTick>

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023c00 	.word	0x40023c00
 800302c:	40023800 	.word	0x40023800
 8003030:	080048ec 	.word	0x080048ec
 8003034:	20000000 	.word	0x20000000
 8003038:	20000004 	.word	0x20000004

0800303c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800303c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003040:	b090      	sub	sp, #64	@ 0x40
 8003042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003054:	4b59      	ldr	r3, [pc, #356]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b08      	cmp	r3, #8
 800305e:	d00d      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x40>
 8003060:	2b08      	cmp	r3, #8
 8003062:	f200 80a1 	bhi.w	80031a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x34>
 800306a:	2b04      	cmp	r3, #4
 800306c:	d003      	beq.n	8003076 <HAL_RCC_GetSysClockFreq+0x3a>
 800306e:	e09b      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003070:	4b53      	ldr	r3, [pc, #332]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003074:	e09b      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003076:	4b53      	ldr	r3, [pc, #332]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003078:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800307a:	e098      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800307c:	4b4f      	ldr	r3, [pc, #316]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x180>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003086:	4b4d      	ldr	r3, [pc, #308]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d028      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003092:	4b4a      	ldr	r3, [pc, #296]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	099b      	lsrs	r3, r3, #6
 8003098:	2200      	movs	r2, #0
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	627a      	str	r2, [r7, #36]	@ 0x24
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030a4:	2100      	movs	r1, #0
 80030a6:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80030a8:	fb03 f201 	mul.w	r2, r3, r1
 80030ac:	2300      	movs	r3, #0
 80030ae:	fb00 f303 	mul.w	r3, r0, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	4a43      	ldr	r2, [pc, #268]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80030b6:	fba0 1202 	umull	r1, r2, r0, r2
 80030ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030bc:	460a      	mov	r2, r1
 80030be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c2:	4413      	add	r3, r2
 80030c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c8:	2200      	movs	r2, #0
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	61fa      	str	r2, [r7, #28]
 80030ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030d6:	f7fd f87f 	bl	80001d8 <__aeabi_uldivmod>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4613      	mov	r3, r2
 80030e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030e2:	e053      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e4:	4b35      	ldr	r3, [pc, #212]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x180>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	2200      	movs	r2, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	617a      	str	r2, [r7, #20]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030f6:	f04f 0b00 	mov.w	fp, #0
 80030fa:	4652      	mov	r2, sl
 80030fc:	465b      	mov	r3, fp
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	0159      	lsls	r1, r3, #5
 8003108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310c:	0150      	lsls	r0, r2, #5
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	ebb2 080a 	subs.w	r8, r2, sl
 8003116:	eb63 090b 	sbc.w	r9, r3, fp
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003126:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800312a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800312e:	ebb2 0408 	subs.w	r4, r2, r8
 8003132:	eb63 0509 	sbc.w	r5, r3, r9
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	00eb      	lsls	r3, r5, #3
 8003140:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003144:	00e2      	lsls	r2, r4, #3
 8003146:	4614      	mov	r4, r2
 8003148:	461d      	mov	r5, r3
 800314a:	eb14 030a 	adds.w	r3, r4, sl
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	eb45 030b 	adc.w	r3, r5, fp
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003162:	4629      	mov	r1, r5
 8003164:	028b      	lsls	r3, r1, #10
 8003166:	4621      	mov	r1, r4
 8003168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800316c:	4621      	mov	r1, r4
 800316e:	028a      	lsls	r2, r1, #10
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	2200      	movs	r2, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	60fa      	str	r2, [r7, #12]
 800317c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003180:	f7fd f82a 	bl	80001d8 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x180>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	3301      	adds	r3, #1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800319c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031a6:	e002      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80031aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3740      	adds	r7, #64	@ 0x40
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	017d7840 	.word	0x017d7840

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b03      	ldr	r3, [pc, #12]	@ (80031dc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000000 	.word	0x20000000

080031e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031e4:	f7ff fff0 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0a9b      	lsrs	r3, r3, #10
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	@ (8003204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	080048fc 	.word	0x080048fc

08003208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800320c:	f7ff ffdc 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	@ (8003228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0b5b      	lsrs	r3, r3, #13
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4903      	ldr	r1, [pc, #12]	@ (800322c <HAL_RCC_GetPCLK2Freq+0x24>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	080048fc 	.word	0x080048fc

08003230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e04d      	b.n	80032de <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d111      	bne.n	8003272 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fcdc 	bl	8003c14 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a20      	ldr	r2, [pc, #128]	@ (80032e8 <HAL_UART_Init+0xb8>)
 8003268:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2224      	movs	r2, #36	@ 0x24
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003288:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 ffa6 	bl	80041dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800329e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	08000991 	.word	0x08000991

080032ec <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	460b      	mov	r3, r1
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e07c      	b.n	800340e <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b20      	cmp	r3, #32
 800331e:	d150      	bne.n	80033c2 <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 8003320:	7afb      	ldrb	r3, [r7, #11]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d844      	bhi.n	80033b0 <HAL_UART_RegisterCallback+0xc4>
 8003326:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <HAL_UART_RegisterCallback+0x40>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003361 	.word	0x08003361
 8003330:	08003369 	.word	0x08003369
 8003334:	08003371 	.word	0x08003371
 8003338:	08003379 	.word	0x08003379
 800333c:	08003381 	.word	0x08003381
 8003340:	08003389 	.word	0x08003389
 8003344:	08003391 	.word	0x08003391
 8003348:	08003399 	.word	0x08003399
 800334c:	080033b1 	.word	0x080033b1
 8003350:	080033b1 	.word	0x080033b1
 8003354:	080033b1 	.word	0x080033b1
 8003358:	080033a1 	.word	0x080033a1
 800335c:	080033a9 	.word	0x080033a9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8003366:	e051      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800336e:	e04d      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003376:	e049      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800337e:	e045      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003386:	e041      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800338e:	e03d      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003396:	e039      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800339e:	e035      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80033a6:	e031      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80033ae:	e02d      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	75fb      	strb	r3, [r7, #23]
        break;
 80033c0:	e024      	b.n	800340c <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80033ce:	7afb      	ldrb	r3, [r7, #11]
 80033d0:	2b0b      	cmp	r3, #11
 80033d2:	d002      	beq.n	80033da <HAL_UART_RegisterCallback+0xee>
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	d004      	beq.n	80033e2 <HAL_UART_RegisterCallback+0xf6>
 80033d8:	e007      	b.n	80033ea <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80033e0:	e014      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80033e8:	e010      	b.n	800340c <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
        break;
 80033fa:	e007      	b.n	800340c <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_UART_RegisterRxEventCallback+0x24>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e021      	b.n	8003484 <HAL_UART_RegisterRxEventCallback+0x68>
  }

  /* Process locked */
  __HAL_LOCK(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_UART_RegisterRxEventCallback+0x32>
 800344a:	2302      	movs	r3, #2
 800344c:	e01a      	b.n	8003484 <HAL_UART_RegisterRxEventCallback+0x68>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (huart->gState == HAL_UART_STATE_READY)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	d103      	bne.n	800346a <HAL_UART_RegisterRxEventCallback+0x4e>
  {
    huart->RxEventCallback = pCallback;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003468:	e007      	b.n	800347a <HAL_UART_RegisterRxEventCallback+0x5e>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	f043 0220 	orr.w	r2, r3, #32
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44

    status =  HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08c      	sub	sp, #48	@ 0x30
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d156      	bne.n	8003558 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_Transmit_DMA+0x26>
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e04f      	b.n	800355a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2221      	movs	r2, #33	@ 0x21
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034de:	4a21      	ldr	r2, [pc, #132]	@ (8003564 <HAL_UART_Transmit_DMA+0xd4>)
 80034e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e6:	4a20      	ldr	r2, [pc, #128]	@ (8003568 <HAL_UART_Transmit_DMA+0xd8>)
 80034e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ee:	4a1f      	ldr	r2, [pc, #124]	@ (800356c <HAL_UART_Transmit_DMA+0xdc>)
 80034f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f6:	2200      	movs	r2, #0
 80034f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80034fa:	f107 0308 	add.w	r3, r7, #8
 80034fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3304      	adds	r3, #4
 800350e:	461a      	mov	r2, r3
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	f7fe fd43 	bl	8001f9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800351e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3314      	adds	r3, #20
 8003526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	617b      	str	r3, [r7, #20]
   return(result);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003536:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3314      	adds	r3, #20
 800353e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003540:	627a      	str	r2, [r7, #36]	@ 0x24
 8003542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6a39      	ldr	r1, [r7, #32]
 8003546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	61fb      	str	r3, [r7, #28]
   return(result);
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e5      	bne.n	8003520 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e000      	b.n	800355a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	3730      	adds	r7, #48	@ 0x30
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	08003c85 	.word	0x08003c85
 8003568:	08003d21 	.word	0x08003d21
 800356c:	08003d3f 	.word	0x08003d3f

08003570 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	@ 0x30
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b20      	cmp	r3, #32
 8003588:	d14a      	bne.n	8003620 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e043      	b.n	8003622 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	461a      	mov	r2, r3
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fc11 	bl	8003dd4 <UART_Start_Receive_IT>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80035b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d12c      	bne.n	800361a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d125      	bne.n	8003614 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	617b      	str	r3, [r7, #20]
   return(result);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f043 0310 	orr.w	r3, r3, #16
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8003600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6a39      	ldr	r1, [r7, #32]
 8003604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	61fb      	str	r3, [r7, #28]
   return(result);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e5      	bne.n	80035de <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003612:	e002      	b.n	800361a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800361a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800361e:	e000      	b.n	8003622 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3730      	adds	r7, #48	@ 0x30
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b0ba      	sub	sp, #232	@ 0xe8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800365e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800366a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_UART_IRQHandler+0x66>
 800367e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fce5 	bl	800405a <UART_Receive_IT>
      return;
 8003690:	e260      	b.n	8003b54 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80e1 	beq.w	800385e <HAL_UART_IRQHandler+0x232>
 800369c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80d4 	beq.w	800385e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_UART_IRQHandler+0xae>
 80036c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_UART_IRQHandler+0xd2>
 80036e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	f043 0202 	orr.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_UART_IRQHandler+0xf6>
 800370a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f043 0204 	orr.w	r2, r3, #4
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d011      	beq.n	8003752 <HAL_UART_IRQHandler+0x126>
 800372e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d105      	bne.n	8003746 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800373a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f043 0208 	orr.w	r2, r3, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 81f7 	beq.w	8003b4a <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800375c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_UART_IRQHandler+0x14e>
 8003768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fc70 	bl	800405a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003784:	2b40      	cmp	r3, #64	@ 0x40
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <HAL_UART_IRQHandler+0x17a>
 800379e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d051      	beq.n	800384a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fb76 	bl	8003e98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b6:	2b40      	cmp	r3, #64	@ 0x40
 80037b8:	d142      	bne.n	8003840 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3314      	adds	r3, #20
 80037c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3314      	adds	r3, #20
 80037e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1d9      	bne.n	80037ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d013      	beq.n	8003836 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003812:	4a80      	ldr	r2, [pc, #512]	@ (8003a14 <HAL_UART_IRQHandler+0x3e8>)
 8003814:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fc86 	bl	800212c <HAL_DMA_Abort_IT>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d019      	beq.n	800385a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003830:	4610      	mov	r0, r2
 8003832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e011      	b.n	800385a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383e:	e00c      	b.n	800385a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e007      	b.n	800385a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003858:	e177      	b.n	8003b4a <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385a:	bf00      	nop
    return;
 800385c:	e175      	b.n	8003b4a <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	2b01      	cmp	r3, #1
 8003864:	f040 8151 	bne.w	8003b0a <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 814a 	beq.w	8003b0a <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8143 	beq.w	8003b0a <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a4:	2b40      	cmp	r3, #64	@ 0x40
 80038a6:	f040 80b7 	bne.w	8003a18 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8147 	beq.w	8003b4e <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038c8:	429a      	cmp	r2, r3
 80038ca:	f080 8140 	bcs.w	8003b4e <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e0:	f000 8088 	beq.w	80039f4 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003910:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003914:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800391c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1d9      	bne.n	80038e4 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3314      	adds	r3, #20
 8003936:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003940:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003954:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003958:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800395c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e1      	bne.n	8003930 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800397c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800397e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3314      	adds	r3, #20
 800398c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003990:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003992:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003996:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800399e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e3      	bne.n	800396c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c4:	f023 0310 	bic.w	r3, r3, #16
 80039c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039d8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e3      	bne.n	80039b2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fb2c 	bl	800204c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8003a06:	b292      	uxth	r2, r2
 8003a08:	1a8a      	subs	r2, r1, r2
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a12:	e09c      	b.n	8003b4e <HAL_UART_IRQHandler+0x522>
 8003a14:	08003f5f 	.word	0x08003f5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 808f 	beq.w	8003b52 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8003a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 808a 	beq.w	8003b52 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a62:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e3      	bne.n	8003a3e <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	623b      	str	r3, [r7, #32]
   return(result);
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3314      	adds	r3, #20
 8003a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e3      	bne.n	8003a76 <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0310 	bic.w	r3, r3, #16
 8003ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ae0:	61fa      	str	r2, [r7, #28]
 8003ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	617b      	str	r3, [r7, #20]
   return(result);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e3      	bne.n	8003abc <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003afe:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8003b02:	4611      	mov	r1, r2
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b08:	e023      	b.n	8003b52 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_UART_IRQHandler+0x4fe>
 8003b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fa30 	bl	8003f88 <UART_Transmit_IT>
    return;
 8003b28:	e014      	b.n	8003b54 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <HAL_UART_IRQHandler+0x528>
 8003b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa70 	bl	8004028 <UART_EndTransmit_IT>
    return;
 8003b48:	e004      	b.n	8003b54 <HAL_UART_IRQHandler+0x528>
    return;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <HAL_UART_IRQHandler+0x528>
      return;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HAL_UART_IRQHandler+0x528>
      return;
 8003b52:	bf00      	nop
  }
}
 8003b54:	37e8      	adds	r7, #232	@ 0xe8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop

08003b5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a10      	ldr	r2, [pc, #64]	@ (8003c60 <UART_InitCallbacksToDefault+0x4c>)
 8003c20:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a0f      	ldr	r2, [pc, #60]	@ (8003c64 <UART_InitCallbacksToDefault+0x50>)
 8003c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c68 <UART_InitCallbacksToDefault+0x54>)
 8003c2c:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a0e      	ldr	r2, [pc, #56]	@ (8003c6c <UART_InitCallbacksToDefault+0x58>)
 8003c32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0e      	ldr	r2, [pc, #56]	@ (8003c70 <UART_InitCallbacksToDefault+0x5c>)
 8003c38:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c74 <UART_InitCallbacksToDefault+0x60>)
 8003c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0d      	ldr	r2, [pc, #52]	@ (8003c78 <UART_InitCallbacksToDefault+0x64>)
 8003c44:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a0c      	ldr	r2, [pc, #48]	@ (8003c7c <UART_InitCallbacksToDefault+0x68>)
 8003c4a:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c80 <UART_InitCallbacksToDefault+0x6c>)
 8003c50:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	08003b71 	.word	0x08003b71
 8003c64:	08003b5d 	.word	0x08003b5d
 8003c68:	08003b99 	.word	0x08003b99
 8003c6c:	08003b85 	.word	0x08003b85
 8003c70:	08003bad 	.word	0x08003bad
 8003c74:	08003bc1 	.word	0x08003bc1
 8003c78:	08003bd5 	.word	0x08003bd5
 8003c7c:	08003be9 	.word	0x08003be9
 8003c80:	08003bfd 	.word	0x08003bfd

08003c84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b090      	sub	sp, #64	@ 0x40
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d137      	bne.n	8003d10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e5      	bne.n	8003ca6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cfa:	61fa      	str	r2, [r7, #28]
 8003cfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	69b9      	ldr	r1, [r7, #24]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	617b      	str	r3, [r7, #20]
   return(result);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e5      	bne.n	8003cda <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d0e:	e003      	b.n	8003d18 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8003d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d14:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003d16:	4798      	blx	r3
}
 8003d18:	bf00      	nop
 8003d1a:	3740      	adds	r7, #64	@ 0x40
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5a:	2b80      	cmp	r3, #128	@ 0x80
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b21      	cmp	r3, #33	@ 0x21
 8003d70:	d108      	bne.n	8003d84 <UART_DMAError+0x46>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003d7e:	68b8      	ldr	r0, [r7, #8]
 8003d80:	f000 f862 	bl	8003e48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b40      	cmp	r3, #64	@ 0x40
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b22      	cmp	r3, #34	@ 0x22
 8003da4:	d108      	bne.n	8003db8 <UART_DMAError+0x7a>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2200      	movs	r2, #0
 8003db0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003db2:	68b8      	ldr	r0, [r7, #8]
 8003db4:	f000 f870 	bl	8003e98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbc:	f043 0210 	orr.w	r2, r3, #16
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	68b8      	ldr	r0, [r7, #8]
 8003dca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	88fa      	ldrh	r2, [r7, #6]
 8003dec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2222      	movs	r2, #34	@ 0x22
 8003dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0220 	orr.w	r2, r2, #32
 8003e38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	@ 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	330c      	adds	r3, #12
 8003e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	61ba      	str	r2, [r7, #24]
 8003e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6979      	ldr	r1, [r7, #20]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e5      	bne.n	8003e50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003e8c:	bf00      	nop
 8003e8e:	3724      	adds	r7, #36	@ 0x24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b095      	sub	sp, #84	@ 0x54
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ec0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ec6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ec8:	e841 2300 	strex	r3, r2, [r1]
 8003ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e5      	bne.n	8003ea0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3314      	adds	r3, #20
 8003ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e5      	bne.n	8003ed4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d119      	bne.n	8003f44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f023 0310 	bic.w	r3, r3, #16
 8003f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f30:	61ba      	str	r2, [r7, #24]
 8003f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6979      	ldr	r1, [r7, #20]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e5      	bne.n	8003f10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f52:	bf00      	nop
 8003f54:	3754      	adds	r7, #84	@ 0x54
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b21      	cmp	r3, #33	@ 0x21
 8003f9a:	d13e      	bne.n	800401a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa4:	d114      	bne.n	8003fd0 <UART_Transmit_IT+0x48>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d110      	bne.n	8003fd0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	1c9a      	adds	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]
 8003fce:	e008      	b.n	8003fe2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	1c59      	adds	r1, r3, #1
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6211      	str	r1, [r2, #32]
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004004:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004014:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800403e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08c      	sub	sp, #48	@ 0x30
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b22      	cmp	r3, #34	@ 0x22
 800406c:	f040 80b0 	bne.w	80041d0 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004078:	d117      	bne.n	80040aa <UART_Receive_IT+0x50>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d113      	bne.n	80040aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004098:	b29a      	uxth	r2, r3
 800409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80040a8:	e026      	b.n	80040f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040bc:	d007      	beq.n	80040ce <UART_Receive_IT+0x74>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <UART_Receive_IT+0x82>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	e008      	b.n	80040ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29b      	uxth	r3, r3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4619      	mov	r1, r3
 8004106:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004108:	2b00      	cmp	r3, #0
 800410a:	d15f      	bne.n	80041cc <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0220 	bic.w	r2, r2, #32
 800411a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800412a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	2b01      	cmp	r3, #1
 8004150:	d136      	bne.n	80041c0 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	613b      	str	r3, [r7, #16]
   return(result);
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f023 0310 	bic.w	r3, r3, #16
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	330c      	adds	r3, #12
 8004176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004178:	623a      	str	r2, [r7, #32]
 800417a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	69f9      	ldr	r1, [r7, #28]
 800417e:	6a3a      	ldr	r2, [r7, #32]
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	61bb      	str	r3, [r7, #24]
   return(result);
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e5      	bne.n	8004158 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b10      	cmp	r3, #16
 8004198:	d10a      	bne.n	80041b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80041b8:	4611      	mov	r1, r2
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
 80041be:	e003      	b.n	80041c8 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e002      	b.n	80041d2 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3730      	adds	r7, #48	@ 0x30
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b0c0      	sub	sp, #256	@ 0x100
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	68d9      	ldr	r1, [r3, #12]
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	ea40 0301 	orr.w	r3, r0, r1
 8004204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	431a      	orrs	r2, r3
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	431a      	orrs	r2, r3
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004234:	f021 010c 	bic.w	r1, r1, #12
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004242:	430b      	orrs	r3, r1
 8004244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004256:	6999      	ldr	r1, [r3, #24]
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	ea40 0301 	orr.w	r3, r0, r1
 8004262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b8f      	ldr	r3, [pc, #572]	@ (80044a8 <UART_SetConfig+0x2cc>)
 800426c:	429a      	cmp	r2, r3
 800426e:	d005      	beq.n	800427c <UART_SetConfig+0xa0>
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4b8d      	ldr	r3, [pc, #564]	@ (80044ac <UART_SetConfig+0x2d0>)
 8004278:	429a      	cmp	r2, r3
 800427a:	d104      	bne.n	8004286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800427c:	f7fe ffc4 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8004280:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004284:	e003      	b.n	800428e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004286:	f7fe ffab 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 800428a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004298:	f040 810c 	bne.w	80044b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800429c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	1891      	adds	r1, r2, r2
 80042b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042b6:	415b      	adcs	r3, r3
 80042b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042be:	4621      	mov	r1, r4
 80042c0:	eb12 0801 	adds.w	r8, r2, r1
 80042c4:	4629      	mov	r1, r5
 80042c6:	eb43 0901 	adc.w	r9, r3, r1
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042de:	4690      	mov	r8, r2
 80042e0:	4699      	mov	r9, r3
 80042e2:	4623      	mov	r3, r4
 80042e4:	eb18 0303 	adds.w	r3, r8, r3
 80042e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042ec:	462b      	mov	r3, r5
 80042ee:	eb49 0303 	adc.w	r3, r9, r3
 80042f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004302:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800430a:	460b      	mov	r3, r1
 800430c:	18db      	adds	r3, r3, r3
 800430e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004310:	4613      	mov	r3, r2
 8004312:	eb42 0303 	adc.w	r3, r2, r3
 8004316:	657b      	str	r3, [r7, #84]	@ 0x54
 8004318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800431c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004320:	f7fb ff5a 	bl	80001d8 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4b61      	ldr	r3, [pc, #388]	@ (80044b0 <UART_SetConfig+0x2d4>)
 800432a:	fba3 2302 	umull	r2, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	011c      	lsls	r4, r3, #4
 8004332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800433c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	1891      	adds	r1, r2, r2
 800434a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800434c:	415b      	adcs	r3, r3
 800434e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004354:	4641      	mov	r1, r8
 8004356:	eb12 0a01 	adds.w	sl, r2, r1
 800435a:	4649      	mov	r1, r9
 800435c:	eb43 0b01 	adc.w	fp, r3, r1
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800436c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004374:	4692      	mov	sl, r2
 8004376:	469b      	mov	fp, r3
 8004378:	4643      	mov	r3, r8
 800437a:	eb1a 0303 	adds.w	r3, sl, r3
 800437e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004382:	464b      	mov	r3, r9
 8004384:	eb4b 0303 	adc.w	r3, fp, r3
 8004388:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004398:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800439c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043a0:	460b      	mov	r3, r1
 80043a2:	18db      	adds	r3, r3, r3
 80043a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043a6:	4613      	mov	r3, r2
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043b6:	f7fb ff0f 	bl	80001d8 <__aeabi_uldivmod>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	4b3b      	ldr	r3, [pc, #236]	@ (80044b0 <UART_SetConfig+0x2d4>)
 80043c2:	fba3 2301 	umull	r2, r3, r3, r1
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2264      	movs	r2, #100	@ 0x64
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	1acb      	subs	r3, r1, r3
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043d6:	4b36      	ldr	r3, [pc, #216]	@ (80044b0 <UART_SetConfig+0x2d4>)
 80043d8:	fba3 2302 	umull	r2, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043e4:	441c      	add	r4, r3
 80043e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004400:	415b      	adcs	r3, r3
 8004402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004408:	4641      	mov	r1, r8
 800440a:	1851      	adds	r1, r2, r1
 800440c:	6339      	str	r1, [r7, #48]	@ 0x30
 800440e:	4649      	mov	r1, r9
 8004410:	414b      	adcs	r3, r1
 8004412:	637b      	str	r3, [r7, #52]	@ 0x34
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004420:	4659      	mov	r1, fp
 8004422:	00cb      	lsls	r3, r1, #3
 8004424:	4651      	mov	r1, sl
 8004426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442a:	4651      	mov	r1, sl
 800442c:	00ca      	lsls	r2, r1, #3
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	4603      	mov	r3, r0
 8004434:	4642      	mov	r2, r8
 8004436:	189b      	adds	r3, r3, r2
 8004438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800443c:	464b      	mov	r3, r9
 800443e:	460a      	mov	r2, r1
 8004440:	eb42 0303 	adc.w	r3, r2, r3
 8004444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004454:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800445c:	460b      	mov	r3, r1
 800445e:	18db      	adds	r3, r3, r3
 8004460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004462:	4613      	mov	r3, r2
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800446a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800446e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004472:	f7fb feb1 	bl	80001d8 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <UART_SetConfig+0x2d4>)
 800447c:	fba3 1302 	umull	r1, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	2164      	movs	r1, #100	@ 0x64
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	3332      	adds	r3, #50	@ 0x32
 800448e:	4a08      	ldr	r2, [pc, #32]	@ (80044b0 <UART_SetConfig+0x2d4>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	f003 0207 	and.w	r2, r3, #7
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4422      	add	r2, r4
 80044a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044a4:	e106      	b.n	80046b4 <UART_SetConfig+0x4d8>
 80044a6:	bf00      	nop
 80044a8:	40011000 	.word	0x40011000
 80044ac:	40011400 	.word	0x40011400
 80044b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044c6:	4642      	mov	r2, r8
 80044c8:	464b      	mov	r3, r9
 80044ca:	1891      	adds	r1, r2, r2
 80044cc:	6239      	str	r1, [r7, #32]
 80044ce:	415b      	adcs	r3, r3
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044d6:	4641      	mov	r1, r8
 80044d8:	1854      	adds	r4, r2, r1
 80044da:	4649      	mov	r1, r9
 80044dc:	eb43 0501 	adc.w	r5, r3, r1
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	00eb      	lsls	r3, r5, #3
 80044ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ee:	00e2      	lsls	r2, r4, #3
 80044f0:	4614      	mov	r4, r2
 80044f2:	461d      	mov	r5, r3
 80044f4:	4643      	mov	r3, r8
 80044f6:	18e3      	adds	r3, r4, r3
 80044f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044fc:	464b      	mov	r3, r9
 80044fe:	eb45 0303 	adc.w	r3, r5, r3
 8004502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004512:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004522:	4629      	mov	r1, r5
 8004524:	008b      	lsls	r3, r1, #2
 8004526:	4621      	mov	r1, r4
 8004528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452c:	4621      	mov	r1, r4
 800452e:	008a      	lsls	r2, r1, #2
 8004530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004534:	f7fb fe50 	bl	80001d8 <__aeabi_uldivmod>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4b60      	ldr	r3, [pc, #384]	@ (80046c0 <UART_SetConfig+0x4e4>)
 800453e:	fba3 2302 	umull	r2, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	011c      	lsls	r4, r3, #4
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004550:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	1891      	adds	r1, r2, r2
 800455e:	61b9      	str	r1, [r7, #24]
 8004560:	415b      	adcs	r3, r3
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004568:	4641      	mov	r1, r8
 800456a:	1851      	adds	r1, r2, r1
 800456c:	6139      	str	r1, [r7, #16]
 800456e:	4649      	mov	r1, r9
 8004570:	414b      	adcs	r3, r1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004580:	4659      	mov	r1, fp
 8004582:	00cb      	lsls	r3, r1, #3
 8004584:	4651      	mov	r1, sl
 8004586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458a:	4651      	mov	r1, sl
 800458c:	00ca      	lsls	r2, r1, #3
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	4603      	mov	r3, r0
 8004594:	4642      	mov	r2, r8
 8004596:	189b      	adds	r3, r3, r2
 8004598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800459c:	464b      	mov	r3, r9
 800459e:	460a      	mov	r2, r1
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045c0:	4649      	mov	r1, r9
 80045c2:	008b      	lsls	r3, r1, #2
 80045c4:	4641      	mov	r1, r8
 80045c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ca:	4641      	mov	r1, r8
 80045cc:	008a      	lsls	r2, r1, #2
 80045ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045d2:	f7fb fe01 	bl	80001d8 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	4b38      	ldr	r3, [pc, #224]	@ (80046c0 <UART_SetConfig+0x4e4>)
 80045de:	fba3 2301 	umull	r2, r3, r3, r1
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2264      	movs	r2, #100	@ 0x64
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	1acb      	subs	r3, r1, r3
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	3332      	adds	r3, #50	@ 0x32
 80045f0:	4a33      	ldr	r2, [pc, #204]	@ (80046c0 <UART_SetConfig+0x4e4>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045fc:	441c      	add	r4, r3
 80045fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004602:	2200      	movs	r2, #0
 8004604:	673b      	str	r3, [r7, #112]	@ 0x70
 8004606:	677a      	str	r2, [r7, #116]	@ 0x74
 8004608:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	415b      	adcs	r3, r3
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800461c:	4641      	mov	r1, r8
 800461e:	1851      	adds	r1, r2, r1
 8004620:	6039      	str	r1, [r7, #0]
 8004622:	4649      	mov	r1, r9
 8004624:	414b      	adcs	r3, r1
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004634:	4659      	mov	r1, fp
 8004636:	00cb      	lsls	r3, r1, #3
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463e:	4651      	mov	r1, sl
 8004640:	00ca      	lsls	r2, r1, #3
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	4603      	mov	r3, r0
 8004648:	4642      	mov	r2, r8
 800464a:	189b      	adds	r3, r3, r2
 800464c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800464e:	464b      	mov	r3, r9
 8004650:	460a      	mov	r2, r1
 8004652:	eb42 0303 	adc.w	r3, r2, r3
 8004656:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	663b      	str	r3, [r7, #96]	@ 0x60
 8004662:	667a      	str	r2, [r7, #100]	@ 0x64
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004670:	4649      	mov	r1, r9
 8004672:	008b      	lsls	r3, r1, #2
 8004674:	4641      	mov	r1, r8
 8004676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467a:	4641      	mov	r1, r8
 800467c:	008a      	lsls	r2, r1, #2
 800467e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004682:	f7fb fda9 	bl	80001d8 <__aeabi_uldivmod>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4b0d      	ldr	r3, [pc, #52]	@ (80046c0 <UART_SetConfig+0x4e4>)
 800468c:	fba3 1302 	umull	r1, r3, r3, r2
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	2164      	movs	r1, #100	@ 0x64
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	3332      	adds	r3, #50	@ 0x32
 800469e:	4a08      	ldr	r2, [pc, #32]	@ (80046c0 <UART_SetConfig+0x4e4>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	f003 020f 	and.w	r2, r3, #15
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4422      	add	r2, r4
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046ba:	46bd      	mov	sp, r7
 80046bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c0:	51eb851f 	.word	0x51eb851f

080046c4 <malloc>:
 80046c4:	4b02      	ldr	r3, [pc, #8]	@ (80046d0 <malloc+0xc>)
 80046c6:	4601      	mov	r1, r0
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f000 b825 	b.w	8004718 <_malloc_r>
 80046ce:	bf00      	nop
 80046d0:	2000000c 	.word	0x2000000c

080046d4 <sbrk_aligned>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004714 <sbrk_aligned+0x40>)
 80046d8:	460c      	mov	r4, r1
 80046da:	6831      	ldr	r1, [r6, #0]
 80046dc:	4605      	mov	r5, r0
 80046de:	b911      	cbnz	r1, 80046e6 <sbrk_aligned+0x12>
 80046e0:	f000 f8ae 	bl	8004840 <_sbrk_r>
 80046e4:	6030      	str	r0, [r6, #0]
 80046e6:	4621      	mov	r1, r4
 80046e8:	4628      	mov	r0, r5
 80046ea:	f000 f8a9 	bl	8004840 <_sbrk_r>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	d103      	bne.n	80046fa <sbrk_aligned+0x26>
 80046f2:	f04f 34ff 	mov.w	r4, #4294967295
 80046f6:	4620      	mov	r0, r4
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
 80046fa:	1cc4      	adds	r4, r0, #3
 80046fc:	f024 0403 	bic.w	r4, r4, #3
 8004700:	42a0      	cmp	r0, r4
 8004702:	d0f8      	beq.n	80046f6 <sbrk_aligned+0x22>
 8004704:	1a21      	subs	r1, r4, r0
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f89a 	bl	8004840 <_sbrk_r>
 800470c:	3001      	adds	r0, #1
 800470e:	d1f2      	bne.n	80046f6 <sbrk_aligned+0x22>
 8004710:	e7ef      	b.n	80046f2 <sbrk_aligned+0x1e>
 8004712:	bf00      	nop
 8004714:	2000022c 	.word	0x2000022c

08004718 <_malloc_r>:
 8004718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800471c:	1ccd      	adds	r5, r1, #3
 800471e:	f025 0503 	bic.w	r5, r5, #3
 8004722:	3508      	adds	r5, #8
 8004724:	2d0c      	cmp	r5, #12
 8004726:	bf38      	it	cc
 8004728:	250c      	movcc	r5, #12
 800472a:	2d00      	cmp	r5, #0
 800472c:	4606      	mov	r6, r0
 800472e:	db01      	blt.n	8004734 <_malloc_r+0x1c>
 8004730:	42a9      	cmp	r1, r5
 8004732:	d904      	bls.n	800473e <_malloc_r+0x26>
 8004734:	230c      	movs	r3, #12
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	2000      	movs	r0, #0
 800473a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004814 <_malloc_r+0xfc>
 8004742:	f000 f869 	bl	8004818 <__malloc_lock>
 8004746:	f8d8 3000 	ldr.w	r3, [r8]
 800474a:	461c      	mov	r4, r3
 800474c:	bb44      	cbnz	r4, 80047a0 <_malloc_r+0x88>
 800474e:	4629      	mov	r1, r5
 8004750:	4630      	mov	r0, r6
 8004752:	f7ff ffbf 	bl	80046d4 <sbrk_aligned>
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	4604      	mov	r4, r0
 800475a:	d158      	bne.n	800480e <_malloc_r+0xf6>
 800475c:	f8d8 4000 	ldr.w	r4, [r8]
 8004760:	4627      	mov	r7, r4
 8004762:	2f00      	cmp	r7, #0
 8004764:	d143      	bne.n	80047ee <_malloc_r+0xd6>
 8004766:	2c00      	cmp	r4, #0
 8004768:	d04b      	beq.n	8004802 <_malloc_r+0xea>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	4639      	mov	r1, r7
 800476e:	4630      	mov	r0, r6
 8004770:	eb04 0903 	add.w	r9, r4, r3
 8004774:	f000 f864 	bl	8004840 <_sbrk_r>
 8004778:	4581      	cmp	r9, r0
 800477a:	d142      	bne.n	8004802 <_malloc_r+0xea>
 800477c:	6821      	ldr	r1, [r4, #0]
 800477e:	1a6d      	subs	r5, r5, r1
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
 8004784:	f7ff ffa6 	bl	80046d4 <sbrk_aligned>
 8004788:	3001      	adds	r0, #1
 800478a:	d03a      	beq.n	8004802 <_malloc_r+0xea>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	442b      	add	r3, r5
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	f8d8 3000 	ldr.w	r3, [r8]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	bb62      	cbnz	r2, 80047f4 <_malloc_r+0xdc>
 800479a:	f8c8 7000 	str.w	r7, [r8]
 800479e:	e00f      	b.n	80047c0 <_malloc_r+0xa8>
 80047a0:	6822      	ldr	r2, [r4, #0]
 80047a2:	1b52      	subs	r2, r2, r5
 80047a4:	d420      	bmi.n	80047e8 <_malloc_r+0xd0>
 80047a6:	2a0b      	cmp	r2, #11
 80047a8:	d917      	bls.n	80047da <_malloc_r+0xc2>
 80047aa:	1961      	adds	r1, r4, r5
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	6025      	str	r5, [r4, #0]
 80047b0:	bf18      	it	ne
 80047b2:	6059      	strne	r1, [r3, #4]
 80047b4:	6863      	ldr	r3, [r4, #4]
 80047b6:	bf08      	it	eq
 80047b8:	f8c8 1000 	streq.w	r1, [r8]
 80047bc:	5162      	str	r2, [r4, r5]
 80047be:	604b      	str	r3, [r1, #4]
 80047c0:	4630      	mov	r0, r6
 80047c2:	f000 f82f 	bl	8004824 <__malloc_unlock>
 80047c6:	f104 000b 	add.w	r0, r4, #11
 80047ca:	1d23      	adds	r3, r4, #4
 80047cc:	f020 0007 	bic.w	r0, r0, #7
 80047d0:	1ac2      	subs	r2, r0, r3
 80047d2:	bf1c      	itt	ne
 80047d4:	1a1b      	subne	r3, r3, r0
 80047d6:	50a3      	strne	r3, [r4, r2]
 80047d8:	e7af      	b.n	800473a <_malloc_r+0x22>
 80047da:	6862      	ldr	r2, [r4, #4]
 80047dc:	42a3      	cmp	r3, r4
 80047de:	bf0c      	ite	eq
 80047e0:	f8c8 2000 	streq.w	r2, [r8]
 80047e4:	605a      	strne	r2, [r3, #4]
 80047e6:	e7eb      	b.n	80047c0 <_malloc_r+0xa8>
 80047e8:	4623      	mov	r3, r4
 80047ea:	6864      	ldr	r4, [r4, #4]
 80047ec:	e7ae      	b.n	800474c <_malloc_r+0x34>
 80047ee:	463c      	mov	r4, r7
 80047f0:	687f      	ldr	r7, [r7, #4]
 80047f2:	e7b6      	b.n	8004762 <_malloc_r+0x4a>
 80047f4:	461a      	mov	r2, r3
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	d1fb      	bne.n	80047f4 <_malloc_r+0xdc>
 80047fc:	2300      	movs	r3, #0
 80047fe:	6053      	str	r3, [r2, #4]
 8004800:	e7de      	b.n	80047c0 <_malloc_r+0xa8>
 8004802:	230c      	movs	r3, #12
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	4630      	mov	r0, r6
 8004808:	f000 f80c 	bl	8004824 <__malloc_unlock>
 800480c:	e794      	b.n	8004738 <_malloc_r+0x20>
 800480e:	6005      	str	r5, [r0, #0]
 8004810:	e7d6      	b.n	80047c0 <_malloc_r+0xa8>
 8004812:	bf00      	nop
 8004814:	20000230 	.word	0x20000230

08004818 <__malloc_lock>:
 8004818:	4801      	ldr	r0, [pc, #4]	@ (8004820 <__malloc_lock+0x8>)
 800481a:	f000 b84b 	b.w	80048b4 <__retarget_lock_acquire_recursive>
 800481e:	bf00      	nop
 8004820:	20000370 	.word	0x20000370

08004824 <__malloc_unlock>:
 8004824:	4801      	ldr	r0, [pc, #4]	@ (800482c <__malloc_unlock+0x8>)
 8004826:	f000 b846 	b.w	80048b6 <__retarget_lock_release_recursive>
 800482a:	bf00      	nop
 800482c:	20000370 	.word	0x20000370

08004830 <memset>:
 8004830:	4402      	add	r2, r0
 8004832:	4603      	mov	r3, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	d100      	bne.n	800483a <memset+0xa>
 8004838:	4770      	bx	lr
 800483a:	f803 1b01 	strb.w	r1, [r3], #1
 800483e:	e7f9      	b.n	8004834 <memset+0x4>

08004840 <_sbrk_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4d06      	ldr	r5, [pc, #24]	@ (800485c <_sbrk_r+0x1c>)
 8004844:	2300      	movs	r3, #0
 8004846:	4604      	mov	r4, r0
 8004848:	4608      	mov	r0, r1
 800484a:	602b      	str	r3, [r5, #0]
 800484c:	f7fc f9a4 	bl	8000b98 <_sbrk>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d102      	bne.n	800485a <_sbrk_r+0x1a>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	b103      	cbz	r3, 800485a <_sbrk_r+0x1a>
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	bd38      	pop	{r3, r4, r5, pc}
 800485c:	2000036c 	.word	0x2000036c

08004860 <__errno>:
 8004860:	4b01      	ldr	r3, [pc, #4]	@ (8004868 <__errno+0x8>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	2000000c 	.word	0x2000000c

0800486c <__libc_init_array>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	4d0d      	ldr	r5, [pc, #52]	@ (80048a4 <__libc_init_array+0x38>)
 8004870:	4c0d      	ldr	r4, [pc, #52]	@ (80048a8 <__libc_init_array+0x3c>)
 8004872:	1b64      	subs	r4, r4, r5
 8004874:	10a4      	asrs	r4, r4, #2
 8004876:	2600      	movs	r6, #0
 8004878:	42a6      	cmp	r6, r4
 800487a:	d109      	bne.n	8004890 <__libc_init_array+0x24>
 800487c:	4d0b      	ldr	r5, [pc, #44]	@ (80048ac <__libc_init_array+0x40>)
 800487e:	4c0c      	ldr	r4, [pc, #48]	@ (80048b0 <__libc_init_array+0x44>)
 8004880:	f000 f828 	bl	80048d4 <_init>
 8004884:	1b64      	subs	r4, r4, r5
 8004886:	10a4      	asrs	r4, r4, #2
 8004888:	2600      	movs	r6, #0
 800488a:	42a6      	cmp	r6, r4
 800488c:	d105      	bne.n	800489a <__libc_init_array+0x2e>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	f855 3b04 	ldr.w	r3, [r5], #4
 8004894:	4798      	blx	r3
 8004896:	3601      	adds	r6, #1
 8004898:	e7ee      	b.n	8004878 <__libc_init_array+0xc>
 800489a:	f855 3b04 	ldr.w	r3, [r5], #4
 800489e:	4798      	blx	r3
 80048a0:	3601      	adds	r6, #1
 80048a2:	e7f2      	b.n	800488a <__libc_init_array+0x1e>
 80048a4:	08004924 	.word	0x08004924
 80048a8:	08004924 	.word	0x08004924
 80048ac:	08004924 	.word	0x08004924
 80048b0:	08004928 	.word	0x08004928

080048b4 <__retarget_lock_acquire_recursive>:
 80048b4:	4770      	bx	lr

080048b6 <__retarget_lock_release_recursive>:
 80048b6:	4770      	bx	lr

080048b8 <memcpy>:
 80048b8:	440a      	add	r2, r1
 80048ba:	4291      	cmp	r1, r2
 80048bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80048c0:	d100      	bne.n	80048c4 <memcpy+0xc>
 80048c2:	4770      	bx	lr
 80048c4:	b510      	push	{r4, lr}
 80048c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ce:	4291      	cmp	r1, r2
 80048d0:	d1f9      	bne.n	80048c6 <memcpy+0xe>
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <_init>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr

080048e0 <_fini>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr
